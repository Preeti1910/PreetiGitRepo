{"version":3,"sources":["webpack://AdaptiveCards/webpack/universalModuleDefinition","webpack://AdaptiveCards/webpack/bootstrap","webpack://AdaptiveCards/./src/enums.ts","webpack://AdaptiveCards/./src/shared.ts","webpack://AdaptiveCards/./src/serialization.ts","webpack://AdaptiveCards/./src/utils.ts","webpack://AdaptiveCards/./src/strings.ts","webpack://AdaptiveCards/./src/registry.ts","webpack://AdaptiveCards/./src/card-object.ts","webpack://AdaptiveCards/./src/host-capabilities.ts","webpack://AdaptiveCards/./src/card-elements.ts","webpack://AdaptiveCards/./src/host-config.ts","webpack://AdaptiveCards/./src/activity-request.ts","webpack://AdaptiveCards/./src/adaptivecards.ts","webpack://AdaptiveCards/./src/text-formatters.ts","webpack://AdaptiveCards/./src/channel-adapter.ts","webpack://AdaptiveCards/./src/adaptive-applet.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Default","Positive","Destructive","ActionStyle","Size","ImageSize","SizeUnit","TextSize","TextWeight","FontType","Spacing","TextColor","HorizontalAlignment","VerticalAlignment","ActionAlignment","ImageStyle","ShowCardActionMode","Orientation","FillMode","ActionIconPlacement","InputTextStyle","Emphasis","Accent","Good","Attention","Warning","ContainerStyle","ValidationPhase","ValidationEvent","ContainerFitStatus","RefreshMode","LogLevel","useAdvancedTextBlockTruncation","useAdvancedCardBottomTruncation","useMarkdownInRadioButtonAndCheckbox","allowMarkForTextHighlighting","alwaysBleedSeparators","enableFullJsonRoundTrip","displayInputValidationErrors","allowPreProcessingPropertyValues","setTabIndexAtCardRoot","enableFallback","useWebkitLineClamp","applets","logEnabled","logLevel","Enums","Error","maximumRetryAttempts","defaultTimeBetweenRetryAttempts","authPromptWidth","authPromptHeight","refresh","Manual","timeBetweenAutomaticRefreshes","maximumConsecutiveAutomaticRefreshes","allowManualRefreshesAfterAutomaticRefreshes","GlobalSettings","ContentTypes","applicationJson","applicationXWwwFormUrlencoded","_isProcessed","getReferencedInputs","inputs","referencedInputs","input","RegExp","id","exec","_original","substituteInputValues","contentType","_processed","regEx","matches","keys","toLowerCase","matchedInput","valueForReplace","JSON","stringify","slice","encodeURIComponent","replace","getOriginal","set","StringWithSubstitutions","top","right","bottom","left","SpacingDefinition","None","PaddingDefinition","physicalSize","unit","parse","requireUnitSpecifier","result","SizeAndUnit","Weight","expectedMatchCount","length","parseInt","Pixel","generate","d0","Math","random","d1","d2","d3","UUID","lut","initialize","toString","major","minor","label","_isValid","_major","_minor","_label","versionString","context","Version","_versionString","logParseEvent","undefined","InvalidPropertyValue","Strings","errors","invalidVersionString","toJSON","compareTo","otherVersion","isValid","v1_0","v1_1","v1_2","v1_3","v1_4","latest","Versions","version","targetVersion","_validationEvents","serializeValue","target","propertyName","propertyValue","defaultValue","forceDeleteIfNullOrDefault","serializeString","serializeBool","serializeNumber","isNaN","serializeEnum","enumType","targetValue","canDeleteTarget","serializeArray","items","item","serializedItem","SerializableObject","push","Array","isArray","clearEvents","logEvent","source","phase","event","message","Parse","getEventAt","index","BaseSerializationContext","onGetInitialValue","isSerializationEnabled","sequentialNumber","PropertyDefinition","_sequentialNumber","getInternalName","sender","treatEmptyAsUndefined","parsedValue","Utils","parseString","invalidPropertyValue","StringProperty","parseBool","BoolProperty","parseNumber","NumProperty","size","PixelSizeProperty","sourceValue","StringArrayProperty","values","isValidValue","versionedValue","propertyValueNotSupported","valueFound","ToJSON","ValueSetProperty","_values","keyAsNumber","enumValue","getEnumValueByName","EnumProperty","objectType","nullable","serializedValue","hasAllDefaultValues","SerializableObjectProperty","onItemAdded","sourceCollection","sourceItem","SerializableObjectCollectionProperty","onParse","onToJSON","CustomProperty","_properties","indexOf","add","properties","remove","splice","getItemAt","getCount","SerializableObjectSchema","propertyKey","descriptor","getOwnPropertyDescriptor","getValue","setValue","_propertyBag","_rawProperties","maxVersion","defaultMaxVersion","getSchema","getDefaultSerializationContext","SimpleSerializationContext","populateSchema","schema","ctor","constructor","sortedProperties","sort","p1","p2","onRegisterCustomProperties","internalParse","UnsupportedProperty","propertyNotSupported","resetDefaultValues","internalToJSON","serializedProperties","shouldSerialize","effectiveContext","toJSONOriginalParam","hasDefaultValue","setCustomProperty","getCustomProperty","_schemaCache","getSchemaKey","stringToCssColor","color","a","findNextCharacter","html","currIdx","window","document","documentMode","userAgent","navigator","match","Shared","node","child","appendChild","obj","hostConfig","separationDefinition","orientation","spacing","lineThickness","separator","createElement","className","makeCssClassName","Horizontal","setAttribute","lineColor","style","paddingTop","marginBottom","borderBottom","height","paddingLeft","marginRight","borderRight","width","overflow","flex","element","maxHeight","lineHeight","fits","scrollHeight","fullText","innerHTML","truncateAt","idx","substring","breakableIndices","results","findBreakableIndices","lo","hi","bestBreakIdx","mid","floor","containerEnd","start","offsetTop","clientHeight","FullyInContainer","Overflowing","FullyOutOfContainer","firstChild","removeChild","unknownElementType","typeName","unknownActionType","elementTypeNotAllowed","actionTypeNotAllowed","showCardMustHaveCard","invalidColumnWidth","invalidWidth","invalidCardVersion","defaultingToVersion","supportedInVersion","versionUsed","indexOutOfRange","elementCannotBeUsedAsInline","inlineAlreadyParented","interactivityNotAllowed","inputsMustHaveUniqueId","choiceSetMustHaveAtLeastOneChoice","choiceSetChoicesMustHaveTitleAndValue","propertyMustBeSet","actionHttpHeadersMustHaveNameAndValue","tooManyActions","maximumActions","columnAlreadyBelongsToAnotherSet","invalidCardType","unsupportedCardVersion","maxSupportedVersion","duplicateId","markdownProcessingNotEnabled","processMarkdownEventRemoved","elementAlreadyParented","actionAlreadyParented","elementTypeNotStandalone","magicCodeInputCard","tryAgain","pleaseLogin","enterMagicCode","pleaseEnterMagicCodeYouReceived","submit","cancel","somethingWentWrong","authenticationFailed","runtime","automaticRefreshPaused","clckToRestartAutomaticRefresh","refreshThisCard","hints","dontUseWeightedAndStrecthedColumnsInSameSet","defaults","inlineActionTitle","mediaPlayerAriaLabel","mediaPlayerPlayMedia","_items","findByName","clear","register","schemaVersion","registrationInfo","unregister","createInstance","getItemCount","map","e","CardObjectRegistry","allIds","validationEvents","addFailure","cardObject","Validation","ValidationResults","_shouldFallback","getJsonTypeName","CardObject","requiresProperty","contains","_renderedElement","preProcessPropertyValue","currentObject","onPreProcessPropertyValue","parent","setParent","_parent","setShouldFallback","shouldFallback","requires","areAllMet","hostCapabilities","getRootObject","rootObject","internalValidateProperties","DuplicateId","validateProperties","findDOMNodeOwner","typeNameProperty","idProperty","HostCapabilities","_capabilities","jsonVersion","addCapability","removeCapability","hasCapability","capabilityName","_truncatedDueToOverflow","lang","CardElement","langProperty","isVisibleProperty","undoOverflowTruncation","isVisible","updateRenderedElementVisibility","raiseElementVisibilityChangedEvent","internalRenderSeparator","renderedSeparator","renderSeparation","getEffectiveSpacing","separatorOrientation","parentContainer","getParentContainer","getEffectivePadding","parentPhysicalPadding","paddingDefinitionToSpacingDefinition","marginLeft","displayMode","isDesignMode","_defaultRenderedElementDisplayMode","display","removeProperty","_separatorElement","isFirstElement","hideElementDueToOverflow","visibility","showElementHiddenDueToOverflow","handleOverflow","isHiddenDueToOverflow","handled","truncateOverflow","resetOverflow","sizeChanged","SerializationContext","createPlaceholderElement","styleDefinition","getEffectiveStyleDefinition","foregroundCssColor","foregroundColors","default","subtle","border","padding","minHeight","fontSize","innerText","adjustRenderedElementSize","renderedElement","isDisplayed","offsetHeight","overrideInternalRender","internalRender","applyPadding","separatorElement","isBleeding","getImmediateSurroundingPadding","physicalPadding","getDefaultPadding","getHasBackground","getPadding","_padding","setPadding","elementRegistry","asString","getEffectiveStyle","defaultStyle","containerStyles","getStyleByName","getForbiddenActionTypes","processTop","processRight","processBottom","processLeft","doProcessTop","isTopElement","doProcessRight","isRightMostElement","doProcessBottom","isBottomElement","doProcessLeft","isLeftMostElement","effectivePadding","getActionCount","getActionAt","CardElementContainer","removeItem","render","customCssSelector","classList","boxSizing","updateLayout","processChildren","cardElement","rootElement","getRootElement","AdaptiveCard","designMode","isLastElement","isAtTheVeryLeft","isAtTheVeryRight","isAtTheVeryTop","isAtTheVeryBottom","isBleedingAtTop","isBleedingAtBottom","currentElement","Container","getAllInputs","processActions","getResourceInformation","getElementById","getActionById","allowCustomPadding","_hostConfig","defaultHostConfig","separatorProperty","heightProperty","horizontalAlignmentProperty","Left","spacingProperty","forbiddenActionTypes","parseAction","ActionProperty","text","weight","isSubtle","ariaHidden","BaseTextBlock","selectActionProperty","textProperty","setText","getFontSize","fontType","Small","fontSizes","small","Medium","medium","Large","large","ExtraLarge","extraLarge","getColorDefinition","colorSet","accent","Dark","dark","Light","light","good","warning","attention","init","textDefinition","applyStylesTo","targetElement","getFontTypeDefinition","fontFamily","fontWeight","colorDefinition","effectiveColor","Lighter","fontWeights","lighter","Bolder","bolder","sizeProperty","weightProperty","colorProperty","isSubtleProperty","fontTypeProperty","wrap","_treatAsPlainText","useMarkdown","restoreOriginalContent","maxLines","_computedLineHeight","_originalInnerHtml","truncateIfSupported","children","isTextOnly","tagName","truncate","_processedText","preProcessedText","forElementId","labelElement","htmlFor","selectAction","onclick","preventDefault","cancelBubble","execute","supportsInteractivity","tabIndex","getAriaRole","title","formattedText","TextFormatters","formatText","markdownProcessingResult","applyMarkdown","didProcess","outputHtml","markStyle","effectiveStyle","highlightBackgroundColor","highlightForegroundColor","firstElementChild","HTMLElement","marginTop","textOverflow","lastElementChild","anchors","getElementsByTagName","anchor","raiseAnchorClickedEvent","oncontextmenu","wordWrap","isInternetExplorer","webkitBoxOrient","webkitLineClamp","whiteSpace","isRtl","horizontalAlignment","Center","textAlign","Right","lineHeights","wrapProperty","maxLinesProperty","TextBlock","italic","strikethrough","highlight","underline","href","getHref","fontStyle","textDecoration","backgroundColor","highlightColors","italicProperty","strikethroughProperty","highlightProperty","underlineProperty","TextRun","_inlines","internalAddInline","inline","forceAdd","isInline","jsonInline","textRun","parseElement","jsonInlines","renderedInlines","renderedInline","getInlineCount","getInlineAt","addInline","removeInline","RichTextBlock","titleProperty","valueProperty","Fact","facts","borderWidth","borderSpacing","borderStyle","borderCollapse","trElement","factSet","tdElement","maxWidth","verticalAlign","textBlock","factsProperty","FactSet","internalName","fallbackProperty","Auto","applySize","pixelWidth","pixelHeight","imageSizes","Stretch","url","alignItems","onkeypress","keyCode","justifyContent","imageElement","onload","raiseImageLoadedEvent","onerror","card","errorElement","minWidth","Person","borderRadius","backgroundPosition","backgroundRepeat","src","Image","urlProperty","altTextProperty","alt","mimeType","backgroundColorProperty","styleProperty","pixelWidthProperty","ImageDimensionProperty","pixelHeightProperty","allowVerticalOverflow","isSelectable","isElementAllowed","isInteractive","paddingRight","paddingBottom","InteractivityNotAllowed","_selectAction","overflowX","overflowY","concat","_images","imageSize","flexWrap","image","imageSet","maxImageHeight","renderedImage","margin","getFirstVisibleRenderedItem","getLastVisibleRenderedItem","itemIndex","addImage","imagesProperty","imageSizeProperty","ImageSet","type","mimeTypeProperty","MediaSource","sources","getPosterUrl","poster","media","defaultPoster","processSources","_selectedSources","_selectedMediaType","mimeComponents","split","Media","supportedMediaTypes","handlePlayButtonInvoke","allowInlinePlayback","mediaPlayerElement","renderMediaPlayer","play","focus","onPlay","renderPoster","posterRootElement","altText","position","posterUrl","parentNode","playButtonOuterElement","playButtonInnerElement","playButtonArrowWidth","playButtonArrowHeight","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopColor","borderRightColor","borderBottomColor","transform","playButtonContainer","mediaElement","videoPlayer","autoplay","controls","isMobileOS","muted","preload","renderedSource","mediaSource","sourcesProperty","posterProperty","getAllLabelIds","labelIds","_renderedLabelElement","_renderedErrorMessageElement","updateInputControlAriaLabelledBy","_renderedInputControlElement","labelledBy","join","removeAttribute","_inputControlContainerElement","_outerContainerElement","flexDirection","renderedInputControlId","generateUniqueId","labelRichTextBlock","labelInline","isRequired","requiredInputs","isRequiredCueInline","suffix","suffixColor","optionalInputs","inputSpacing","isNullable","valueChanged","onInputValueChangedHandler","resetValidationFailureCue","onValueChanged","onInputValueChanged","renderedInputControlElement","showValidationErrorMessage","errorMessage","errorMessageTextBlock","PropertyCantBeNull","RequiredInputsShouldHaveLabel","RequiredInputsShouldHaveErrorMessage","validateValue","isSet","labelProperty","isRequiredProperty","errorMessageProperty","Input","isMultiline","Text","setupInput","placeholder","maxLength","oninput","ctrlKey","code","inlineAction","renderedInputControl","iconUrl","textContent","inputControlContainerElement","regex","test","maxLengthProperty","isMultilineProperty","placeholderProperty","inlineActionProperty","regexProperty","TextInput","valueOn","valueOff","_checkboxInputElement","joinedLabelIds","_checkboxInputLabelElement","checked","onchange","spacerElement","valueOnProperty","valueOffProperty","ToggleInput","Choice","isMultiSelect","choices","getUniqueCategoryName","uniqueCategoryName","ChoiceSetInput","uniqueCategoryCounter","internalApplyAriaCurrent","options","_selectElement","selected","renderCompoundInput","cssClassName","defaultValues","_toggleInputs","_labels","choice","_uniqueCategoryName","compoundInput","choiceSetInputValueSeparator","option","disabled","hidden","CollectionCantBeEmpty","toggleInput","isCompact","selectedIndex","choicesProperty","isMultiSelectProperty","_numberInputElement","min","max","valueAsNumber","minProperty","maxProperty","NumberInput","_dateInputElement","valueAsDate","Date","minDate","maxDate","DateInput","TimeProperty","convertTimeStringToDate","timeString","_timeInputElement","TimeInput","action","parentContainerStyle","_state","_parentContainerStyle","updateCssStyle","updateActionButtonCssStyle","makeCssClassNames","click","onClick","addCssClasses","internalGetReferencedInputs","internalPrepareForExecution","internalValidateInputs","actionRegistry","raiseExecuteActionEvent","onExecuteActionHandler","onExecute","onExecuteAction","prepareForExecution","actionButtonElement","buttonState","baseCssClass","buttonElement","accessibleTitle","expanded","titleElement","actions","iconPlacement","AboveTitle","allowTitleToWrap","iconElement","iconSize","_actionCollection","actionExecuted","invalidInputs","removeAction","validateInputs","iconUrlProperty","Action","_isPrepared","associatedInputs","current","_originalData","_processedData","dataProperty","associatedInputsProperty","SubmitActionBase","SubmitAction","JsonTypeName","ExecuteAction","verbProperty","OpenUrlAction","targetElements","updateAriaControlsAttribute","elementIds","ToggleVisibilityAction","elementId","addTargetElement","removeTargetElement","targetElementsProperty","_value","newValue","nameProperty","StringWithSubstitutionProperty","HttpHeader","_ignoreInputValidation","allInputs","_url","headers","_body","header","HttpAction","bodyProperty","methodProperty","headersProperty","ignoreInputValidationProperty","InlineAdaptiveCard","jsonCard","showCard","actionMode","Popup","ShowCardAction","owner","_renderedActionCount","buttons","_owner","isActionAllowed","forbiddenTypes","forbiddenType","refreshContainer","_actionCardContainer","_actionCard","inlineTopMargin","layoutChanged","showActionCard","suppressStyle","raiseEvent","renderedCard","_expandedAction","raiseInlineCardExpandedEvent","collapseExpandedAction","state","previouslyExpandedAction","expandShowCardAction","button","findActionButton","actionButton","jsonAction","addAction","maxActions","TooManyActions","ActionTypeNotAllowed","preExpandSingleShowCardAction","buttonStrip","actionAlignment","allowedActions","filter","ActionButton","ab","actionsOrientation","buttonSpacing","spacer","buttonStripContainer","expandedAction","actionIndex","ActionCollection","renderedActionCount","orientationProperty","ActionSet","_bleed","allowCustomStyle","StylableCardElementContainer","minPixelHeight","applyBackground","bgColor","surroundingPadding","currentElementHasBackgroundImage","backgroundImage","hasExplicitStyle","Padding","getHasExpandedAction","getBleed","setBleed","alwaysAllowBleed","explicitStyle","bleedProperty","minHeightProperty","apply","BackgroundImage","fillMode","Repeat","RepeatHorizontally","RepeatVertically","Cover","backgroundSize","backgroundPositionX","verticalAlignment","backgroundPositionY","Bottom","fillModeProperty","verticalAlignmentProperty","Top","verticalContentAlignment","_renderedItems","backgroundImageProperty","insertItemAt","forceInsert","isStandalone","supportsExcplitiHeight","getItemsCollectionPropertyName","rtl","dir","renderedItem","placeholderElement","elt","getFitStatus","jsonItems","firstRenderedItem","lastRenderedItem","addItem","insertItemBefore","insertBefore","insertItemAfter","insertAfter","verticalContentAlignmentProperty","rtlProperty","_computedWeight","Vertical","ColumnSet","widthProperty","Column","_columns","createColumnInstance","parseCardObject","errorType","ElementTypeNotAllowed","_renderedColumns","totalWeight","column","computedWeight","renderedColumn","jsonColumns","getColumnAt","weightedColumns","stretchedColumns","Hint","addColumn","onImageLoadedHandler","onImageLoaded","ev","onAnchorClickedHandler","onAnchorClicked","isExpanded","onInlineCardExpandedHandler","onInlineCardExpanded","shouldUpdateLayout","onElementVisibilityChangedHandler","onElementVisibilityChanged","renderedActions","renderIfEmpty","ContainerWithActions","RefreshActionProperty","RefreshDefinition","actionProperty","userIdsProperty","typeProperty","imageProperty","AuthCardButton","uriProperty","providerIdProperty","TokenExchangeResource","connectionNameProperty","buttonsProperty","tokenExchangeResourceProperty","Authentication","refreshProperty","onProcessMarkdown","markdownit","markdownIt","console","warn","isVersionSupported","bypassVersionCheck","_fallbackCard","fallbackElement","versionProperty","adaptiveCard","MissingCardType","UnsupportedCardVersion","speak","schemaUrl","$schemaProperty","fallbackTextProperty","speakProperty","authenticationProperty","populateWithDefaultElements","registry","populateWithDefaultActions","reset","GlobalRegistry","elements","internalParseCardObject","forbiddenTypeNames","allowFallback","createInstanceCallback","tryToFallback","fallback","cardObjectParsed","onParseAction","onParseElement","UnknownElementType","UnknownActionType","_elementRegistry","setElementRegistry","_actionRegistry","setActionRegistry","parseHostConfigEnum","targetEnum","parseEnum","defaultColor","subtleColor","ColorDefinition","TextColorDefinition","AdaptiveCardConfig","ImageSetConfig","MediaConfig","getDefaultWeight","BaseTextDefinition","RequiredInputLabelTextDefinition","InputLabelConfig","InputConfig","FactTextDefinition","FactTitleDefinition","FactSetConfig","Inline","ShowCardActionConfig","LeftOfTitle","sizeAndUnit","ActionsConfig","parseSingleColor","ColorSetDefinition","ContainerStyleDefinition","_allStyles","BuiltInContainerStyleDefinition","customStyleArray","customStyle","styleName","forEach","isBuiltIn","emphasis","customStyles","ContainerStyleSet","monospace","FontTypeDefinition","getStyleDefinition","Monospace","FontTypeSet","String","_legacyFontType","fontTypes","paddingDefinition","classNames","cssClassNamePrefix","HostConfig","ActivityRequestTrigger","ActivityRequestError","request","ActivityResponse","rawContent","SuccessResponse","error","ErrorResponse","_auth","URL","signinButton","tokenExchangeResource","LoginRequestResponse","regularExpression","_regularExpression","format","internalFormat","date","toLocaleDateString","day","weekday","month","year","AbstractTextFormatter","toLocaleTimeString","hour","minute","DateFormatter","TimeFormatter","ChannelAdapter","level","onLogEvent","optionalParams","log","trigger","consecutiveRefreshes","attemptNumber","retryAsync","onSend","_allowAutomaticCardUpdate","_cardHostElement","_refreshButtonHostElement","displayCard","clearElementChildren","showManualRefreshButton","refreshAction","onShowManualRefreshButton","renderedRefreshButton","onRenderManualRefreshButton","Automatic","autoRefreshPausedMessage","cardPayload","body","inlines","internalExecuteAction","createActivityRequest","ActivityRequest","internalSendActivityRequestAsync","onPrepareActivityRequest","createMagicCodeInputCard","payload","AdaptiveApplet","submitMagicCodeActionId","cancelMagicCodeAuthActionId","cancelAutomaticRefresh","createSerializationContext","onCreateSerializationContext","internalSetCard","_cardPayload","serializationContext","onCardChanging","_card","authentication","onPrefetchSSOToken","onCardChanged","Info","setTimeout","Disabled","channelAdapter","onAction","createProgressOverlay","_progressOverlay","onCreateProgressOverlay","spinner","removeProgressOverlay","onRemoveProgressOverlay","activityRequestSucceeded","response","parsedContent","onActivityRequestSucceeded","activityRequestFailed","onActivityRequestFailed","showAuthCodeInputDialog","onShowAuthCodeInputDialog","authCodeInputCard","submitMagicCodeAction","authCode","data","alert","overlay","done","sendRequestAsync","Promise","resolve","reject","attemptOAuth","onSSOTokenNeeded","onShowSigninPrompt","screenX","outerWidth","screenY","outerHeight","open","refreshCard","setCard"],"mappings":"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","file":"adaptivecards.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AdaptiveCards\"] = factory();\n\telse\n\t\troot[\"AdaptiveCards\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// Note the \"weird\" way these readonly fields are declared is to work around\n// a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n// and adopt this syntax for all other static readonly fields.\nexport class ActionStyle {\n    static readonly Default: \"default\" = \"default\";\n    static readonly Positive: \"positive\" = \"positive\";\n    static readonly Destructive: \"destructive\" = \"destructive\";\n}\n\nexport enum Size {\n    Auto,\n    Stretch,\n    Small,\n    Medium,\n    Large\n}\n\nexport enum ImageSize {\n    Small,\n    Medium,\n    Large\n}\n\nexport enum SizeUnit {\n    Weight,\n    Pixel\n}\n\nexport enum TextSize {\n    Small,\n    Default,\n    Medium,\n    Large,\n    ExtraLarge\n}\n\nexport enum TextWeight {\n    Lighter,\n    Default,\n    Bolder\n}\n\nexport enum FontType {\n    Default,\n    Monospace\n}\n\nexport enum Spacing {\n    None,\n    Small,\n    Default,\n    Medium,\n    Large,\n    ExtraLarge,\n    Padding\n}\n\nexport enum TextColor {\n    Default,\n    Dark,\n    Light,\n    Accent,\n    Good,\n    Warning,\n    Attention\n}\n\nexport enum HorizontalAlignment {\n    Left,\n    Center,\n    Right\n}\n\nexport enum VerticalAlignment {\n    Top,\n    Center,\n    Bottom\n}\n\nexport enum ActionAlignment {\n    Left,\n    Center,\n    Right,\n    Stretch\n}\n\nexport enum ImageStyle {\n    Default,\n    Person\n}\n\nexport enum ShowCardActionMode {\n    Inline,\n    Popup\n}\n\nexport enum Orientation {\n    Horizontal,\n    Vertical\n}\n\nexport enum FillMode {\n    Cover,\n    RepeatHorizontally,\n    RepeatVertically,\n    Repeat\n}\n\nexport enum ActionIconPlacement {\n    LeftOfTitle,\n    AboveTitle\n}\n\nexport enum InputTextStyle {\n    Text,\n    Tel,\n    Url,\n    Email\n}\n\n/*\n    This should really be a string enum, e.g.\n\n        export enum ContainerStyle {\n            Default = \"default\",\n            Emphasis = \"emphasis\"\n        }\n\n    However, some hosts do not use a version of TypeScript\n    recent enough to understand string enums. This is\n    a compatible construct that does not require using\n    a more recent version of TypeScript.\n\n    Also note the \"weird\" way these readonly fields are declared is to work around\n    a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    and adopt this syntax for all other static readonly fields.\n*/\nexport class ContainerStyle {\n    static readonly Default: \"default\" = \"default\";\n    static readonly Emphasis: \"emphasis\" = \"emphasis\";\n    static readonly Accent: \"accent\" = \"accent\";\n    static readonly Good: \"good\" = \"good\";\n    static readonly Attention: \"attention\" = \"attention\";\n    static readonly Warning: \"warning\" = \"warning\";\n}\n\nexport enum ValidationPhase {\n    Parse,\n    ToJSON,\n    Validation\n}\n\nexport enum ValidationEvent {\n    Hint,\n    ActionTypeNotAllowed,\n    CollectionCantBeEmpty,\n    Deprecated,\n    ElementTypeNotAllowed,\n    InteractivityNotAllowed,\n    InvalidPropertyValue,\n    MissingCardType,\n    PropertyCantBeNull,\n    TooManyActions,\n    UnknownActionType,\n    UnknownElementType,\n    UnsupportedCardVersion,\n    DuplicateId,\n    UnsupportedProperty,\n    RequiredInputsShouldHaveLabel,\n    RequiredInputsShouldHaveErrorMessage,\n    Other\n}\n\nexport enum ContainerFitStatus {\n    FullyInContainer,\n    Overflowing,\n    FullyOutOfContainer\n}\n\nexport enum RefreshMode {\n    Disabled,\n    Manual,\n    Automatic\n}\n\nexport enum LogLevel {\n    Info,\n    Warning,\n    Error\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\n\nexport type Refresh = {\n    mode: Enums.RefreshMode;\n    timeBetweenAutomaticRefreshes: number;\n    maximumConsecutiveAutomaticRefreshes: number;\n    allowManualRefreshesAfterAutomaticRefreshes: boolean;\n}\n\nexport type AppletsSettings = {\n    logEnabled: boolean;\n    logLevel: Enums.LogLevel;\n    maximumRetryAttempts: number;\n    defaultTimeBetweenRetryAttempts: number;\n    authPromptWidth: number;\n    authPromptHeight: number;\n    readonly refresh: Refresh;\n    onLogEvent?: (level: Enums.LogLevel, message?: any, ...optionalParams: any[]) => void;\n}\n\nexport class GlobalSettings {\n    static useAdvancedTextBlockTruncation: boolean = true;\n    static useAdvancedCardBottomTruncation: boolean = false;\n    static useMarkdownInRadioButtonAndCheckbox: boolean = true;\n    static allowMarkForTextHighlighting: boolean = false;\n    static alwaysBleedSeparators: boolean = false;\n    static enableFullJsonRoundTrip: boolean = false;\n    static displayInputValidationErrors: boolean = true;\n    static allowPreProcessingPropertyValues: boolean = false;\n    static setTabIndexAtCardRoot: boolean = true;\n    static enableFallback: boolean = true;\n    static useWebkitLineClamp: boolean = true;\n\n    static readonly applets: AppletsSettings = {\n        logEnabled: true,\n        logLevel: Enums.LogLevel.Error,\n        maximumRetryAttempts: 3,\n        defaultTimeBetweenRetryAttempts: 3000, // 3 seconds\n        authPromptWidth: 400,\n        authPromptHeight: 600,\n        refresh: {\n            mode: Enums.RefreshMode.Manual,\n            timeBetweenAutomaticRefreshes: 3000, // 3 seconds\n            maximumConsecutiveAutomaticRefreshes: 3,\n            allowManualRefreshesAfterAutomaticRefreshes: true\n        }\n    }\n}\n\nexport const ContentTypes = {\n    applicationJson: \"application/json\",\n    applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\n}\n\nexport interface ISeparationDefinition {\n    spacing: number,\n    lineThickness?: number,\n    lineColor?: string\n}\n\nexport interface IInput {\n    id?: string;\n    value?: string;\n    validateValue(): boolean;\n}\n\nexport type Dictionary<T> = { [key: string]: T };\n\nexport class StringWithSubstitutions {\n    private _isProcessed: boolean = false;\n    private _original?: string;\n    private _processed?: string;\n\n    getReferencedInputs(inputs: IInput[], referencedInputs: Dictionary<IInput>) {\n        if (!referencedInputs) {\n            throw new Error(\"The referencedInputs parameter cannot be null.\")\n        }\n\n        for (let input of inputs) {\n            let matches = new RegExp(\"\\\\{{2}(\" + input.id + \").value\\\\}{2}\", \"gi\").exec(<string>this._original);\n\n            if (matches != null && input.id) {\n                referencedInputs[input.id] = input;\n            }\n        }\n    }\n\n    substituteInputValues(inputs: Dictionary<IInput>, contentType: string) {\n        this._processed = this._original;\n\n        if (this._original) {\n            let regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\n            let matches;\n\n            while ((matches = regEx.exec(<string>this._original)) !== null) {\n                for (let key of Object.keys(inputs)) {\n                    if (key.toLowerCase() == matches[1].toLowerCase()) {\n                        let matchedInput = inputs[key];\n\n                        let valueForReplace = \"\";\n\n                        if (matchedInput.value) {\n                            valueForReplace = matchedInput.value;\n                        }\n\n                        if (contentType === ContentTypes.applicationJson) {\n                            valueForReplace = JSON.stringify(valueForReplace);\n                            valueForReplace = valueForReplace.slice(1, -1);\n                        }\n                        else if (contentType === ContentTypes.applicationXWwwFormUrlencoded) {\n                            valueForReplace = encodeURIComponent(valueForReplace);\n                        }\n\n                        this._processed = (<string>this._processed).replace(matches[0], valueForReplace);\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        this._isProcessed = true;\n    }\n\n    getOriginal(): string | undefined {\n        return this._original;\n    }\n\n    get(): string | undefined {\n        if (!this._isProcessed) {\n            return this._original;\n        }\n        else {\n            return this._processed;\n        }\n    }\n\n    set(value: string | undefined) {\n        this._original = value;\n        this._isProcessed = false;\n    }\n}\n\nexport class SpacingDefinition {\n    left: number = 0;\n    top: number = 0;\n    right: number = 0;\n    bottom: number = 0;\n\n    constructor(top: number = 0,\n        right: number = 0,\n        bottom: number = 0,\n        left: number = 0) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n}\n\nexport class PaddingDefinition {\n    top: Enums.Spacing = Enums.Spacing.None;\n    right: Enums.Spacing = Enums.Spacing.None;\n    bottom: Enums.Spacing = Enums.Spacing.None;\n    left: Enums.Spacing = Enums.Spacing.None;\n\n    constructor(top: Enums.Spacing = Enums.Spacing.None,\n        right: Enums.Spacing = Enums.Spacing.None,\n        bottom: Enums.Spacing = Enums.Spacing.None,\n        left: Enums.Spacing = Enums.Spacing.None) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n}\n\nexport class SizeAndUnit {\n    physicalSize: number;\n    unit: Enums.SizeUnit;\n\n    static parse(input: string, requireUnitSpecifier: boolean = false): SizeAndUnit {\n        let result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\n\n        if (typeof input === \"number\") {\n            result.physicalSize = input;\n\n            return result;\n        }\n        else if (typeof input === \"string\") {\n            let regExp = /^([0-9]+)(px|\\*)?$/g;\n            let matches = regExp.exec(input);\n            let expectedMatchCount = requireUnitSpecifier ? 3 : 2;\n\n            if (matches && matches.length >= expectedMatchCount) {\n                result.physicalSize = parseInt(matches[1]);\n\n                if (matches.length == 3) {\n                    if (matches[2] == \"px\") {\n                        result.unit = Enums.SizeUnit.Pixel;\n                    }\n                }\n\n                return result;\n            }\n        }\n\n        throw new Error(\"Invalid size: \" + input);\n    }\n\n    constructor(physicalSize: number, unit: Enums.SizeUnit) {\n        this.physicalSize = physicalSize;\n        this.unit = unit;\n    }\n}\n\nexport interface IResourceInformation {\n    url: string;\n    mimeType: string;\n}\n\n/**\n * Fast UUID generator, RFC4122 version 4 compliant.\n * @author Jeff Ward (jcward.com).\n * @license MIT license\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n **/\nexport class UUID {\n    private static lut: string[] = [];\n\n    static generate(): string {\n        let d0 = Math.random() * 0xffffffff | 0;\n        let d1 = Math.random() * 0xffffffff | 0;\n        let d2 = Math.random() * 0xffffffff | 0;\n        let d3 = Math.random() * 0xffffffff | 0;\n\n        return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' +\n            UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' +\n            UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] +\n            UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];\n    }\n\n    static initialize() {\n        for (let i = 0; i < 256; i++) {\n            UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n        }\n    }\n}\n\nUUID.initialize();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { GlobalSettings, SizeAndUnit } from \"./shared\";\nimport * as Utils from \"./utils\";\nimport * as Enums from \"./enums\";\nimport { Strings } from \"./strings\";\n\nexport interface IValidationEvent {\n    source?: SerializableObject,\n    phase: Enums.ValidationPhase,\n    event: Enums.ValidationEvent,\n    message: string;\n}\n\nexport class Version {\n    private _versionString: string;\n    private _major: number;\n    private _minor: number;\n    private _isValid: boolean = true;\n    private _label?: string;\n\n    constructor(major: number = 1, minor: number = 1, label?: string) {\n        this._major = major;\n        this._minor = minor;\n        this._label = label;\n    }\n\n    static parse(versionString: string, context: BaseSerializationContext): Version | undefined {\n        if (!versionString) {\n            return undefined;\n        }\n\n        let result = new Version();\n        result._versionString = versionString;\n\n        let regEx = /(\\d+).(\\d+)/gi;\n        let matches = regEx.exec(versionString);\n\n        if (matches != null && matches.length == 3) {\n            result._major = parseInt(matches[1]);\n            result._minor = parseInt(matches[2]);\n        }\n        else {\n            result._isValid = false;\n        }\n\n        if (!result._isValid) {\n            context.logParseEvent(\n                undefined,\n                Enums.ValidationEvent.InvalidPropertyValue,\n                Strings.errors.invalidVersionString(result._versionString));\n        }\n\n        return result;\n    }\n\n    toString(): string {\n        return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\n    }\n\n    toJSON(): any {\n        return this.toString();\n    }\n\n    compareTo(otherVersion: Version): number {\n        if (!this.isValid || !otherVersion.isValid) {\n            throw new Error(\"Cannot compare invalid version.\");\n        }\n\n        if (this.major > otherVersion.major) {\n            return 1;\n        }\n        else if (this.major < otherVersion.major) {\n            return -1;\n        }\n        else if (this.minor > otherVersion.minor) {\n            return 1;\n        }\n        else if (this.minor < otherVersion.minor) {\n            return -1;\n        }\n\n        return 0;\n    }\n\n    get label(): string {\n        return this._label ? this._label : this.toString();\n    }\n\n    get major(): number {\n        return this._major;\n    }\n\n    get minor(): number {\n        return this._minor;\n    }\n\n    get isValid(): boolean {\n        return this._isValid;\n    }\n}\n\nexport type TargetVersion = Version | \"*\";\n\nexport class Versions {\n    static readonly v1_0 = new Version(1, 0);\n    static readonly v1_1 = new Version(1, 1);\n    static readonly v1_2 = new Version(1, 2);\n    static readonly v1_3 = new Version(1, 3);\n    static readonly v1_4 = new Version(1, 4);\n    static readonly latest = Versions.v1_4;\n}\n\nexport function isVersionLessOrEqual(version: TargetVersion, targetVersion: TargetVersion): boolean {\n    if (version instanceof Version) {\n        if (targetVersion instanceof Version) {\n            return targetVersion.compareTo(version) >= 0;\n        }\n        else {\n            // Target version is *\n            return true;\n        }\n    }\n    else {\n        // Version is *\n        return true;\n    }\n}\n\nexport abstract class BaseSerializationContext {\n    private _validationEvents: IValidationEvent[] = [];\n\n    toJSONOriginalParam: any;\n\n    constructor(public targetVersion: Version = Versions.latest) {}\n    \n    serializeValue(target: { [key: string]: any }, propertyName: string, propertyValue: any, defaultValue: any = undefined, forceDeleteIfNullOrDefault: boolean = false) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n            if (!GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeString(target: { [key: string]: any }, propertyName: string, propertyValue?: string, defaultValue?: string) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeBool(target: { [key: string]: any }, propertyName: string, propertyValue?: boolean, defaultValue?: boolean) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeNumber(target: { [key: string]: any }, propertyName: string, propertyValue?: number, defaultValue?: number) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue || isNaN(propertyValue)) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeEnum(\n        enumType: { [s: number]: string },\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue: number | undefined,\n        defaultValue: number | undefined = undefined) {\n        let targetValue = target[propertyName];\n\n        let canDeleteTarget = targetValue == undefined ? true : enumType[targetValue] !== undefined;\n\n        if (propertyValue == defaultValue) {\n            if (canDeleteTarget) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            if (propertyValue == undefined) {\n                if (canDeleteTarget) {\n                    delete target[propertyName];\n                }\n            }\n            else {\n                target[propertyName] = enumType[propertyValue];\n            }\n        }\n    }\n\n    serializeArray(target: { [key: string]: any }, propertyName: string, propertyValue: any[] | undefined) {\n        let items = [];\n\n        if (propertyValue) {\n            for (let item of propertyValue) {\n                let serializedItem: any = undefined;\n\n                if (item instanceof SerializableObject) {\n                    serializedItem = item.toJSON(this);\n                }\n                else if (item.toJSON) {\n                    serializedItem = item.toJSON();\n                }\n                else {\n                    serializedItem = item;\n                }\n\n                if (serializedItem !== undefined) {\n                    items.push(serializedItem);\n                }\n            }\n        }\n\n        if (items.length == 0) {\n            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            this.serializeValue(target, propertyName, items);\n        }\n    }\n\n    clearEvents() {\n        this._validationEvents = [];\n    }\n\n    logEvent(\n        source: SerializableObject | undefined,\n        phase: Enums.ValidationPhase,\n        event: Enums.ValidationEvent,\n        message: string) {\n        this._validationEvents.push(\n            {\n                source: source,\n                phase: phase,\n                event: event,\n                message: message\n            }\n        )\n    }\n\n    logParseEvent(source: SerializableObject | undefined, event: Enums.ValidationEvent, message: string) {\n        this.logEvent(source, Enums.ValidationPhase.Parse, event, message);\n    }\n\n    getEventAt(index: number): IValidationEvent {\n        return this._validationEvents[index];\n    }\n\n    get eventCount(): number {\n        return this._validationEvents.length;\n    }\n}\n\nclass SimpleSerializationContext extends BaseSerializationContext {}\n\nexport class PropertyDefinition {\n    private static _sequentialNumber: number = 0;\n\n    getInternalName(): string {\n        return this.name;\n    }\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): any {\n        return source[this.name];\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: any, context: BaseSerializationContext): void {\n        context.serializeValue(target, this.name, value, this.defaultValue);\n    }\n\n    readonly sequentialNumber: number;\n\n    isSerializationEnabled: boolean = true;\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: any,\n        readonly onGetInitialValue?: (sender: SerializableObject) => any) {\n            this.sequentialNumber = PropertyDefinition._sequentialNumber;\n\n            PropertyDefinition._sequentialNumber++;\n        }\n}\n\nexport class StringProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\n        let parsedValue = Utils.parseString(source[this.name], this.defaultValue);\n        let isUndefined = parsedValue === undefined || (parsedValue === \"\" && this.treatEmptyAsUndefined);\n\n        if (!isUndefined && this.regEx !== undefined) {\n            let matches = this.regEx.exec(<string>parsedValue);\n\n            if (!matches) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(parsedValue, this.name));\n\n                return undefined;\n            }\n        }\n\n        return parsedValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\n        context.serializeString(\n            target,\n            this.name,\n            value === \"\" && this.treatEmptyAsUndefined ? undefined : value,\n            this.defaultValue);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly treatEmptyAsUndefined: boolean = true,\n        readonly regEx?: RegExp,\n        readonly defaultValue?: string,\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class BoolProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): boolean | undefined {\n        return Utils.parseBool(source[this.name], this.defaultValue);\n    }\n\n    toJSON(sender: SerializableObject, target: object, value: boolean | undefined, context: BaseSerializationContext) {\n        context.serializeBool(\n            target,\n            this.name,\n            value,\n            this.defaultValue);\n    }\n}\n\nexport class NumProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        return Utils.parseNumber(source[this.name], this.defaultValue);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        context.serializeNumber(\n            target,\n            this.name,\n            value,\n            this.defaultValue);\n    }\n}\n\nexport class PixelSizeProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        let result: number | undefined = undefined;\n        let value = source[this.name];\n\n        if (typeof value === \"string\") {\n            let isValid = false;\n\n            try {\n                let size = SizeAndUnit.parse(value, true);\n\n                if (size.unit == Enums.SizeUnit.Pixel) {\n                    result = size.physicalSize;\n\n                    isValid = true;\n                }\n            }\n            catch {\n                // Do nothing. A parse error is emitted below\n            }\n\n            if (!isValid) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(source[this.name], \"minHeight\"));\n            }\n        }\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        context.serializeValue(\n            target,\n            this.name,\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\n    }\n}\n\nexport interface IVersionedValue<TValue> {\n    value: TValue;\n    targetVersion?: Version;\n}\n\nexport class StringArrayProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string[] | undefined {\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined || !Array.isArray(sourceValue)) {\n            return this.defaultValue;\n        }\n\n        let result: string[] = [];\n\n        for (let value of sourceValue) {\n            if (typeof value === \"string\") {\n                result.push(value);\n            }\n            else {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    `Invalid array value \"${value}\" of type \"${typeof value}\" ignored for \"${this.name}\".`);\n            }\n        }\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string[] | undefined, context: BaseSerializationContext) {\n        context.serializeArray(target, this.name, value);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: string[],\n        readonly onGetInitialValue?: (sender: SerializableObject) => string[] | undefined) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class ValueSetProperty extends PropertyDefinition {\n    isValidValue(value: string, context: BaseSerializationContext): boolean {\n        for (let versionedValue of this.values) {\n            if (value.toLowerCase() === versionedValue.value.toLowerCase()) {\n                let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                return targetVersion.compareTo(context.targetVersion) <= 0;\n            }\n        }\n\n        return false;\n    }\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.defaultValue;\n        }\n\n        if (typeof sourceValue === \"string\") {\n            for (let versionedValue of this.values) {\n                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return versionedValue.value;\n                    }\n                    else {\n                        context.logParseEvent(\n                            sender,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                sourceValue,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()));\n\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.InvalidPropertyValue,\n            Strings.errors.invalidPropertyValue(sourceValue, this.name));\n\n        return this.defaultValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\n        let valueFound = false;\n\n        for (let versionedValue of this.values) {\n            if (versionedValue.value === value) {\n                let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                    valueFound = true;\n\n                    break;\n                }\n                else {\n                    context.logEvent(\n                        sender,\n                        Enums.ValidationPhase.ToJSON,\n                        Enums.ValidationEvent.InvalidPropertyValue,\n                        Strings.errors.propertyValueNotSupported(\n                            value,\n                            this.name,\n                            targetVersion.toString(),\n                            context.targetVersion.toString()));\n                }\n            }\n        }\n\n        if (valueFound) {\n            context.serializeValue(\n                target,\n                this.name,\n                value,\n                this.defaultValue);\n        }\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly values: IVersionedValue<string>[],\n        readonly defaultValue?: string,\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class EnumProperty<TEnum extends { [s: number]: string }> extends PropertyDefinition {\n    private _values: IVersionedValue<number>[] = [];\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        let sourceValue = source[this.name];\n\n        if (typeof sourceValue !== \"string\") {\n            return this.defaultValue;\n        }\n\n        let enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\n\n        if (enumValue !== undefined) {\n            for (let versionedValue of this.values) {\n                if (versionedValue.value === enumValue) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return enumValue;\n                    }\n                    else {\n                        context.logParseEvent(\n                            sender,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                sourceValue,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()));\n\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.InvalidPropertyValue,\n            Strings.errors.invalidPropertyValue(sourceValue, this.name));\n\n        return this.defaultValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        if (value !== undefined) {\n            let valueFound = false;\n\n            for (let versionedValue of this.values) {\n                if (versionedValue.value === value) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        valueFound = true;\n\n                        break;\n                    }\n                    else {\n                        context.logEvent(\n                            sender,\n                            Enums.ValidationPhase.ToJSON,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.invalidPropertyValue(value, this.name));\n                    }\n                }\n            }\n\n            if (valueFound) {\n                context.serializeEnum(\n                    this.enumType,\n                    target,\n                    this.name,\n                    value,\n                    this.defaultValue);\n            }\n        }\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly enumType: TEnum,\n        readonly defaultValue?: number,\n        values?: IVersionedValue<number>[],\n        readonly onGetInitialValue?: (sender: SerializableObject) => number) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n\n        if (!values) {\n            for (let key in enumType) {\n                let keyAsNumber = parseInt(key, 10);\n\n                if (keyAsNumber >= 0) {\n                    this._values.push( { value: keyAsNumber });\n                }\n            }\n        }\n        else {\n            this._values = values;\n        }\n    }\n\n    get values(): IVersionedValue<number>[] {\n        return this._values;\n    }\n}\n\nexport type SerializableObjectType = { new(): SerializableObject };\n\nexport class SerializableObjectProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject | undefined {\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\n        }\n\n        let result = new this.objectType();\n        result.parse(sourceValue, context);\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject | undefined, context: BaseSerializationContext) {\n        let serializedValue: object | undefined = undefined;\n        \n        if (value !== undefined && !value.hasAllDefaultValues()) {\n            serializedValue = value.toJSON(context);\n        }\n\n        if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\n            serializedValue = undefined;\n        }\n\n        context.serializeValue(target, this.name, serializedValue, this.defaultValue, true);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly objectType: SerializableObjectType,\n        readonly nullable: boolean = false,\n        defaultValue?: SerializableObject) {\n        super(\n            targetVersion,\n            name,\n            defaultValue,\n            (sender: SerializableObject) => { return this.nullable ? undefined : new this.objectType(); });\n    }\n}\n\nexport class SerializableObjectCollectionProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject[] | undefined {\n        let result: SerializableObject[] | undefined = [];\n\n        let sourceCollection = source[this.name];\n\n        if (Array.isArray(sourceCollection)) {\n            for (let sourceItem of sourceCollection) {\n                let item = new this.objectType();\n                item.parse(sourceItem, context);\n\n                result.push(item);\n\n                if (this.onItemAdded) {\n                    this.onItemAdded(sender, item);\n                }\n            }\n        }\n\n        return result.length > 0 ? result : (this.onGetInitialValue ? this.onGetInitialValue(sender) : undefined);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject[] | undefined, context: BaseSerializationContext) {\n        context.serializeArray(target, this.name, value);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly objectType: SerializableObjectType,\n        readonly onItemAdded?: (sender: SerializableObject, item: SerializableObject) => void) {\n        super(\n            targetVersion,\n            name,\n            undefined,\n            (sender: SerializableObject) => { return []; });\n    }\n}\n\nexport class CustomProperty<T> extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): T {\n        return this.onParse(sender, this, source, context);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: T, context: BaseSerializationContext) {\n        this.onToJSON(sender, this, target, value, context);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly onParse: (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => T,\n        readonly onToJSON: (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: T, context: BaseSerializationContext) => void,\n        readonly defaultValue?: T,\n        readonly onGetInitialValue?: (sender: SerializableObject) => T) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n\n        if (!this.onParse) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\n        }\n\n        if (!this.onToJSON) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\n        }\n    }\n}\n\nexport class SerializableObjectSchema {\n    private _properties: PropertyDefinition[] = [];\n\n    indexOf(property: PropertyDefinition): number {\n        for (let i = 0; i < this._properties.length; i++) {\n            if (this._properties[i] === property) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    add(...properties: PropertyDefinition[]) {\n        for (let i = 0; i < properties.length; i++) {\n            if (this.indexOf(properties[i]) === -1) {\n                this._properties.push(properties[i]);\n            }\n        }\n    }\n\n    remove(...properties: PropertyDefinition[]) {\n        for (let property of properties) {\n            while (true) {\n                let index = this.indexOf(property);\n\n                if (index >= 0) {\n                    this._properties.splice(index, 1);\n                }\n                else {\n                    break;\n                }\n            }\n        }\n    }\n\n    getItemAt(index: number): PropertyDefinition {\n        return this._properties[index];\n    }\n\n    getCount(): number {\n        return this._properties.length;\n    }\n}\n\n// This is a decorator function, used to map SerializableObject descendant class members to\n// schema properties\nexport function property(property: PropertyDefinition) {\n    return function(target: any, propertyKey: string) {\n        let descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\n\n        if (!descriptor.get && !descriptor.set) {\n            descriptor.get = function(this: SerializableObject) { return this.getValue(property); };\n            descriptor.set = function(this: SerializableObject, value: any) { this.setValue(property, value); };\n\n            Object.defineProperty(target, propertyKey, descriptor)\n        }\n    }\n}\n\nexport type PropertyBag = { [propertyName: string]: any };\n\nexport abstract class SerializableObject {\n    static onRegisterCustomProperties?: (sender: SerializableObject, schema: SerializableObjectSchema) => void;\n    static defaultMaxVersion: Version = Versions.v1_3;\n\n    private static readonly _schemaCache: { [typeName: string]: SerializableObjectSchema } = {};\n\n    private _propertyBag: PropertyBag = {};\n    private _rawProperties: PropertyBag = {};\n\n    protected abstract getSchemaKey(): string;\n\n    protected getDefaultSerializationContext(): BaseSerializationContext {\n        return new SimpleSerializationContext();\n    }\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        let ctor = <any>this.constructor;\n        let properties: PropertyDefinition[] = [];\n\n        for (let propertyName in ctor) {\n            try {\n                let propertyValue = ctor[propertyName];\n\n                if (propertyValue instanceof PropertyDefinition) {\n                    properties.push(propertyValue);\n                }\n            }\n            catch {\n                // If a property happens to have a getter function and\n                // it throws an exception, we need to catch it here\n            }\n        }\n\n        if (properties.length > 0) {\n            let sortedProperties = properties.sort((p1: PropertyDefinition, p2: PropertyDefinition) => {\n                if (p1.sequentialNumber > p2.sequentialNumber) {\n                    return 1;\n                }\n                else if (p1.sequentialNumber < p2.sequentialNumber) {\n                    return -1;\n                }\n\n                return 0;\n            });\n\n            schema.add(...sortedProperties);\n        }\n\n        if (SerializableObject.onRegisterCustomProperties) {\n            SerializableObject.onRegisterCustomProperties(this, schema);\n        }\n    }\n\n    protected getValue(property: PropertyDefinition): any {\n        return this._propertyBag.hasOwnProperty(property.getInternalName()) ? this._propertyBag[property.getInternalName()] : property.defaultValue;\n    }\n\n    protected setValue(property: PropertyDefinition, value: any) {\n        if (value === undefined || value === null) {\n            delete this._propertyBag[property.getInternalName()];\n        }\n        else {\n            this._propertyBag[property.getInternalName()] = value;\n        }\n    }\n\n    protected internalParse(source: PropertyBag, context: BaseSerializationContext) {\n        this._propertyBag = {};\n        this._rawProperties = GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};\n\n        if (source) {\n            let s = this.getSchema();\n\n            for (let i = 0; i < s.getCount(); i++) {\n                let property = s.getItemAt(i);\n\n                if (property.isSerializationEnabled) {\n                    let propertyValue = property.onGetInitialValue ? property.onGetInitialValue(this) : undefined;\n\n                    if (source.hasOwnProperty(property.name)) {\n                        if (property.targetVersion.compareTo(context.targetVersion) <= 0) {\n                            propertyValue = property.parse(this, source, context);\n                        }\n                        else {\n                            context.logParseEvent(\n                                this,\n                                Enums.ValidationEvent.UnsupportedProperty,\n                                Strings.errors.propertyNotSupported(\n                                    property.name,\n                                    property.targetVersion.toString(),\n                                    context.targetVersion.toString()));\n                        }\n                    }\n\n                    this.setValue(property, propertyValue);\n                }\n            }\n        }\n        else {\n            this.resetDefaultValues();\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\n        let s = this.getSchema();\n        let serializedProperties: string[] = [];\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            // Avoid serializing the same property multiple times. This is necessary\n            // because some property definitions map to the same underlying schema\n            // property\n            if (property.isSerializationEnabled && property.targetVersion.compareTo(context.targetVersion) <= 0 && serializedProperties.indexOf(property.name) === -1) {\n                property.toJSON(this, target, this.getValue(property), context);\n\n                serializedProperties.push(property.name);\n            }\n        }\n    }\n\n    protected shouldSerialize(context: BaseSerializationContext): boolean {\n        return true;\n    }\n\n    maxVersion: Version = SerializableObject.defaultMaxVersion;\n\n    constructor() {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            if (property.onGetInitialValue) {\n                this.setValue(property, property.onGetInitialValue(this));\n            }\n        }\n    }\n\n    parse(source: PropertyBag, context?: BaseSerializationContext) {\n        this.internalParse(source, context ? context : new SimpleSerializationContext());\n    }\n\n    toJSON(context?: BaseSerializationContext): PropertyBag | undefined {\n        let effectiveContext: BaseSerializationContext;\n        \n        if (context && context instanceof BaseSerializationContext) {\n            effectiveContext = context;\n        }\n        else {\n            effectiveContext = this.getDefaultSerializationContext();\n            effectiveContext.toJSONOriginalParam = context;\n        }\n\n        if (this.shouldSerialize(effectiveContext)) {\n            let result: PropertyBag;\n\n            if (GlobalSettings.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === \"object\") {\n                result = this._rawProperties;\n            }\n            else {\n                result = {};\n            }\n\n            this.internalToJSON(result, effectiveContext);\n\n            return result;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    hasDefaultValue(property: PropertyDefinition): boolean {\n        return this.getValue(property) === property.defaultValue;\n    }\n\n    hasAllDefaultValues(): boolean {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            if (!this.hasDefaultValue(property)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    resetDefaultValues() {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            this.setValue(property, property.defaultValue);\n        }\n    }\n\n    setCustomProperty(name: string, value: any) {\n        let shouldDeleteProperty = (typeof value === \"string\" && !value) || value === undefined || value === null;\n\n        if (shouldDeleteProperty) {\n            delete this._rawProperties[name];\n        }\n        else {\n            this._rawProperties[name] = value;\n        }\n    }\n\n    getCustomProperty(name: string): any {\n        return this._rawProperties[name];\n    }\n\n    getSchema(): SerializableObjectSchema {\n        let schema: SerializableObjectSchema = SerializableObject._schemaCache[this.getSchemaKey()];\n\n        if (!schema) {\n            schema = new SerializableObjectSchema();\n\n            this.populateSchema(schema);\n\n            SerializableObject._schemaCache[this.getSchemaKey()] = schema;\n        }\n\n        return schema;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport * as Shared from \"./shared\";\nimport { HostConfig } from \"./host-config\";\n\n// To work around TypeScript complaining about documentMode not being declared\n// on type Document\ndeclare global {\n    interface Document {\n        documentMode?: any;\n    }\n}\n\nexport function isInternetExplorer(): boolean {\n    // The documentMode property only exists in IE\n    return window.document.documentMode !== undefined;\n}\n\nexport function isMobileOS(): boolean {\n    let userAgent = window.navigator.userAgent;\n\n    return !!userAgent.match(/Android/i) || !!userAgent.match(/iPad/i) || !!userAgent.match(/iPhone/i);\n}\n\n/**\n * Generate a UUID prepended with \"__ac-\"\n */\nexport function generateUniqueId(): string {\n    return \"__ac-\" + Shared.UUID.generate();\n}\n\nexport function appendChild(node: Node, child: Node | undefined) {\n    if (child) {\n        node.appendChild(child);\n    }\n}\n\nexport function parseString(obj: any, defaultValue?: string): string | undefined {\n    return typeof obj === \"string\" ? obj : defaultValue;\n}\n\nexport function parseNumber(obj: any, defaultValue?: number): number | undefined {\n    return typeof obj === \"number\" ? obj : defaultValue;\n}\n\nexport function parseBool(value: any, defaultValue?: boolean): boolean | undefined {\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    else if (typeof value === \"string\") {\n        switch (value.toLowerCase()) {\n            case \"true\":\n                return true;\n            case \"false\":\n                return false;\n            default:\n                return defaultValue;\n        }\n    }\n\n    return defaultValue;\n}\n\nexport function getEnumValueByName(enumType: { [s: number]: string }, name: string) : number | undefined {\n    for (let key in enumType) {\n        let keyAsNumber = parseInt(key, 10);\n\n        if (keyAsNumber >= 0) {\n            let value = enumType[key];\n\n            if (value && typeof value === \"string\" && value.toLowerCase() === name.toLowerCase()) {\n                return keyAsNumber;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function parseEnum(enumType: { [s: number]: string }, name: string, defaultValue?: number): number | undefined {\n    if (!name) {\n        return defaultValue;\n    }\n\n    let enumValue = getEnumValueByName(enumType, name);\n\n    return enumValue !== undefined ? enumValue : defaultValue;\n}\n\nexport function renderSeparation(hostConfig: HostConfig, separationDefinition: Shared.ISeparationDefinition, orientation: Enums.Orientation): HTMLElement | undefined {\n    if (separationDefinition.spacing > 0 || (separationDefinition.lineThickness && separationDefinition.lineThickness > 0)) {\n        let separator = document.createElement(\"div\");\n        separator.className = hostConfig.makeCssClassName(\"ac-\" + (orientation == Enums.Orientation.Horizontal ? \"horizontal\" : \"vertical\") + \"-separator\");\n        separator.setAttribute(\"aria-hidden\", \"true\");\n\n        let color = separationDefinition.lineColor ? stringToCssColor(separationDefinition.lineColor) : \"\";\n\n        if (orientation == Enums.Orientation.Horizontal) {\n            if (separationDefinition.lineThickness) {\n                separator.style.paddingTop = (separationDefinition.spacing / 2) + \"px\";\n                separator.style.marginBottom = (separationDefinition.spacing / 2) + \"px\";\n                separator.style.borderBottom = separationDefinition.lineThickness + \"px solid \" + color;\n            }\n            else {\n                separator.style.height = separationDefinition.spacing + \"px\";\n            }\n        }\n        else {\n            if (separationDefinition.lineThickness) {\n                separator.style.paddingLeft = (separationDefinition.spacing / 2) + \"px\";\n                separator.style.marginRight = (separationDefinition.spacing / 2) + \"px\";\n                separator.style.borderRight = separationDefinition.lineThickness + \"px solid \" + color;\n            }\n            else {\n                separator.style.width = separationDefinition.spacing + \"px\";\n            }\n        }\n\n        separator.style.overflow = \"hidden\";\n        separator.style.flex = \"0 0 auto\";\n\n        return separator;\n    }\n    else {\n        return undefined;\n    }\n}\n\nexport function stringToCssColor(color: string | undefined): string | undefined {\n    if (color) {\n        let regEx = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?/gi;\n        let matches = regEx.exec(color);\n\n        if (matches && matches[4]) {\n            let a = parseInt(matches[1], 16) / 255;\n            let r = parseInt(matches[2], 16);\n            let g = parseInt(matches[3], 16);\n            let b = parseInt(matches[4], 16);\n\n            return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n        }\n    }\n\n    return color;\n}\n\nexport function truncate(element: HTMLElement,\n    maxHeight: number,\n    lineHeight?: number) {\n    let fits = () => {\n        // Allow a one pixel overflow to account for rounding differences\n        // between browsers\n        return maxHeight - element.scrollHeight >= -1.0;\n    };\n\n    if (fits()) return;\n\n    let fullText = element.innerHTML;\n    let truncateAt = (idx: any) => {\n        element.innerHTML = fullText.substring(0, idx) + '...';\n    }\n\n    let breakableIndices = findBreakableIndices(fullText);\n    let lo = 0;\n    let hi = breakableIndices.length;\n    let bestBreakIdx = 0;\n\n    // Do a binary search for the longest string that fits\n    while (lo < hi) {\n        let mid = Math.floor((lo + hi) / 2);\n        truncateAt(breakableIndices[mid]);\n\n        if (fits()) {\n            bestBreakIdx = breakableIndices[mid];\n            lo = mid + 1;\n        }\n        else {\n            hi = mid;\n        }\n    }\n\n    truncateAt(bestBreakIdx);\n\n    // If we have extra room, try to expand the string letter by letter\n    // (covers the case where we have to break in the middle of a long word)\n    if (lineHeight && maxHeight - element.scrollHeight >= lineHeight - 1.0) {\n        let idx = findNextCharacter(fullText, bestBreakIdx);\n\n        while (idx < fullText.length) {\n            truncateAt(idx);\n\n            if (fits()) {\n                bestBreakIdx = idx;\n                idx = findNextCharacter(fullText, idx);\n            }\n            else {\n                break;\n            }\n        }\n\n        truncateAt(bestBreakIdx);\n    }\n}\n\nfunction findBreakableIndices(html: string): number[] {\n    let results: number[] = [];\n    let idx = findNextCharacter(html, -1);\n\n    while (idx < html.length) {\n        if (html[idx] == ' ') {\n            results.push(idx);\n        }\n\n        idx = findNextCharacter(html, idx);\n    }\n\n    return results;\n}\n\nfunction findNextCharacter(html: string, currIdx: number): number {\n    currIdx += 1;\n\n    // If we found the start of an HTML tag, keep advancing until we get\n    // past it, so we don't end up truncating in the middle of the tag\n    while (currIdx < html.length && html[currIdx] == '<') {\n        while (currIdx < html.length && html[currIdx++] != '>');\n    }\n\n    return currIdx;\n}\n\nexport function getFitStatus(element: HTMLElement, containerEnd: number): Enums.ContainerFitStatus {\n    let start = element.offsetTop;\n    let end = start + element.clientHeight;\n\n    if (end <= containerEnd) {\n        return Enums.ContainerFitStatus.FullyInContainer;\n    }\n    else if (start < containerEnd) {\n        return Enums.ContainerFitStatus.Overflowing;\n    }\n    else {\n        return Enums.ContainerFitStatus.FullyOutOfContainer;\n    }\n}\n\nexport function clearElementChildren(element: HTMLElement) {\n    while (element.firstChild) {\n        element.removeChild(element.firstChild);\n    }\n}","export class Strings {\n    static readonly errors = {\n        unknownElementType: (typeName: string) => `Unknown element type \"${typeName}\". Fallback will be used if present.`,\n        unknownActionType: (typeName: string) => `Unknown action type \"${typeName}\". Fallback will be used if present.`,\n        elementTypeNotAllowed: (typeName: string) => `Element type \"${typeName}\" is not allowed in this context.`,\n        actionTypeNotAllowed: (typeName: string) => `Action type \"${typeName}\" is not allowed in this context.`,\n        invalidPropertyValue: (value: any, propertyName: string) => `Invalid value \"${value}\" for property \"${propertyName}\".`,\n        showCardMustHaveCard: () => `\"An Action.ShowCard must have its \"card\" property set to a valid AdaptiveCard object.`,\n        invalidColumnWidth: (invalidWidth: string) => `Invalid column width \"${invalidWidth}\" - defaulting to \"auto\".`,\n        invalidCardVersion: (defaultingToVersion: string) => `Invalid card version. Defaulting to \"${defaultingToVersion}\".`,\n        invalidVersionString: (versionString: string) => `Invalid version string \"${versionString}\".`,\n        propertyValueNotSupported: (value: any, propertyName: string, supportedInVersion: string, versionUsed: string) => `Value \"${value}\" for property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\n        propertyNotSupported: (propertyName: string, supportedInVersion: string, versionUsed: string) => `Property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\n        indexOutOfRange: (index: number) => `Index out of range (${index}).`,\n        elementCannotBeUsedAsInline: () => \"RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.\",\n        inlineAlreadyParented: () => \"RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.\",\n        interactivityNotAllowed: () => \"Interactivity is not allowed.\",\n        inputsMustHaveUniqueId: () => \"All inputs must have a unique Id.\",\n        choiceSetMustHaveAtLeastOneChoice: () => \"An Input.ChoiceSet must have at least one choice defined.\",\n        choiceSetChoicesMustHaveTitleAndValue: () => \"All choices in an Input.ChoiceSet must have their title and value properties set.\",\n        propertyMustBeSet: (propertyName: string) => `Property \"${propertyName}\" must be set.`,\n        actionHttpHeadersMustHaveNameAndValue: () => \"All headers of an Action.Http must have their name and value properties set.\",\n        tooManyActions: (maximumActions: number) => `Maximum number of actions exceeded (${maximumActions}).`,\n        columnAlreadyBelongsToAnotherSet: () => \"This column already belongs to another ColumnSet.\",\n        invalidCardType: () => `Invalid or missing card type. Make sure the card's type property is set to \"AdaptiveCard\".`,\n        unsupportedCardVersion: (version: string, maxSupportedVersion: string) => `The specified card version (${version}) is not supported. The maximum supported card version is ${maxSupportedVersion}.`,\n        duplicateId: (id: string) => `Duplicate Id \"${id}\".`,\n        markdownProcessingNotEnabled: () => \"Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown\",\n        processMarkdownEventRemoved: () => \"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\",\n        elementAlreadyParented: () => \"The element already belongs to another container.\",\n        actionAlreadyParented: () => \"The action already belongs to another element.\",\n        elementTypeNotStandalone: (typeName: string) => `Elements of type ${typeName} cannot be used as standalone elements.`\n    };\n    static readonly magicCodeInputCard = {\n        tryAgain: () => \"That didn't work... let's try again.\",\n        pleaseLogin: () => \"Please login in the popup. You will obtain a magic code. Paste that code below and select \\\"Submit\\\"\",\n        enterMagicCode: () => \"Enter magic code\",\n        pleaseEnterMagicCodeYouReceived: () => \"Please enter the magic code you received.\",\n        submit: () => \"Submit\",\n        cancel: () => \"Cancel\",\n        somethingWentWrong: () => \"Something went wrong. This action can't be handled.\",\n        authenticationFailed: () => \"Authentication failed.\"\n    };\n    static readonly runtime = {\n        automaticRefreshPaused: () => \"Automatic refresh paused.\",\n        clckToRestartAutomaticRefresh: () => \"Click to restart.\",\n        refreshThisCard: () => \"Refresh this card\"\n    };\n    static readonly hints = {\n        dontUseWeightedAndStrecthedColumnsInSameSet: () => \"It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space.\"\n    };\n    static readonly defaults = {\n        inlineActionTitle: () => \"Inline Action\",\n        mediaPlayerAriaLabel: () => \"Media content\",\n        mediaPlayerPlayMedia: () => \"Play media\"\n    };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { SerializableObject, Version, Versions } from \"./serialization\";\n\nexport interface ITypeRegistration<T extends SerializableObject> {\n    typeName: string,\n    objectType: { new(): T },\n    schemaVersion: Version\n}\n\nexport class CardObjectRegistry<T extends SerializableObject> {\n    private _items: { [typeName: string]: ITypeRegistration<T> } = {};\n\n    findByName(typeName: string): ITypeRegistration<T> | undefined {\n        return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;\n    }\n\n    clear() {\n        this._items = {};\n    }\n\n    register(typeName: string, objectType: { new(): T }, schemaVersion: Version = Versions.v1_0) {\n        let registrationInfo = this.findByName(typeName);\n\n        if (registrationInfo !== undefined) {\n            registrationInfo.objectType = objectType;\n        }\n        else {\n            registrationInfo = {\n                typeName: typeName,\n                objectType: objectType,\n                schemaVersion: schemaVersion\n            }\n        }\n\n        this._items[typeName] = registrationInfo;\n    }\n\n    unregister(typeName: string) {\n        delete this._items[typeName];\n    }\n\n    createInstance(typeName: string, targetVersion: Version): T | undefined {\n        let registrationInfo = this.findByName(typeName);\n\n        return (registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0) ? new registrationInfo.objectType() : undefined;\n    }\n\n    getItemCount(): number {\n        return Object.keys(this._items).length;\n    }\n\n    getItemAt(index: number): ITypeRegistration<T> {\n        return Object.keys(this._items).map(e => this._items[e])[index];\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport * as Utils from \"./utils\";\nimport { Strings} from \"./strings\";\nimport { Dictionary, GlobalSettings } from \"./shared\";\nimport { HostConfig } from \"./host-config\";\nimport { HostCapabilities } from \"./host-capabilities\";\nimport { Versions, property, SerializableObject, StringProperty, SerializableObjectProperty, IValidationEvent, PropertyDefinition } from \"./serialization\";\n\nexport class ValidationResults {\n    readonly allIds: Dictionary<number> = {};\n    readonly validationEvents: IValidationEvent[] = [];\n\n    addFailure(cardObject: CardObject, event: Enums.ValidationEvent, message: string) {\n        this.validationEvents.push(\n            {\n                phase: Enums.ValidationPhase.Validation,\n                source: cardObject,\n                event: event,\n                message: message\n            }\n        );\n    }\n}\n\nexport type CardObjectType = { new(): CardObject };\n\nexport abstract class CardObject extends SerializableObject {\n    //#region Schema\n\n    static readonly typeNameProperty = new StringProperty(\n        Versions.v1_0,\n        \"type\",\n        undefined,\n        undefined,\n        undefined,\n        (sender: object) => {\n            return (<CardObject>sender).getJsonTypeName()\n        });\n    static readonly idProperty = new StringProperty(Versions.v1_0, \"id\");\n    static readonly requiresProperty = new SerializableObjectProperty(\n        Versions.v1_2,\n        \"requires\",\n        HostCapabilities,\n        false,\n        new HostCapabilities());\n\n    protected getSchemaKey(): string {\n        return this.getJsonTypeName();\n    }\n\n    @property(CardObject.idProperty)\n    id?: string;\n\n    @property(CardObject.requiresProperty)\n    get requires(): HostCapabilities {\n        return this.getValue(CardObject.requiresProperty);\n    }\n\n    //#endregion\n\n    private _shouldFallback: boolean = false;\n\n    protected _parent?: CardObject;\n    protected _renderedElement?: HTMLElement;\n\n    /**\n     * Checks if this CardObject contains the given DOM Node.\n     * @param node The DOM Node to look for.\n     * @returns `true` if the DOM Node was found, `false` otherwise.\n     */\n    protected contains(node: Node): boolean {\n        if (this._renderedElement) {\n            return this._renderedElement.contains(node);\n        }\n\n        return false;\n    }\n\n    onPreProcessPropertyValue?: (sender: CardObject, property: PropertyDefinition, value: any) => any;\n\n    abstract getJsonTypeName(): string;\n\n    abstract get hostConfig(): HostConfig;\n\n    preProcessPropertyValue(property: PropertyDefinition, propertyValue?: any): any {\n        let value = propertyValue === undefined ? this.getValue(property) : propertyValue;\n\n        if (GlobalSettings.allowPreProcessingPropertyValues) {\n            let currentObject: CardObject | undefined = this;\n\n            while (currentObject && !currentObject.onPreProcessPropertyValue) {\n                currentObject = currentObject.parent;\n            }\n\n            if (currentObject && currentObject.onPreProcessPropertyValue) {\n                return currentObject.onPreProcessPropertyValue(this, property, value);\n            }\n        }\n\n        return value;\n    }\n\n    setParent(value: CardObject | undefined) {\n        this._parent = value;\n    }\n\n    setShouldFallback(value: boolean) {\n        this._shouldFallback = value;\n    }\n\n    shouldFallback(): boolean {\n        return this._shouldFallback || !this.requires.areAllMet(this.hostConfig.hostCapabilities);\n    }\n\n    getRootObject(): CardObject {\n        let rootObject: CardObject = this;\n\n        while (rootObject.parent) {\n            rootObject = rootObject.parent;\n        }\n\n        return rootObject;\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        if (this.id) {\n            if (context.allIds.hasOwnProperty(this.id)) {\n                if (context.allIds[this.id] == 1) {\n                    context.addFailure(\n                        this,\n                        Enums.ValidationEvent.DuplicateId,\n                        Strings.errors.duplicateId(this.id));\n                }\n\n                context.allIds[this.id] += 1;\n            }\n            else {\n                context.allIds[this.id] = 1;\n            }\n        }\n    }\n\n    validateProperties(): ValidationResults {\n        let result = new ValidationResults();\n\n        this.internalValidateProperties(result);\n\n        return result;\n    }\n\n    /**\n     * Recursively searches this CardObject and any children to find the\n     * innermost CardObject that owns the given DOM Node.\n     *\n     * @param node The DOM Node to look for.\n     *\n     * @returns The owner of the given DOM Node, or `undefined` if no owner was found.\n     */\n    findDOMNodeOwner(node: Node): CardObject | undefined {\n        // default implementation for CardObjects with no associated children\n        return this.contains(node) ? this : undefined;\n    }\n\n    get parent(): CardObject | undefined {\n        return this._parent;\n    }\n\n    get renderedElement(): HTMLElement | undefined {\n        return this._renderedElement;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { TargetVersion, Version, SerializableObject, BaseSerializationContext, PropertyBag } from \"./serialization\";\n\nexport class HostCapabilities extends SerializableObject {\n    private _capabilities: { [key: string]: TargetVersion } = {};\n\n    protected getSchemaKey(): string {\n        return \"HostCapabilities\";\n    }\n\n    protected internalParse(source: any, context: BaseSerializationContext) {\n        super.internalParse(source, context);\n\n        if (source) {\n            for (let name in source) {\n                let jsonVersion = source[name];\n\n                if (typeof jsonVersion === \"string\") {\n                    if (jsonVersion == \"*\") {\n                        this.addCapability(name, \"*\");\n                    }\n                    else {\n                        let version = Version.parse(jsonVersion, context);\n\n                        if (version && version.isValid) {\n                            this.addCapability(name, version);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\n        super.internalToJSON(target, context);\n\n        for (let key in this._capabilities) {\n            target[key] = this._capabilities[key];\n        }\n    }\n\n    addCapability(name: string, version: TargetVersion) {\n        this._capabilities[name] = version;\n    }\n\n    removeCapability(name: string) {\n        delete this._capabilities[name];\n    }\n\n    clear() {\n        this._capabilities = {};\n    }\n\n    hasCapability(name: string, version: TargetVersion): boolean {\n        if (this._capabilities.hasOwnProperty(name)) {\n            if (version == \"*\" || this._capabilities[name] == \"*\") {\n                return true;\n            }\n\n            return version.compareTo(<Version>this._capabilities[name]) <= 0;\n        }\n\n        return false;\n    }\n\n    areAllMet(hostCapabilities: HostCapabilities): boolean {\n        for (let capabilityName in this._capabilities) {\n            if (!hostCapabilities.hasCapability(capabilityName, this._capabilities[capabilityName])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport { PaddingDefinition, GlobalSettings, SizeAndUnit,SpacingDefinition,\n    Dictionary, StringWithSubstitutions, ContentTypes, IInput, IResourceInformation } from \"./shared\";\nimport * as Utils from \"./utils\";\nimport { HostConfig, defaultHostConfig, BaseTextDefinition, FontTypeDefinition, ColorSetDefinition, TextColorDefinition, ContainerStyleDefinition } from \"./host-config\";\nimport * as TextFormatters from \"./text-formatters\";\nimport { CardObject, ValidationResults } from \"./card-object\";\nimport { Versions, Version, property, BaseSerializationContext, SerializableObject, SerializableObjectSchema, StringProperty,\n    BoolProperty, ValueSetProperty, EnumProperty, SerializableObjectCollectionProperty, SerializableObjectProperty, PixelSizeProperty,\n    NumProperty, PropertyBag, CustomProperty, PropertyDefinition, StringArrayProperty } from \"./serialization\";\nimport { CardObjectRegistry } from \"./registry\";\nimport { Strings } from \"./strings\";\nimport { AdaptiveApplet } from \"./adaptive-applet\";\n\nexport type CardElementHeight = \"auto\" | \"stretch\";\n\nexport abstract class CardElement extends CardObject {\n    //#region Schema\n\n    static readonly langProperty = new StringProperty(Versions.v1_1, \"lang\", true, /^[a-z]{2,3}$/ig);\n    static readonly isVisibleProperty = new BoolProperty(Versions.v1_2, \"isVisible\", true);\n    static readonly separatorProperty = new BoolProperty(Versions.v1_0, \"separator\", false);\n    static readonly heightProperty = new ValueSetProperty(\n        Versions.v1_1,\n        \"height\",\n        [\n            { value: \"auto\" },\n            { value: \"stretch\" }\n        ],\n        \"auto\");\n    static readonly horizontalAlignmentProperty = new EnumProperty(\n        Versions.v1_0,\n        \"horizontalAlignment\",\n        Enums.HorizontalAlignment,\n        Enums.HorizontalAlignment.Left);\n    static readonly spacingProperty = new EnumProperty(\n        Versions.v1_0,\n        \"spacing\",\n        Enums.Spacing,\n        Enums.Spacing.Default);\n\n    @property(CardElement.horizontalAlignmentProperty)\n    horizontalAlignment: Enums.HorizontalAlignment;\n\n    @property(CardElement.spacingProperty)\n    spacing: Enums.Spacing;\n\n    @property(CardElement.separatorProperty)\n    separator: boolean;\n\n    @property(CardElement.heightProperty)\n    height: CardElementHeight;\n\n    @property(CardElement.langProperty)\n    get lang(): string | undefined {\n        let lang = this.getValue(CardElement.langProperty);\n\n        if (lang) {\n            return lang;\n        }\n        else {\n            if (this.parent) {\n                return this.parent.lang;\n            }\n            else {\n                return undefined;\n            }\n        }\n    }\n\n    set lang(value: string | undefined) {\n        this.setValue(CardElement.langProperty, value);\n    }\n\n    @property(CardElement.isVisibleProperty)\n    get isVisible(): boolean {\n        return this.getValue(CardElement.isVisibleProperty);\n    }\n\n    set isVisible(value: boolean) {\n        // If the element is going to be hidden, reset any changes that were due\n        // to overflow truncation (this ensures that if the element is later\n        // un-hidden it has the right content)\n        if (GlobalSettings.useAdvancedCardBottomTruncation && !value) {\n            this.undoOverflowTruncation();\n        }\n\n        if (this.isVisible !== value) {\n            this.setValue(CardElement.isVisibleProperty, value);\n\n            this.updateRenderedElementVisibility();\n\n            if (this._renderedElement) {\n                raiseElementVisibilityChangedEvent(this);\n            }\n        }\n\n        if (this._renderedElement) {\n            this._renderedElement.setAttribute(\"aria-expanded\", value.toString());\n        }\n    }\n\n    //#endregion\n\n    private _hostConfig?: HostConfig;\n    private _separatorElement?: HTMLElement;\n    private _truncatedDueToOverflow: boolean = false;\n    private _defaultRenderedElementDisplayMode?: string;\n    private _padding?: PaddingDefinition;\n\n    private internalRenderSeparator(): HTMLElement | undefined {\n        let renderedSeparator = Utils.renderSeparation(\n            this.hostConfig,\n            {\n                spacing: this.hostConfig.getEffectiveSpacing(this.spacing),\n                lineThickness: this.separator ? this.hostConfig.separator.lineThickness : undefined,\n                lineColor: this.separator ? this.hostConfig.separator.lineColor : undefined\n            },\n            this.separatorOrientation);\n\n            if (GlobalSettings.alwaysBleedSeparators && renderedSeparator && this.separatorOrientation == Enums.Orientation.Horizontal) {\n                // Adjust separator's margins if the option to always bleed separators is turned on\n                let parentContainer = this.getParentContainer();\n\n                if (parentContainer && parentContainer.getEffectivePadding()) {\n                    let parentPhysicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(parentContainer.getEffectivePadding());\n\n                    renderedSeparator.style.marginLeft = \"-\" + parentPhysicalPadding.left + \"px\";\n                    renderedSeparator.style.marginRight = \"-\" + parentPhysicalPadding.right + \"px\";\n                }\n            }\n\n            return renderedSeparator;\n    }\n\n    private updateRenderedElementVisibility() {\n        let displayMode = this.isDesignMode() || this.isVisible ? this._defaultRenderedElementDisplayMode : \"none\";\n\n        if (this._renderedElement) {\n            if (displayMode) {\n                this._renderedElement.style.display = displayMode;\n            }\n            else {\n                this._renderedElement.style.removeProperty(\"display\");\n            }\n        }\n\n        if (this._separatorElement) {\n            if (this.parent && this.parent.isFirstElement(this)) {\n                this._separatorElement.style.display = \"none\";\n            }\n            else {\n                if (displayMode) {\n                    this._separatorElement.style.display = displayMode;\n                }\n                else {\n                    this._separatorElement.style.removeProperty(\"display\");\n                }\n            }\n        }\n    }\n\n    private hideElementDueToOverflow() {\n        if (this._renderedElement && this.isVisible) {\n            this._renderedElement.style.visibility = \"hidden\";\n\n            this.isVisible = false;\n            raiseElementVisibilityChangedEvent(this, false);\n        }\n    }\n\n    private showElementHiddenDueToOverflow() {\n        if (this._renderedElement && !this.isVisible) {\n            this._renderedElement.style.removeProperty(\"visibility\");\n\n            this.isVisible = true;\n            raiseElementVisibilityChangedEvent(this, false);\n        }\n    }\n\n    // Marked private to emulate internal access\n    private handleOverflow(maxHeight: number) {\n        if (this.isVisible || this.isHiddenDueToOverflow()) {\n            let handled = this.truncateOverflow(maxHeight);\n\n            // Even if we were unable to truncate the element to fit this time,\n            // it still could have been previously truncated\n            this._truncatedDueToOverflow = handled || this._truncatedDueToOverflow;\n\n            if (!handled) {\n                this.hideElementDueToOverflow();\n            }\n            else if (handled && !this.isVisible) {\n                this.showElementHiddenDueToOverflow();\n            }\n        }\n    }\n\n    // Marked private to emulate internal access\n    private resetOverflow(): boolean {\n        let sizeChanged = false;\n\n        if (this._truncatedDueToOverflow) {\n            this.undoOverflowTruncation();\n            this._truncatedDueToOverflow = false;\n            sizeChanged = true;\n        }\n\n        if (this.isHiddenDueToOverflow()) {\n            this.showElementHiddenDueToOverflow();\n        }\n\n        return sizeChanged;\n    }\n\n    protected getDefaultSerializationContext(): BaseSerializationContext {\n        return new SerializationContext();\n    }\n\n    protected createPlaceholderElement(): HTMLElement {\n        let styleDefinition = this.getEffectiveStyleDefinition();\n        let foregroundCssColor = Utils.stringToCssColor(styleDefinition.foregroundColors.default.subtle);\n\n        let element = document.createElement(\"div\");\n        element.style.border = \"1px dashed \" + foregroundCssColor;\n        element.style.padding = \"4px\";\n        element.style.minHeight = \"32px\";\n        element.style.fontSize = \"10px\";\n        element.style.color = <string>foregroundCssColor;\n        element.innerText = \"Empty \" + this.getJsonTypeName();\n\n        return element;\n    }\n\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\n        if (this.height === \"auto\") {\n            renderedElement.style.flex = \"0 0 auto\";\n        }\n        else {\n            renderedElement.style.flex = \"1 1 auto\";\n        }\n    }\n\n    protected isDisplayed(): boolean {\n        return this._renderedElement !== undefined && this.isVisible && this._renderedElement.offsetHeight > 0;\n    }\n\n    protected abstract internalRender(): HTMLElement | undefined;\n\n    protected overrideInternalRender(): HTMLElement | undefined {\n        return this.internalRender();\n    }\n\n    protected applyPadding() {\n        if (this.separatorElement && this.separatorOrientation === Enums.Orientation.Horizontal) {\n            if (GlobalSettings.alwaysBleedSeparators && !this.isBleeding()) {\n                let padding = new PaddingDefinition();\n\n                this.getImmediateSurroundingPadding(padding);\n\n                let physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n\n                this.separatorElement.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\n                this.separatorElement.style.marginRight = \"-\" + physicalPadding.right + \"px\";\n            }\n            else {\n                this.separatorElement.style.marginRight = \"0\";\n                this.separatorElement.style.marginLeft = \"0\";\n            }\n        }\n    }\n\n    /*\n     * Called when this element overflows the bottom of the card.\n     * maxHeight will be the amount of space still available on the card (0 if\n     * the element is fully off the card).\n     */\n    protected truncateOverflow(maxHeight: number): boolean {\n        // Child implementations should return true if the element handled\n        // the truncation request such that its content fits within maxHeight,\n        // false if the element should fall back to being hidden\n        return false;\n    }\n\n    /*\n     * This should reverse any changes performed in truncateOverflow().\n     */\n    protected undoOverflowTruncation() { }\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return new PaddingDefinition();\n    }\n\n    protected getHasBackground(): boolean {\n        return false;\n    }\n\n    protected getPadding(): PaddingDefinition | undefined {\n        return this._padding;\n    }\n\n    protected setPadding(value: PaddingDefinition | undefined) {\n        this._padding = value;\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return context.elementRegistry.findByName(this.getJsonTypeName()) !== undefined;\n    }\n\n    protected get useDefaultSizing(): boolean {\n        return true;\n    }\n\n    protected get allowCustomPadding(): boolean {\n        return true;\n    }\n\n    protected get separatorOrientation(): Enums.Orientation {\n        return Enums.Orientation.Horizontal;\n    }\n\n    protected get defaultStyle(): string {\n        return Enums.ContainerStyle.Default;\n    }\n\n    customCssSelector?: string;\n\n    parse(source: any, context?: SerializationContext) {\n        super.parse(source, context ? context : new SerializationContext());\n    }\n\n    asString(): string | undefined {\n        return \"\";\n    }\n\n    isBleeding(): boolean {\n        return false;\n    }\n\n    getEffectiveStyle(): string {\n        if (this.parent) {\n            return this.parent.getEffectiveStyle();\n        }\n\n        return this.defaultStyle;\n    }\n\n    getEffectiveStyleDefinition(): ContainerStyleDefinition {\n        return this.hostConfig.containerStyles.getStyleByName(this.getEffectiveStyle());\n    }\n\n    getForbiddenActionTypes(): ActionType[] {\n        return [];\n    }\n\n    getImmediateSurroundingPadding(\n        result: PaddingDefinition,\n        processTop: boolean = true,\n        processRight: boolean = true,\n        processBottom: boolean = true,\n        processLeft: boolean = true) {\n        if (this.parent) {\n            let doProcessTop = processTop && this.parent.isTopElement(this);\n            let doProcessRight = processRight && this.parent.isRightMostElement(this);\n            let doProcessBottom = processBottom && this.parent.isBottomElement(this);\n            let doProcessLeft = processLeft && this.parent.isLeftMostElement(this);\n\n            let effectivePadding = this.parent.getEffectivePadding();\n\n            if (effectivePadding) {\n                if (doProcessTop && effectivePadding.top != Enums.Spacing.None) {\n                    result.top = effectivePadding.top;\n\n                    doProcessTop = false;\n                }\n\n                if (doProcessRight && effectivePadding.right != Enums.Spacing.None) {\n                    result.right = effectivePadding.right;\n\n                    doProcessRight = false;\n                }\n\n                if (doProcessBottom && effectivePadding.bottom != Enums.Spacing.None) {\n                    result.bottom = effectivePadding.bottom;\n\n                    doProcessBottom = false;\n                }\n\n                if (doProcessLeft && effectivePadding.left != Enums.Spacing.None) {\n                    result.left = effectivePadding.left;\n\n                    doProcessLeft = false;\n                }\n            }\n\n            if (doProcessTop || doProcessRight || doProcessBottom || doProcessLeft) {\n                this.parent.getImmediateSurroundingPadding(\n                    result,\n                    doProcessTop,\n                    doProcessRight,\n                    doProcessBottom,\n                    doProcessLeft);\n            }\n        }\n    }\n\n    getActionCount(): number {\n        return 0;\n    }\n\n    getActionAt(index: number): Action | undefined {\n        throw new Error(Strings.errors.indexOutOfRange(index));\n    }\n\n    remove(): boolean {\n        if (this.parent && this.parent instanceof CardElementContainer) {\n            return this.parent.removeItem(this);\n        }\n\n        return false;\n    }\n\n    render(): HTMLElement | undefined {\n        this._renderedElement = this.overrideInternalRender();\n        this._separatorElement = this.internalRenderSeparator();\n\n        if (this._renderedElement) {\n            if (this.id) {\n                this._renderedElement.id = this.id;\n            }\n\n            if (this.customCssSelector) {\n                this._renderedElement.classList.add(this.customCssSelector);\n            }\n\n            this._renderedElement.style.boxSizing = \"border-box\";\n            this._defaultRenderedElementDisplayMode = this._renderedElement.style.display ? this._renderedElement.style.display : undefined;\n\n            this.adjustRenderedElementSize(this._renderedElement);\n            this.updateLayout(false);\n        }\n        else if (this.isDesignMode()) {\n            this._renderedElement = this.createPlaceholderElement();\n        }\n\n        return this._renderedElement;\n    }\n\n    updateLayout(processChildren: boolean = true) {\n        this.updateRenderedElementVisibility();\n        this.applyPadding();\n    }\n\n    indexOf(cardElement: CardElement): number {\n        return -1;\n    }\n\n    isDesignMode(): boolean {\n        let rootElement = this.getRootElement();\n\n        return rootElement instanceof AdaptiveCard && rootElement.designMode;\n    }\n\n    isFirstElement(element: CardElement): boolean {\n        return true;\n    }\n\n    isLastElement(element: CardElement): boolean {\n        return true;\n    }\n\n    isAtTheVeryLeft(): boolean {\n        return this.parent ? this.parent.isLeftMostElement(this) && this.parent.isAtTheVeryLeft() : true;\n    }\n\n    isAtTheVeryRight(): boolean {\n        return this.parent ? this.parent.isRightMostElement(this) && this.parent.isAtTheVeryRight() : true;\n    }\n\n    isAtTheVeryTop(): boolean {\n        return this.parent ? this.parent.isFirstElement(this) && this.parent.isAtTheVeryTop() : true;\n    }\n\n    isAtTheVeryBottom(): boolean {\n        return this.parent ? this.parent.isLastElement(this) && this.parent.isAtTheVeryBottom() : true;\n    }\n\n    isBleedingAtTop(): boolean {\n        return false;\n    }\n\n    isBleedingAtBottom(): boolean {\n        return false;\n    }\n\n    isLeftMostElement(element: CardElement): boolean {\n        return true;\n    }\n\n    isRightMostElement(element: CardElement): boolean {\n        return true;\n    }\n\n    isTopElement(element: CardElement): boolean {\n        return this.isFirstElement(element);\n    }\n\n    isBottomElement(element: CardElement): boolean {\n        return this.isLastElement(element);\n    }\n\n    isHiddenDueToOverflow(): boolean {\n        return this._renderedElement !== undefined && this._renderedElement.style.visibility == 'hidden';\n    }\n\n    getRootElement(): CardElement {\n        return this.getRootObject() as CardElement;\n    }\n\n    getParentContainer(): Container | undefined {\n        let currentElement = this.parent;\n\n        while (currentElement) {\n            if (currentElement instanceof Container) {\n                return <Container>currentElement;\n            }\n\n            currentElement = currentElement.parent;\n        }\n\n        return undefined;\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return [];\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return [];\n    }\n\n    getElementById(id: string): CardElement | undefined {\n        return this.id === id ? this : undefined;\n    }\n\n    getActionById(id: string): Action | undefined {\n        return undefined;\n    }\n\n    getEffectivePadding(): PaddingDefinition {\n        let padding = this.getPadding();\n\n        return (padding && this.allowCustomPadding) ? padding : this.getDefaultPadding();\n    }\n\n    get hostConfig(): HostConfig {\n        if (this._hostConfig) {\n            return this._hostConfig;\n        }\n        else {\n            if (this.parent) {\n                return this.parent.hostConfig;\n            }\n            else {\n                return defaultHostConfig;\n            }\n        }\n    }\n\n    set hostConfig(value: HostConfig) {\n        this._hostConfig = value;\n    }\n\n    get index(): number {\n        if (this.parent) {\n            return this.parent.indexOf(this);\n        }\n        else {\n            return 0;\n        }\n    }\n\n    get isInteractive(): boolean {\n        return false;\n    }\n\n    get isStandalone(): boolean {\n        return true;\n    }\n\n    get isInline(): boolean {\n        return false;\n    }\n\n    get hasVisibleSeparator(): boolean {\n        if (this.parent && this.separatorElement) {\n            return !this.parent.isFirstElement(this) && (this.isVisible || this.isDesignMode());\n        }\n        else {\n            return false;\n        }\n    }\n\n    get separatorElement(): HTMLElement | undefined {\n        return this._separatorElement;\n    }\n\n    get parent(): CardElement | undefined {\n        return <CardElement>this._parent;\n    }\n}\n\nexport class ActionProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: SerializationContext): Action | undefined {\n        let parent = <CardElement>sender;\n\n        return context.parseAction(\n            parent,\n            source[this.name],\n            this.forbiddenActionTypes,\n            parent.isDesignMode());\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: Action | undefined, context: SerializationContext) {\n        context.serializeValue(target, this.name, value ? value.toJSON(context) : undefined, undefined, true);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly forbiddenActionTypes: string[] = []) {\n        super(targetVersion, name, undefined);\n    }\n}\n\nexport abstract class BaseTextBlock extends CardElement {\n    //#region Schema\n\n    static readonly textProperty = new StringProperty(\n        Versions.v1_0,\n        \"text\",\n        true);\n    static readonly sizeProperty = new EnumProperty(\n        Versions.v1_0,\n        \"size\",\n        Enums.TextSize,\n        Enums.TextSize.Default);\n    static readonly weightProperty = new EnumProperty(\n        Versions.v1_0,\n        \"weight\",\n        Enums.TextWeight,\n        Enums.TextWeight.Default);\n    static readonly colorProperty = new EnumProperty(\n        Versions.v1_0,\n        \"color\",\n        Enums.TextColor,\n        Enums.TextColor.Default);\n    static readonly isSubtleProperty = new BoolProperty(\n        Versions.v1_0,\n        \"isSubtle\",\n        false);\n    static readonly fontTypeProperty = new EnumProperty(\n        Versions.v1_2,\n        \"fontType\",\n        Enums.FontType);\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [ \"Action.ShowCard\" ]);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        // selectAction is declared on BaseTextBlock but is only exposed on TextRun,\n        // so the property is removed from the BaseTextBlock schema.\n        schema.remove(BaseTextBlock.selectActionProperty);\n    }\n\n    @property(BaseTextBlock.sizeProperty)\n    size: Enums.TextSize = Enums.TextSize.Default;\n\n    @property(BaseTextBlock.weightProperty)\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\n\n    @property(BaseTextBlock.colorProperty)\n    color: Enums.TextColor = Enums.TextColor.Default;\n\n    @property(BaseTextBlock.fontTypeProperty)\n    fontType?: Enums.FontType;\n\n    @property(BaseTextBlock.isSubtleProperty)\n    isSubtle: boolean = false;\n\n    @property(BaseTextBlock.textProperty)\n    get text(): string | undefined {\n        return this.getValue(BaseTextBlock.textProperty);\n    }\n\n    set text(value: string | undefined) {\n        this.setText(value);\n    }\n\n    @property(BaseTextBlock.selectActionProperty)\n    selectAction?: Action;\n\n    //#endregion\n\n    protected getFontSize(fontType: FontTypeDefinition): number {\n        switch (this.size) {\n            case Enums.TextSize.Small:\n                return fontType.fontSizes.small;\n            case Enums.TextSize.Medium:\n                return fontType.fontSizes.medium;\n            case Enums.TextSize.Large:\n                return fontType.fontSizes.large;\n            case Enums.TextSize.ExtraLarge:\n                return fontType.fontSizes.extraLarge;\n            default:\n                return fontType.fontSizes.default;\n        }\n    }\n\n    protected getColorDefinition(colorSet: ColorSetDefinition, color: Enums.TextColor): TextColorDefinition {\n        switch (color) {\n            case Enums.TextColor.Accent:\n                return colorSet.accent;\n            case Enums.TextColor.Dark:\n                return colorSet.dark;\n            case Enums.TextColor.Light:\n                return colorSet.light;\n            case Enums.TextColor.Good:\n                return colorSet.good;\n            case Enums.TextColor.Warning:\n                return colorSet.warning;\n            case Enums.TextColor.Attention:\n                return colorSet.attention;\n            default:\n                return colorSet.default;\n        }\n    }\n\n    protected setText(value: string | undefined) {\n        this.setValue(BaseTextBlock.textProperty, value);\n    }\n\n    ariaHidden: boolean = false;\n\n    constructor(text?: string) {\n        super();\n\n        if (text) {\n            this.text = text;\n        }\n    }\n\n    init(textDefinition: BaseTextDefinition) {\n        this.size = textDefinition.size;\n        this.weight = textDefinition.weight;\n        this.color = textDefinition.color;\n        this.isSubtle = textDefinition.isSubtle;\n    }\n\n    asString(): string | undefined {\n        return this.text;\n    }\n\n    applyStylesTo(targetElement: HTMLElement) {\n        let fontType = this.hostConfig.getFontTypeDefinition(this.fontType);\n\n        if (fontType.fontFamily) {\n            targetElement.style.fontFamily = fontType.fontFamily;\n        }\n\n        let fontSize: number;\n\n        switch (this.size) {\n            case Enums.TextSize.Small:\n                fontSize = fontType.fontSizes.small;\n                break;\n            case Enums.TextSize.Medium:\n                fontSize = fontType.fontSizes.medium;\n                break;\n            case Enums.TextSize.Large:\n                fontSize = fontType.fontSizes.large;\n                break;\n            case Enums.TextSize.ExtraLarge:\n                fontSize = fontType.fontSizes.extraLarge;\n                break;\n            default:\n                fontSize = fontType.fontSizes.default;\n                break;\n        }\n\n        targetElement.style.fontSize = fontSize + \"px\";\n\n        let colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\n\n        targetElement.style.color = <string>Utils.stringToCssColor(this.isSubtle ? colorDefinition.subtle : colorDefinition.default);\n\n        let fontWeight: number;\n\n        switch (this.weight) {\n            case Enums.TextWeight.Lighter:\n                fontWeight = fontType.fontWeights.lighter;\n                break;\n            case Enums.TextWeight.Bolder:\n                fontWeight = fontType.fontWeights.bolder;\n                break;\n            default:\n                fontWeight = fontType.fontWeights.default;\n                break;\n        }\n\n        targetElement.style.fontWeight = fontWeight.toString();\n\n        if (this.ariaHidden) {\n            targetElement.setAttribute(\"aria-hidden\", \"true\");\n        }\n    }\n\n    get effectiveColor(): Enums.TextColor {\n        return this.color ? this.color : Enums.TextColor.Default;\n    }\n}\n\nexport class TextBlock extends BaseTextBlock {\n    //#region Schema\n\n    static readonly wrapProperty = new BoolProperty(Versions.v1_0, \"wrap\", false);\n    static readonly maxLinesProperty = new NumProperty(Versions.v1_0, \"maxLines\");\n\n    @property(TextBlock.wrapProperty)\n    wrap: boolean = false;\n\n    @property(TextBlock.maxLinesProperty)\n    maxLines?: number;\n\n    //#endregion\n\n    private _computedLineHeight: number;\n    private _originalInnerHtml: string;\n    private _processedText?: string;\n    private _treatAsPlainText: boolean = true;\n\n    private restoreOriginalContent() {\n        if (this.renderedElement !== undefined) {\n            if (this.maxLines && this.maxLines > 0) {\n                this.renderedElement.style.maxHeight = this._computedLineHeight * this.maxLines + \"px\";\n            }\n\n            this.renderedElement.innerHTML = this._originalInnerHtml;\n        }\n    }\n\n    private truncateIfSupported(maxHeight: number): boolean {\n        if (this.renderedElement !== undefined) {\n            // For now, only truncate TextBlocks that contain just a single\n            // paragraph -- since the maxLines calculation doesn't take into\n            // account Markdown lists\n            let children = this.renderedElement.children;\n            let isTextOnly = !children.length;\n            let truncationSupported = isTextOnly || children.length == 1 && (<HTMLElement>children[0]).tagName.toLowerCase() == 'p';\n\n            if (truncationSupported) {\n                let element = isTextOnly ? this.renderedElement : <HTMLElement>children[0];\n\n                Utils.truncate(element, maxHeight, this._computedLineHeight);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    protected setText(value: string) {\n        super.setText(value);\n\n        this._processedText = undefined;\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        this._processedText = undefined;\n\n        if (this.text) {\n            let preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\n            let hostConfig = this.hostConfig;\n\n            let element: HTMLElement;\n\n            if (this.forElementId) {\n                let labelElement = document.createElement(\"label\");\n                labelElement.htmlFor = this.forElementId;\n\n                element = labelElement;\n            }\n            else {\n                element = document.createElement(\"div\");\n            }\n\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textBlock\"));\n            element.style.overflow = \"hidden\";\n\n            this.applyStylesTo(element);\n\n            if (this.selectAction) {\n                element.onclick = (e) => {\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    if (this.selectAction) {\n                        this.selectAction.execute();\n                    }\n                }\n\n                if (hostConfig.supportsInteractivity) {\n                    element.tabIndex = 0\n                    element.setAttribute(\"role\", this.selectAction.getAriaRole());\n\n                    if (this.selectAction.title) {\n                        element.setAttribute(\"aria-label\", this.selectAction.title);\n                        element.title = this.selectAction.title;\n                    }\n\n                    element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n                }\n            }\n\n            if (!this._processedText) {\n                this._treatAsPlainText = true;\n\n                let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\n\n                if (this.useMarkdown && formattedText) {\n                    if (GlobalSettings.allowMarkForTextHighlighting) {\n                        formattedText = formattedText.replace(/<mark>/g, \"===\").replace(/<\\/mark>/g, \"/==/\");\n                    }\n\n                    let markdownProcessingResult = AdaptiveCard.applyMarkdown(formattedText);\n\n                    if (markdownProcessingResult.didProcess && markdownProcessingResult.outputHtml) {\n                        this._processedText = markdownProcessingResult.outputHtml;\n                        this._treatAsPlainText = false;\n\n                        // Only process <mark> tag if markdown processing was applied because\n                        // markdown processing is also responsible for sanitizing the input string\n                        if (GlobalSettings.allowMarkForTextHighlighting && this._processedText) {\n                            let markStyle: string = \"\";\n                            let effectiveStyle = this.getEffectiveStyleDefinition();\n\n                            if (effectiveStyle.highlightBackgroundColor) {\n                                markStyle += \"background-color: \" + effectiveStyle.highlightBackgroundColor + \";\";\n                            }\n\n                            if (effectiveStyle.highlightForegroundColor) {\n                                markStyle += \"color: \" + effectiveStyle.highlightForegroundColor + \";\";\n                            }\n\n                            if (markStyle) {\n                                markStyle = 'style=\"' + markStyle + '\"';\n                            }\n\n                            this._processedText = this._processedText.replace(/===/g, \"<mark \" + markStyle + \">\").replace(/\\/==\\//g, \"</mark>\");\n                        }\n                    } else {\n                        this._processedText = formattedText;\n                        this._treatAsPlainText = true;\n                    }\n                }\n                else {\n                    this._processedText = formattedText;\n                    this._treatAsPlainText = true;\n                }\n            }\n\n            if (!this._processedText) {\n                this._processedText = \"\";\n            }\n\n            if (this._treatAsPlainText) {\n                element.innerText = this._processedText;\n            }\n            else {\n                element.innerHTML = this._processedText;\n            }\n\n            if (element.firstElementChild instanceof HTMLElement) {\n                let firstElementChild = <HTMLElement>element.firstElementChild;\n                firstElementChild.style.marginTop = \"0px\";\n                firstElementChild.style.width = \"100%\";\n\n                if (!this.wrap) {\n                    firstElementChild.style.overflow = \"hidden\";\n                    firstElementChild.style.textOverflow = \"ellipsis\";\n                }\n            }\n\n            if (element.lastElementChild instanceof HTMLElement) {\n                (<HTMLElement>element.lastElementChild).style.marginBottom = \"0px\";\n            }\n\n            let anchors = element.getElementsByTagName(\"a\");\n\n            for (let i = 0; i < anchors.length; i++) {\n                let anchor = <HTMLAnchorElement>anchors[i];\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\n                anchor.target = \"_blank\";\n                anchor.onclick = (e: MouseEvent) => {\n                    if (raiseAnchorClickedEvent(this, e.target as HTMLAnchorElement, e)) {\n                        e.preventDefault();\n                        e.cancelBubble = true;\n                    }\n                }\n                anchor.oncontextmenu = (e: MouseEvent) => {\n                    if (raiseAnchorClickedEvent(this, e.target as HTMLAnchorElement, e)) {\n                        e.preventDefault();\n                        e.cancelBubble = true;\n\n                        return false;\n                    }\n\n                    return true;\n                }\n            }\n\n            if (this.wrap) {\n                element.style.wordWrap = \"break-word\";\n\n                if (this.maxLines && this.maxLines > 0) {\n                    element.style.overflow = \"hidden\";\n\n                    if (Utils.isInternetExplorer() || !GlobalSettings.useWebkitLineClamp) {\n                        element.style.maxHeight = (this._computedLineHeight * this.maxLines) + \"px\";\n                    }\n                    else {\n                        // While non standard, --webkit-line-clamp works in every browser (except IE)\n                        // and is a great solution to support the maxLines feature with ellipsis\n                        // truncation. With --webkit-line-clamp there is need to use explicit line heights\n                        element.style.removeProperty(\"line-height\");\n                        element.style.display = \"-webkit-box\";\n                        element.style.webkitBoxOrient = \"vertical\";\n                        element.style.webkitLineClamp = this.maxLines.toString();\n                    }\n                }\n            }\n            else {\n                element.style.whiteSpace = \"nowrap\";\n                element.style.textOverflow = \"ellipsis\";\n            }\n\n            if (GlobalSettings.useAdvancedTextBlockTruncation || GlobalSettings.useAdvancedCardBottomTruncation) {\n                this._originalInnerHtml = element.innerHTML;\n            }\n\n            return element;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    protected truncateOverflow(maxHeight: number): boolean {\n        if (maxHeight >= this._computedLineHeight) {\n            return this.truncateIfSupported(maxHeight);\n        }\n\n        return false;\n    }\n\n    protected undoOverflowTruncation() {\n        this.restoreOriginalContent();\n\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines) {\n            let maxHeight = this._computedLineHeight * this.maxLines;\n\n            this.truncateIfSupported(maxHeight);\n        }\n    }\n\n    useMarkdown: boolean = true;\n    forElementId?: string;\n\n    applyStylesTo(targetElement: HTMLElement) {\n        super.applyStylesTo(targetElement);\n\n        let parentContainer = this.getParentContainer();\n        let isRtl = parentContainer ? parentContainer.isRtl() : false;\n\n        switch (this.horizontalAlignment) {\n            case Enums.HorizontalAlignment.Center:\n                targetElement.style.textAlign = \"center\";\n                break;\n            case Enums.HorizontalAlignment.Right:\n                targetElement.style.textAlign = isRtl ? \"left\" : \"right\";\n                break;\n            default:\n                targetElement.style.textAlign = isRtl ? \"right\" : \"left\";\n                break;\n        }\n\n        let lineHeights = this.hostConfig.lineHeights;\n\n        if (lineHeights) {\n            switch (this.size) {\n                case Enums.TextSize.Small:\n                    this._computedLineHeight = lineHeights.small;\n                    break;\n                case Enums.TextSize.Medium:\n                    this._computedLineHeight = lineHeights.medium;\n                    break;\n                case Enums.TextSize.Large:\n                    this._computedLineHeight = lineHeights.large;\n                    break;\n                case Enums.TextSize.ExtraLarge:\n                    this._computedLineHeight = lineHeights.extraLarge;\n                    break;\n                default:\n                    this._computedLineHeight = lineHeights.default;\n                    break;\n            }\n        }\n        else {\n            // Looks like 1.33 is the magic number to compute line-height\n            // from font size.\n            this._computedLineHeight = this.getFontSize(this.hostConfig.getFontTypeDefinition(this.fontType)) * 1.33;\n        }\n\n        targetElement.style.lineHeight = this._computedLineHeight + \"px\";\n    }\n\n    getJsonTypeName(): string {\n        return \"TextBlock\";\n    }\n\n    updateLayout(processChildren: boolean = false) {\n        super.updateLayout(processChildren);\n\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines && this.isDisplayed()) {\n            // Reset the element's innerHTML in case the available room for\n            // content has increased\n            this.restoreOriginalContent();\n            this.truncateIfSupported(this._computedLineHeight * this.maxLines);\n        }\n    }\n}\n\nexport class TextRun extends BaseTextBlock {\n    //#region Schema\n\n    static readonly italicProperty = new BoolProperty(Versions.v1_2, \"italic\", false);\n    static readonly strikethroughProperty = new BoolProperty(Versions.v1_2, \"strikethrough\", false);\n    static readonly highlightProperty = new BoolProperty(Versions.v1_2, \"highlight\", false);\n    static readonly underlineProperty = new BoolProperty(Versions.v1_3, \"underline\", false);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        schema.add(BaseTextBlock.selectActionProperty);\n    }\n\n    @property(TextRun.italicProperty)\n    italic: boolean = false;\n\n    @property(TextRun.strikethroughProperty)\n    strikethrough: boolean = false;\n\n    @property(TextRun.highlightProperty)\n    highlight: boolean = false;\n\n    @property(TextRun.underlineProperty)\n    underline: boolean = false;\n\n    //#endregion\n\n    protected internalRender(): HTMLElement | undefined {\n        if (this.text) {\n            let preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\n            let hostConfig = this.hostConfig;\n\n            let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\n\n            if (!formattedText) {\n                formattedText = \"\";\n            }\n\n            let element = document.createElement(\"span\");\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textRun\"));\n\n            this.applyStylesTo(element);\n\n            if (this.selectAction && hostConfig.supportsInteractivity) {\n                let anchor = document.createElement(\"a\");\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\n\n                let href = this.selectAction.getHref();\n\n                anchor.href = href ? href : \"\";\n                anchor.target = \"_blank\";\n                anchor.onclick = (e) => {\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    if (this.selectAction) {\n                        this.selectAction.execute();\n                    }\n                }\n\n                if (this.selectAction.title) {\n                    anchor.setAttribute(\"aria-label\", this.selectAction.title);\n                    anchor.title = this.selectAction.title;\n                }\n\n                anchor.innerText = formattedText;\n\n                element.appendChild(anchor);\n            }\n            else {\n                element.innerText = formattedText;\n            }\n\n            return element;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    applyStylesTo(targetElement: HTMLElement) {\n        super.applyStylesTo(targetElement);\n\n        if (this.italic) {\n            targetElement.style.fontStyle = \"italic\";\n        }\n\n        if (this.strikethrough) {\n            targetElement.style.textDecoration = \"line-through\";\n        }\n\n        if (this.highlight) {\n            let colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\n\n            targetElement.style.backgroundColor = <string>Utils.stringToCssColor(this.isSubtle ? colorDefinition.highlightColors.subtle : colorDefinition.highlightColors.default);\n        }\n\n        if (this.underline) {\n            targetElement.style.textDecoration = \"underline\";\n        }\n    }\n\n    getJsonTypeName(): string {\n        return \"TextRun\";\n    }\n\n    get isStandalone(): boolean {\n        return false;\n    }\n\n    get isInline(): boolean {\n        return true;\n    }\n}\n\nexport class RichTextBlock extends CardElement {\n    private _inlines: CardElement[] = [];\n\n    private internalAddInline(inline: CardElement, forceAdd: boolean = false) {\n        if (!inline.isInline) {\n            throw new Error(Strings.errors.elementCannotBeUsedAsInline());\n        }\n\n        let doAdd: boolean = inline.parent === undefined || forceAdd;\n\n        if (!doAdd && inline.parent != this) {\n            throw new Error(Strings.errors.inlineAlreadyParented());\n        }\n        else {\n            inline.setParent(this);\n\n            this._inlines.push(inline);\n        }\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._inlines = [];\n\n        if (Array.isArray(source[\"inlines\"])) {\n            for (let jsonInline of source[\"inlines\"]) {\n                let inline: CardElement | undefined;\n\n                if (typeof jsonInline === \"string\") {\n                    let textRun = new TextRun();\n                    textRun.text = jsonInline;\n\n                    inline = textRun;\n                }\n                else {\n                    // No fallback for inlines in 1.2\n                    inline = context.parseElement(this, jsonInline, false);\n                }\n\n                if (inline) {\n                    this.internalAddInline(inline, true);\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        if (this._inlines.length > 0) {\n            let jsonInlines: any[] = [];\n\n            for (let inline of this._inlines) {\n                jsonInlines.push(inline.toJSON(context));\n            }\n\n            context.serializeValue(target, \"inlines\", jsonInlines);\n        }\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        if (this._inlines.length > 0) {\n            let element: HTMLElement;\n\n            if (this.forElementId) {\n                let labelElement = document.createElement(\"label\");\n                labelElement.htmlFor = this.forElementId;\n\n                element = labelElement;\n            }\n            else {\n                element = document.createElement(\"div\");\n            }\n\n            element.className = this.hostConfig.makeCssClassName(\"ac-richTextBlock\");\n\n            let parentContainer = this.getParentContainer();\n            let isRtl = parentContainer ? parentContainer.isRtl() : false;\n\n            switch (this.horizontalAlignment) {\n                case Enums.HorizontalAlignment.Center:\n                    element.style.textAlign = \"center\";\n                    break;\n                case Enums.HorizontalAlignment.Right:\n                    element.style.textAlign = isRtl ? \"left\" : \"right\";\n                    break;\n                default:\n                    element.style.textAlign = isRtl ? \"right\" : \"left\";\n                    break;\n            }\n\n            let renderedInlines: number = 0;\n\n            for (let inline of this._inlines) {\n                let renderedInline = inline.render();\n\n                if (renderedInline) {\n                    element.appendChild(renderedInline);\n\n                    renderedInlines++;\n                }\n            }\n\n            if (renderedInlines > 0) {\n                return element;\n            }\n        }\n\n        return undefined;\n    }\n\n    forElementId?: string;\n\n    asString(): string | undefined {\n        let result = \"\";\n\n        for (let inline of this._inlines) {\n            result += inline.asString();\n        }\n\n        return result;\n    }\n\n    getJsonTypeName(): string {\n        return \"RichTextBlock\";\n    }\n\n    getInlineCount(): number {\n        return this._inlines.length;\n    }\n\n    getInlineAt(index: number): CardElement {\n        if (index >= 0 && index < this._inlines.length) {\n            return this._inlines[index];\n        }\n        else {\n            throw new Error(Strings.errors.indexOutOfRange(index));\n        }\n    }\n\n    addInline(inline: CardElement | string) {\n        if (typeof inline === \"string\") {\n            this.internalAddInline(new TextRun(inline));\n        }\n        else {\n            this.internalAddInline(inline);\n        }\n    }\n\n    removeInline(inline: CardElement): boolean {\n        let index = this._inlines.indexOf(inline);\n\n        if (index >= 0) {\n            this._inlines[index].setParent(undefined);\n            this._inlines.splice(index, 1);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport class Fact extends SerializableObject {\n    //#region Schema\n\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n\n    // For historic reasons, the \"title\" schema property is exposed as \"name\" in the OM.\n    @property(Fact.titleProperty)\n    name?: string;\n\n    @property(Fact.valueProperty)\n    value?: string;\n\n    //#endregion\n\n    protected getSchemaKey(): string {\n        return \"Fact\";\n    }\n\n    constructor(name?: string, value?: string) {\n        super();\n\n        this.name = name;\n        this.value = value;\n    }\n}\n\nexport class FactSet extends CardElement {\n    //#region Schema\n\n    static readonly factsProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"facts\", Fact);\n\n    @property(FactSet.factsProperty)\n    facts: Fact[];\n\n    //#endregion\n\n    protected get useDefaultSizing(): boolean {\n        return false;\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element: HTMLElement | undefined = undefined;\n        let hostConfig = this.hostConfig;\n\n        if (this.facts.length > 0) {\n            element = document.createElement(\"table\");\n            element.style.borderWidth = \"0px\";\n            element.style.borderSpacing = \"0px\";\n            element.style.borderStyle = \"none\";\n            element.style.borderCollapse = \"collapse\";\n            element.style.display = \"block\";\n            element.style.overflow = \"hidden\";\n            element.classList.add(hostConfig.makeCssClassName(\"ac-factset\"));\n            element.setAttribute(\"role\", \"presentation\");\n\n            for (let i = 0; i < this.facts.length; i++) {\n                let trElement = document.createElement(\"tr\");\n\n                if (i > 0) {\n                    trElement.style.marginTop = hostConfig.factSet.spacing + \"px\";\n                }\n\n                // Title column\n                let tdElement = document.createElement(\"td\");\n                tdElement.style.padding = \"0\";\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-title\"));\n\n                if (hostConfig.factSet.title.maxWidth) {\n                    tdElement.style.maxWidth = hostConfig.factSet.title.maxWidth + \"px\";\n                }\n\n                tdElement.style.verticalAlign = \"top\";\n\n                let textBlock = new TextBlock();\n                textBlock.setParent(this);\n                textBlock.text = (!this.facts[i].name && this.isDesignMode()) ? \"Title\" : this.facts[i].name;\n                textBlock.size = hostConfig.factSet.title.size;\n                textBlock.color = hostConfig.factSet.title.color;\n                textBlock.isSubtle = hostConfig.factSet.title.isSubtle;\n                textBlock.weight = hostConfig.factSet.title.weight;\n                textBlock.wrap = hostConfig.factSet.title.wrap;\n                textBlock.spacing = Enums.Spacing.None;\n\n                Utils.appendChild(tdElement, textBlock.render());\n                Utils.appendChild(trElement, tdElement);\n\n                // Spacer column\n                tdElement = document.createElement(\"td\");\n                tdElement.style.width = \"10px\";\n\n                Utils.appendChild(trElement, tdElement);\n\n                // Value column\n                tdElement = document.createElement(\"td\");\n                tdElement.style.padding = \"0\";\n                tdElement.style.verticalAlign = \"top\";\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-value\"));\n\n                textBlock = new TextBlock();\n                textBlock.setParent(this);\n                textBlock.text = this.facts[i].value;\n                textBlock.size = hostConfig.factSet.value.size;\n                textBlock.color = hostConfig.factSet.value.color;\n                textBlock.isSubtle = hostConfig.factSet.value.isSubtle;\n                textBlock.weight = hostConfig.factSet.value.weight;\n                textBlock.wrap = hostConfig.factSet.value.wrap;\n                textBlock.spacing = Enums.Spacing.None;\n\n                Utils.appendChild(tdElement, textBlock.render());\n                Utils.appendChild(trElement, tdElement);\n                Utils.appendChild(element, trElement);\n            }\n        }\n\n        return element;\n    }\n\n    getJsonTypeName(): string {\n        return \"FactSet\";\n    }\n}\n\nclass ImageDimensionProperty extends PropertyDefinition {\n    getInternalName(): string {\n        return this.internalName;\n    }\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        let result: number | undefined = undefined;\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.defaultValue;\n        }\n\n        let isValid = false;\n\n        if (typeof sourceValue === \"string\") {\n            try {\n                let size = SizeAndUnit.parse(sourceValue, true);\n\n                if (size.unit == Enums.SizeUnit.Pixel) {\n                    result = size.physicalSize;\n\n                    isValid = true;\n                }\n            }\n            catch {\n                // Swallow the exception\n            }\n\n            // If the source value isn't valid per this property definition,\n            // check its validity per the fallback property, if specified\n            if (!isValid && this.fallbackProperty) {\n                isValid = this.fallbackProperty.isValidValue(sourceValue, context);\n            }\n        }\n\n        if (!isValid) {\n            context.logParseEvent(\n                sender,\n                Enums.ValidationEvent.InvalidPropertyValue,\n                Strings.errors.invalidPropertyValue(sourceValue, this.name));\n        }\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        context.serializeValue(\n            target,\n            this.name,\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly internalName: string,\n        readonly fallbackProperty?: ValueSetProperty) {\n        super(targetVersion, name);\n    }\n}\n\nexport class Image extends CardElement {\n    //#region Schema\n\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\n    static readonly altTextProperty = new StringProperty(Versions.v1_0, \"altText\");\n    static readonly backgroundColorProperty = new StringProperty(Versions.v1_1, \"backgroundColor\");\n    static readonly styleProperty = new EnumProperty(\n        Versions.v1_0,\n        \"style\",\n        Enums.ImageStyle,\n        Enums.ImageStyle.Default);\n    static readonly sizeProperty = new EnumProperty(\n        Versions.v1_0,\n        \"size\",\n        Enums.Size,\n        Enums.Size.Auto);\n    static readonly pixelWidthProperty = new ImageDimensionProperty(Versions.v1_1, \"width\", \"pixelWidth\");\n    static readonly pixelHeightProperty = new ImageDimensionProperty(Versions.v1_1, \"height\", \"pixelHeight\", CardElement.heightProperty);\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [ \"Action.ShowCard\" ]);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        schema.remove(CardElement.heightProperty);\n    }\n\n    @property(Image.urlProperty)\n    url?: string;\n\n    @property(Image.altTextProperty)\n    altText?: string;\n\n    @property(Image.backgroundColorProperty)\n    backgroundColor?: string;\n\n    @property(Image.sizeProperty)\n    size: Enums.Size = Enums.Size.Auto;\n\n    @property(Image.styleProperty)\n    style: Enums.ImageStyle = Enums.ImageStyle.Default;\n\n    @property(Image.pixelWidthProperty)\n    pixelWidth?: number;\n\n    @property(Image.pixelHeightProperty)\n    pixelHeight?: number;\n\n    @property(Image.selectActionProperty)\n    selectAction?: Action;\n\n    //#endregion\n\n    private applySize(element: HTMLElement) {\n        if (this.pixelWidth || this.pixelHeight) {\n            if (this.pixelWidth) {\n                element.style.width = this.pixelWidth + \"px\";\n            }\n\n            if (this.pixelHeight) {\n                element.style.height = this.pixelHeight + \"px\";\n            }\n        }\n        else {\n            if (this.maxHeight) {\n                // If the image is constrained in height, we set its height property and\n                // auto and stretch are ignored (default to medium). THis is necessary for\n                // ImageSet which uses a maximum image height as opposed to the cards width\n                // as a constraining dimension\n                switch (this.size) {\n                    case Enums.Size.Small:\n                        element.style.height = this.hostConfig.imageSizes.small + \"px\";\n                        break;\n                    case Enums.Size.Large:\n                        element.style.height = this.hostConfig.imageSizes.large + \"px\";\n                        break;\n                    default:\n                        element.style.height = this.hostConfig.imageSizes.medium + \"px\";\n                        break;\n                }\n\n                element.style.maxHeight = this.maxHeight + \"px\";\n            }\n            else {\n                switch (this.size) {\n                    case Enums.Size.Stretch:\n                        element.style.width = \"100%\";\n                        break;\n                    case Enums.Size.Auto:\n                        element.style.maxWidth = \"100%\";\n                        break;\n                    case Enums.Size.Small:\n                        element.style.width = this.hostConfig.imageSizes.small + \"px\";\n                        break;\n                    case Enums.Size.Large:\n                        element.style.width = this.hostConfig.imageSizes.large + \"px\";\n                        break;\n                    case Enums.Size.Medium:\n                        element.style.width = this.hostConfig.imageSizes.medium + \"px\";\n                        break;\n                }\n\n                element.style.maxHeight = \"100%\";\n            }\n        }\n    }\n\n    protected get useDefaultSizing() {\n        return false;\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element: HTMLElement | undefined = undefined;\n\n        if (this.url) {\n            element = document.createElement(\"div\");\n            element.style.display = \"flex\";\n            element.style.alignItems = \"flex-start\";\n\n            element.onkeypress = (e) => {\n                if (this.selectAction && (e.keyCode == 13 || e.keyCode == 32)) { // enter or space pressed\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    this.selectAction.execute();\n                }\n            }\n\n            element.onclick = (e) => {\n                if (this.selectAction) {\n                    e.preventDefault();\n                    e.cancelBubble = true;\n\n                    this.selectAction.execute();\n                }\n            }\n\n            switch (this.horizontalAlignment) {\n                case Enums.HorizontalAlignment.Center:\n                    element.style.justifyContent = \"center\";\n                    break;\n                case Enums.HorizontalAlignment.Right:\n                    element.style.justifyContent = \"flex-end\";\n                    break;\n                default:\n                    element.style.justifyContent = \"flex-start\";\n                    break;\n            }\n\n            // Cache hostConfig to avoid walking the parent hierarchy multiple times\n            let hostConfig = this.hostConfig;\n\n            let imageElement = document.createElement(\"img\");\n            imageElement.onload = (e: Event) => {\n                raiseImageLoadedEvent(this);\n            }\n            imageElement.onerror = (e: Event) => {\n                if (this.renderedElement) {\n                    let card = this.getRootElement() as AdaptiveCard;\n\n                    this.renderedElement.innerHTML = \"\";\n\n                    if (card && card.designMode) {\n                        let errorElement = document.createElement(\"div\");\n                        errorElement.style.display = \"flex\";\n                        errorElement.style.alignItems = \"center\";\n                        errorElement.style.justifyContent = \"center\";\n                        errorElement.style.backgroundColor = \"#EEEEEE\";\n                        errorElement.style.color = \"black\";\n                        errorElement.innerText = \":-(\";\n                        errorElement.style.padding = \"10px\";\n\n                        this.applySize(errorElement);\n\n                        this.renderedElement.appendChild(errorElement);\n                    }\n                }\n\n                raiseImageLoadedEvent(this);\n            }\n            imageElement.style.minWidth = \"0\";\n            imageElement.classList.add(hostConfig.makeCssClassName(\"ac-image\"));\n\n            if (this.selectAction !== undefined && hostConfig.supportsInteractivity) {\n                imageElement.tabIndex = 0\n                imageElement.setAttribute(\"role\", this.selectAction.getAriaRole());\n\n                if (this.selectAction.title) {\n                    imageElement.setAttribute(\"aria-label\", <string>this.selectAction.title);\n                    imageElement.title = this.selectAction.title;\n                }\n\n                imageElement.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n            }\n\n            this.applySize(imageElement);\n\n            if (this.style === Enums.ImageStyle.Person) {\n                imageElement.style.borderRadius = \"50%\";\n                imageElement.style.backgroundPosition = \"50% 50%\";\n                imageElement.style.backgroundRepeat = \"no-repeat\";\n            }\n\n            imageElement.style.backgroundColor = <string>Utils.stringToCssColor(this.backgroundColor);\n            imageElement.src = <string>this.preProcessPropertyValue(Image.urlProperty);\n\n            const altTextProperty = this.preProcessPropertyValue(Image.altTextProperty);\n            if (altTextProperty) {\n                imageElement.alt = <string>altTextProperty;\n            }\n\n            element.appendChild(imageElement);\n        }\n\n        return element;\n    }\n\n    maxHeight?: number;\n\n    getJsonTypeName(): string {\n        return \"Image\";\n    }\n\n    getActionById(id: string) {\n        let result = super.getActionById(id);\n\n        if (!result && this.selectAction) {\n            result = this.selectAction.getActionById(id);\n        }\n\n        return result;\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return this.url ? [{ url: this.url, mimeType: \"image\" }] : [];\n    }\n}\n\nexport abstract class CardElementContainer extends CardElement {\n    //#region Schema\n\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [ \"Action.ShowCard\" ]);\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        if (!this.isSelectable) {\n            schema.remove(CardElementContainer.selectActionProperty);\n        }\n    }\n\n    @property(CardElementContainer.selectActionProperty)\n    protected _selectAction?: Action;\n\n    //#endregion\n\n    protected isElementAllowed(element: CardElement) {\n        return this.hostConfig.supportsInteractivity || !element.isInteractive;\n    }\n\n    protected applyPadding() {\n        super.applyPadding();\n\n        if (!this.renderedElement) {\n            return;\n        }\n\n        let physicalPadding = new SpacingDefinition();\n\n        if (this.getEffectivePadding()) {\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\n        }\n\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\n\n        this.renderedElement.style.marginRight = \"0\";\n        this.renderedElement.style.marginLeft = \"0\";\n    }\n\n    protected get isSelectable(): boolean {\n        return false;\n    }\n\n    abstract getItemCount(): number;\n    abstract getItemAt(index: number): CardElement;\n    abstract getFirstVisibleRenderedItem(): CardElement | undefined;\n    abstract getLastVisibleRenderedItem(): CardElement | undefined;\n    abstract removeItem(item: CardElement): boolean;\n\n    allowVerticalOverflow: boolean = false;\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        for (let i = 0; i < this.getItemCount(); i++) {\n            let item = this.getItemAt(i);\n\n            if (!this.hostConfig.supportsInteractivity && item.isInteractive) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.InteractivityNotAllowed,\n                    Strings.errors.interactivityNotAllowed());\n            }\n\n            if (!this.isElementAllowed(item)) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.InteractivityNotAllowed,\n                    Strings.errors.elementTypeNotAllowed(item.getJsonTypeName()));\n            }\n\n            item.internalValidateProperties(context);\n        }\n\n        if (this._selectAction) {\n            this._selectAction.internalValidateProperties(context);\n        }\n    }\n\n    render(): HTMLElement | undefined {\n        let element = super.render();\n\n        if (element) {\n            let hostConfig = this.hostConfig;\n\n            if (this.allowVerticalOverflow) {\n                element.style.overflowX = \"hidden\";\n                element.style.overflowY = \"auto\";\n            }\n\n            if (element && this.isSelectable && this._selectAction && hostConfig.supportsInteractivity) {\n                element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\n                element.tabIndex = 0;\n                element.setAttribute(\"role\", this._selectAction.getAriaRole());\n\n                if (this._selectAction.title) {\n                    element.setAttribute(\"aria-label\", this._selectAction.title);\n                    element.title = this._selectAction.title;\n                }\n\n                element.onclick = (e) => {\n                    if (this._selectAction !== undefined) {\n                        e.preventDefault();\n                        e.cancelBubble = true;\n\n                        this._selectAction.execute();\n                    }\n                }\n\n                element.onkeypress = (e) => {\n                    if (this._selectAction !== undefined && (e.keyCode == 13 || e.keyCode == 32)) {\n                        // Enter or space pressed\n                        e.preventDefault();\n                        e.cancelBubble = true;\n\n                        this._selectAction.execute();\n                    }\n                }\n            }\n        }\n\n        return element;\n    }\n\n    updateLayout(processChildren: boolean = true) {\n        super.updateLayout(processChildren);\n\n        if (processChildren) {\n            for (let i = 0; i < this.getItemCount(); i++) {\n                this.getItemAt(i).updateLayout();\n            }\n        }\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        let result: Input[] = [];\n\n        for (let i = 0; i < this.getItemCount(); i++) {\n            result = result.concat(this.getItemAt(i).getAllInputs(processActions));\n        }\n\n        return result;\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        let result: IResourceInformation[] = [];\n\n        for (let i = 0; i < this.getItemCount(); i++) {\n            result = result.concat(this.getItemAt(i).getResourceInformation());\n        }\n\n        return result;\n    }\n\n    getElementById(id: string): CardElement | undefined {\n        let result = super.getElementById(id);\n\n        if (!result) {\n            for (let i = 0; i < this.getItemCount(); i++) {\n                result = this.getItemAt(i).getElementById(id);\n\n                if (result) {\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    findDOMNodeOwner(node: Node): CardObject | undefined {\n        let target: CardObject | undefined = undefined;\n\n        for (let i = 0; i < this.getItemCount(); i++) {\n            // recur through child elements\n            target = this.getItemAt(i).findDOMNodeOwner(node);\n\n            if (target) {\n                return target;\n            }\n        }\n\n        // if not found in children, defer to parent implementation\n        return super.findDOMNodeOwner(node);\n    }\n}\n\nexport class ImageSet extends CardElementContainer {\n    //#region Schema\n\n    static readonly imagesProperty = new SerializableObjectCollectionProperty(\n        Versions.v1_0,\n        \"images\",\n        Image,\n        (sender: SerializableObject, item: Image) => { item.setParent(<CardElement>sender); });\n    static readonly imageSizeProperty = new EnumProperty(\n        Versions.v1_0,\n        \"imageSize\",\n        Enums.ImageSize,\n        Enums.ImageSize.Medium);\n\n    @property(ImageSet.imagesProperty)\n    private _images: Image[] = [];\n\n    @property(ImageSet.imageSizeProperty)\n    imageSize: Enums.ImageSize = Enums.ImageSize.Medium;\n\n    //#endregion\n\n    protected internalRender(): HTMLElement | undefined {\n        let element: HTMLElement | undefined = undefined;\n\n        if (this._images.length > 0) {\n            element = document.createElement(\"div\");\n            element.style.display = \"flex\";\n            element.style.flexWrap = \"wrap\";\n\n            for (let image of this._images) {\n                switch (this.imageSize) {\n                    case Enums.ImageSize.Small:\n                        image.size = Enums.Size.Small;\n                        break;\n                    case Enums.ImageSize.Large:\n                        image.size = Enums.Size.Large;\n                        break;\n                    default:\n                        image.size = Enums.Size.Medium;\n                        break;\n                }\n\n                image.maxHeight = this.hostConfig.imageSet.maxImageHeight;\n\n                let renderedImage = image.render();\n\n                if (renderedImage) {\n                    renderedImage.style.display = \"inline-flex\";\n                    renderedImage.style.margin = \"0px\";\n                    renderedImage.style.marginRight = \"10px\";\n\n                    Utils.appendChild(element, renderedImage);\n                }\n            }\n        }\n\n        return element;\n    }\n\n    getItemCount(): number {\n        return this._images.length;\n    }\n\n    getItemAt(index: number): CardElement {\n        return this._images[index];\n    }\n\n    getFirstVisibleRenderedItem(): CardElement | undefined {\n        return this._images && this._images.length > 0 ? this._images[0] : undefined;\n    }\n\n    getLastVisibleRenderedItem(): CardElement | undefined {\n        return this._images && this._images.length > 0 ? this._images[this._images.length - 1] : undefined;\n    }\n\n    removeItem(item: CardElement): boolean {\n        if (item instanceof Image) {\n            let itemIndex = this._images.indexOf(item);\n\n            if (itemIndex >= 0) {\n                this._images.splice(itemIndex, 1);\n\n                item.setParent(undefined);\n\n                this.updateLayout();\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    getJsonTypeName(): string {\n        return \"ImageSet\";\n    }\n\n    addImage(image: Image) {\n        if (!image.parent) {\n            this._images.push(image);\n\n            image.setParent(this);\n        }\n        else {\n            throw new Error(\"This image already belongs to another ImageSet\");\n        }\n    }\n\n    indexOf(cardElement: CardElement): number {\n        return cardElement instanceof Image ? this._images.indexOf(cardElement) : -1;\n    }\n}\n\nexport class MediaSource extends SerializableObject {\n    //#region Schema\n\n    static readonly mimeTypeProperty = new StringProperty(Versions.v1_1, \"mimeType\");\n    static readonly urlProperty = new StringProperty(Versions.v1_1, \"url\");\n\n    @property(MediaSource.mimeTypeProperty)\n    mimeType?: string;\n\n    @property(MediaSource.urlProperty)\n    url?: string;\n\n    //#endregion\n\n    protected getSchemaKey(): string {\n        return \"MediaSource\";\n    }\n\n    constructor(url?: string, mimeType?: string) {\n        super();\n\n        this.url = url;\n        this.mimeType = mimeType;\n    }\n\n    isValid(): boolean {\n        return this.mimeType && this.url ? true : false;\n    }\n\n    render(): HTMLElement | undefined {\n        let result: HTMLSourceElement | undefined = undefined;\n\n        if (this.isValid()) {\n            result = document.createElement(\"source\");\n            result.src = <string>this.url;\n            result.type = <string>this.mimeType;\n        }\n\n        return result;\n    }\n}\n\nexport class Media extends CardElement {\n    //#region Schema\n\n    static readonly sourcesProperty = new SerializableObjectCollectionProperty(Versions.v1_1, \"sources\", MediaSource);\n    static readonly posterProperty = new StringProperty(Versions.v1_1, \"poster\");\n    static readonly altTextProperty = new StringProperty(Versions.v1_1, \"altText\");\n\n    @property(Media.sourcesProperty)\n    sources: MediaSource[] = [];\n\n    @property(Media.posterProperty)\n    poster?: string;\n\n    @property(Media.altTextProperty)\n    altText?: string;\n\n    //#endregion\n\n    static readonly supportedMediaTypes = [\"audio\", \"video\"];\n\n    private _selectedMediaType?: string;\n    private _selectedSources: MediaSource[];\n\n    private getPosterUrl(): string | undefined {\n        return this.poster ? this.poster : this.hostConfig.media.defaultPoster;\n    }\n\n    private processSources() {\n        this._selectedSources = [];\n        this._selectedMediaType = undefined;\n\n        for (let source of this.sources) {\n            let mimeComponents = source.mimeType ? source.mimeType.split('/') : [];\n\n            if (mimeComponents.length == 2) {\n                if (!this._selectedMediaType) {\n                    let index = Media.supportedMediaTypes.indexOf(mimeComponents[0]);\n\n                    if (index >= 0) {\n                        this._selectedMediaType = Media.supportedMediaTypes[index];\n                    }\n                }\n                if (mimeComponents[0] == this._selectedMediaType) {\n                    this._selectedSources.push(source);\n                }\n            }\n        }\n    }\n\n    private handlePlayButtonInvoke(event: UIEvent) : void\n    {\n        if (this.hostConfig.media.allowInlinePlayback) {\n            event.preventDefault();\n            event.cancelBubble = true;\n\n            if (this.renderedElement) {\n                let mediaPlayerElement = this.renderMediaPlayer();\n\n                this.renderedElement.innerHTML = \"\";\n                this.renderedElement.appendChild(mediaPlayerElement);\n\n                mediaPlayerElement.play();\n                mediaPlayerElement.focus();\n            }\n        }\n        else {\n            if (Media.onPlay) {\n                event.preventDefault();\n                event.cancelBubble = true;\n\n                Media.onPlay(this);\n            }\n        }\n    }\n\n    private renderPoster(): HTMLElement {\n        const playButtonArrowWidth = 12;\n        const playButtonArrowHeight = 15;\n\n        let posterRootElement = document.createElement(\"div\");\n        posterRootElement.className = this.hostConfig.makeCssClassName(\"ac-media-poster\");\n        posterRootElement.setAttribute(\"role\", \"contentinfo\");\n        posterRootElement.setAttribute(\"aria-label\", this.altText ? this.altText : Strings.defaults.mediaPlayerAriaLabel());\n        posterRootElement.style.position = \"relative\";\n        posterRootElement.style.display = \"flex\";\n\n        let posterUrl = this.getPosterUrl();\n\n        if (posterUrl) {\n            let posterImageElement = document.createElement(\"img\");\n            posterImageElement.style.width = \"100%\";\n            posterImageElement.style.height = \"100%\";\n            posterImageElement.setAttribute(\"role\", \"presentation\");\n\n            posterImageElement.onerror = (e: Event) => {\n                if (posterImageElement.parentNode) {\n                    posterImageElement.parentNode.removeChild(posterImageElement);\n                }\n\n                posterRootElement.classList.add(\"empty\");\n                posterRootElement.style.minHeight = \"150px\";\n            }\n\n            posterImageElement.src = posterUrl;\n\n            posterRootElement.appendChild(posterImageElement);\n        }\n        else {\n            posterRootElement.classList.add(\"empty\");\n            posterRootElement.style.minHeight = \"150px\";\n        }\n\n        if (this.hostConfig.supportsInteractivity && this._selectedSources.length > 0) {\n            let playButtonOuterElement = document.createElement(\"div\");\n            playButtonOuterElement.tabIndex = 0;\n            playButtonOuterElement.setAttribute(\"role\", \"button\");\n            playButtonOuterElement.setAttribute(\"aria-label\", Strings.defaults.mediaPlayerPlayMedia());\n            playButtonOuterElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton\");\n            playButtonOuterElement.style.display = \"flex\";\n            playButtonOuterElement.style.alignItems = \"center\";\n            playButtonOuterElement.style.justifyContent = \"center\";\n            playButtonOuterElement.onclick = (e) => {\n                this.handlePlayButtonInvoke(e);\n            }\n\n            playButtonOuterElement.onkeypress = (e: KeyboardEvent) => {\n                if (e.keyCode == 13 || e.keyCode == 32) { // space or enter\n                    this.handlePlayButtonInvoke(e);\n                }\n            }\n\n            let playButtonInnerElement = document.createElement(\"div\");\n            playButtonInnerElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton-arrow\");\n            playButtonInnerElement.style.width = playButtonArrowWidth + \"px\";\n            playButtonInnerElement.style.height = playButtonArrowHeight + \"px\";\n            playButtonInnerElement.style.borderTopWidth = (playButtonArrowHeight / 2) + \"px\";\n            playButtonInnerElement.style.borderBottomWidth = (playButtonArrowHeight / 2) + \"px\";\n            playButtonInnerElement.style.borderLeftWidth = playButtonArrowWidth + \"px\";\n            playButtonInnerElement.style.borderRightWidth = \"0\";\n            playButtonInnerElement.style.borderStyle = \"solid\";\n            playButtonInnerElement.style.borderTopColor = \"transparent\";\n            playButtonInnerElement.style.borderRightColor = \"transparent\";\n            playButtonInnerElement.style.borderBottomColor = \"transparent\";\n            playButtonInnerElement.style.transform = \"translate(\" + (playButtonArrowWidth / 10) + \"px,0px)\";\n\n            playButtonOuterElement.appendChild(playButtonInnerElement);\n\n            let playButtonContainer = document.createElement(\"div\");\n            playButtonContainer.style.position = \"absolute\";\n            playButtonContainer.style.left = \"0\";\n            playButtonContainer.style.top = \"0\";\n            playButtonContainer.style.width = \"100%\";\n            playButtonContainer.style.height = \"100%\";\n            playButtonContainer.style.display = \"flex\";\n            playButtonContainer.style.justifyContent = \"center\";\n            playButtonContainer.style.alignItems = \"center\";\n\n            playButtonContainer.appendChild(playButtonOuterElement);\n            posterRootElement.appendChild(playButtonContainer);\n        }\n\n        return posterRootElement;\n    }\n\n    private renderMediaPlayer(): HTMLMediaElement {\n        let mediaElement: HTMLMediaElement;\n\n        if (this._selectedMediaType == \"video\") {\n            let videoPlayer = document.createElement(\"video\");\n\n            let posterUrl = this.getPosterUrl();\n\n            if (posterUrl) {\n                videoPlayer.poster = posterUrl;\n            }\n\n            mediaElement = videoPlayer;\n        }\n        else {\n            mediaElement = document.createElement(\"audio\");\n        }\n\n        mediaElement.setAttribute(\"aria-label\", this.altText ? this.altText : Strings.defaults.mediaPlayerAriaLabel());\n        mediaElement.setAttribute(\"webkit-playsinline\", \"\");\n        mediaElement.setAttribute(\"playsinline\", \"\");\n        mediaElement.autoplay = true;\n        mediaElement.controls = true;\n\n        if (Utils.isMobileOS()) {\n            mediaElement.muted = true;\n        }\n\n        mediaElement.preload = \"none\";\n        mediaElement.style.width = \"100%\";\n\n        for (let source of this.sources) {\n            let renderedSource = source.render();\n\n            Utils.appendChild(mediaElement, renderedSource);\n        }\n\n        return mediaElement;\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element = <HTMLElement>document.createElement(\"div\");\n        element.className = this.hostConfig.makeCssClassName(\"ac-media\");\n\n        this.processSources();\n\n        element.appendChild(this.renderPoster());\n\n        return element;\n    }\n\n    static onPlay?: (sender: Media) => void;\n\n    getJsonTypeName(): string {\n        return \"Media\";\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        let result: IResourceInformation[] = [];\n\n        let posterUrl = this.getPosterUrl();\n\n        if (posterUrl) {\n            result.push({ url: posterUrl, mimeType: \"image\" });\n        }\n\n        for (let mediaSource of this.sources) {\n            if (mediaSource.isValid()) {\n                result.push(\n                    {\n                        url: <string>mediaSource.url,\n                        mimeType: <string>mediaSource.mimeType\n                    }\n                );\n            }\n        }\n\n        return result;\n    }\n\n    get selectedMediaType(): string | undefined {\n        return this._selectedMediaType;\n    }\n}\n\nexport abstract class Input extends CardElement implements IInput {\n    //#region Schema\n\n    static readonly labelProperty = new StringProperty(Versions.v1_3, \"label\", true);\n    static readonly isRequiredProperty = new BoolProperty(Versions.v1_3, \"isRequired\", false);\n    static readonly errorMessageProperty = new StringProperty(Versions.v1_3, \"errorMessage\", true);\n\n    @property(Input.labelProperty)\n    label?: string;\n\n    @property(Input.isRequiredProperty)\n    isRequired: boolean;\n\n    @property(Input.errorMessageProperty)\n    errorMessage?: string;\n\n    //#endregion\n\n    private _outerContainerElement: HTMLElement;\n    private _inputControlContainerElement: HTMLElement;\n    private _renderedErrorMessageElement?: HTMLElement;\n    private _renderedLabelElement?: HTMLElement;\n    private _renderedInputControlElement?: HTMLElement;\n\n    protected getAllLabelIds(): string[] {\n        let labelIds: string[] = [];\n\n        if (this._renderedLabelElement) {\n            labelIds.push(this._renderedLabelElement.id);\n        }\n\n        if (this._renderedErrorMessageElement) {\n            labelIds.push(this._renderedErrorMessageElement.id);\n        }\n\n        return labelIds;\n    }\n\n    protected updateInputControlAriaLabelledBy() {\n        if (this._renderedInputControlElement) {\n            let labelIds: string[] = this.getAllLabelIds();\n\n            if (this.labelledBy) {\n                labelIds.push(this.labelledBy);\n            }\n\n            if (this._renderedLabelElement) {\n                labelIds.push(this._renderedLabelElement.id);\n            }\n\n            if (this._renderedErrorMessageElement) {\n                labelIds.push(this._renderedErrorMessageElement.id);\n            }\n\n            if (labelIds.length > 0) {\n                this._renderedInputControlElement.setAttribute(\"aria-labelledby\", labelIds.join(\" \"));\n            }\n            else {\n                this._renderedInputControlElement.removeAttribute(\"aria-labelledby\");\n            }\n        }\n    }\n\n    protected get isNullable(): boolean {\n        return true;\n    }\n\n    protected get renderedInputControlElement(): HTMLElement | undefined {\n        return this._renderedInputControlElement;\n    }\n\n    protected get inputControlContainerElement(): HTMLElement {\n        return this._inputControlContainerElement;\n    }\n\n    protected overrideInternalRender(): HTMLElement | undefined {\n        let hostConfig = this.hostConfig;\n\n        this._outerContainerElement = document.createElement(\"div\");\n        this._outerContainerElement.style.display = \"flex\";\n        this._outerContainerElement.style.flexDirection = \"column\";\n\n        let renderedInputControlId = Utils.generateUniqueId();\n\n        if (this.label) {\n            let labelRichTextBlock = new RichTextBlock();\n            labelRichTextBlock.setParent(this);\n            labelRichTextBlock.forElementId = renderedInputControlId;\n\n            let labelInline = new TextRun(this.label);\n            labelRichTextBlock.addInline(labelInline);\n\n            if (this.isRequired) {\n                labelInline.init(hostConfig.inputs.label.requiredInputs);\n\n                let isRequiredCueInline = new TextRun(hostConfig.inputs.label.requiredInputs.suffix);\n                isRequiredCueInline.color = hostConfig.inputs.label.requiredInputs.suffixColor;\n                isRequiredCueInline.ariaHidden = true;\n\n                labelRichTextBlock.addInline(isRequiredCueInline);\n            }\n            else {\n                labelInline.init(hostConfig.inputs.label.optionalInputs);\n            }\n\n            this._renderedLabelElement = labelRichTextBlock.render();\n\n            if (this._renderedLabelElement) {\n                this._renderedLabelElement.id = Utils.generateUniqueId();\n                this._renderedLabelElement.style.marginBottom = hostConfig.getEffectiveSpacing(hostConfig.inputs.label.inputSpacing) + \"px\";\n\n                this._outerContainerElement.appendChild(this._renderedLabelElement);\n            }\n        }\n\n        this._inputControlContainerElement = document.createElement(\"div\");\n        this._inputControlContainerElement.className = hostConfig.makeCssClassName(\"ac-input-container\");\n        this._inputControlContainerElement.style.display = \"flex\";\n\n        if (this.height === \"stretch\") {\n            this._inputControlContainerElement.style.alignItems = \"stretch\";\n            this._inputControlContainerElement.style.flex = \"1 1 auto\";\n        }\n\n        this._renderedInputControlElement = this.internalRender();\n\n        if (this._renderedInputControlElement) {\n            this._renderedInputControlElement.id = renderedInputControlId;\n            this._renderedInputControlElement.style.minWidth = \"0px\";\n\n            if (this.isNullable && this.isRequired) {\n                this._renderedInputControlElement.setAttribute(\"aria-required\", \"true\");\n                this._renderedInputControlElement.classList.add(hostConfig.makeCssClassName(\"ac-input-required\"));\n            }\n\n            this._inputControlContainerElement.appendChild(this._renderedInputControlElement);\n            this._outerContainerElement.appendChild(this._inputControlContainerElement);\n\n            this.updateInputControlAriaLabelledBy();\n\n            return this._outerContainerElement;\n        }\n\n        return undefined;\n    }\n\n    protected valueChanged() {\n        if (this.isValid()) {\n            this.resetValidationFailureCue();\n        }\n\n        if (this.onValueChanged) {\n            this.onValueChanged(this);\n        }\n\n        raiseInputValueChangedEvent(this);\n    }\n\n    protected resetValidationFailureCue() {\n        if (this.renderedInputControlElement) {\n            this.renderedInputControlElement.classList.remove(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\n\n            this.updateInputControlAriaLabelledBy();\n\n            if (this._renderedErrorMessageElement) {\n                this._outerContainerElement.removeChild(this._renderedErrorMessageElement);\n\n                this._renderedErrorMessageElement = undefined;\n            }\n        }\n    }\n\n    protected showValidationErrorMessage() {\n        if (this.renderedElement && this.errorMessage && GlobalSettings.displayInputValidationErrors) {\n            let errorMessageTextBlock = new TextBlock();\n            errorMessageTextBlock.setParent(this);\n            errorMessageTextBlock.text = this.errorMessage;\n            errorMessageTextBlock.wrap = true;\n            errorMessageTextBlock.init(this.hostConfig.inputs.errorMessage);\n\n            this._renderedErrorMessageElement = errorMessageTextBlock.render();\n\n            if (this._renderedErrorMessageElement) {\n                this._renderedErrorMessageElement.id = Utils.generateUniqueId();\n                this._outerContainerElement.appendChild(this._renderedErrorMessageElement);\n\n                this.updateInputControlAriaLabelledBy();\n            }\n        }\n    }\n\n    onValueChanged: (sender: Input) => void;\n\n    labelledBy?: string;\n\n    abstract isSet(): boolean;\n\n    focus() {\n        if (this._renderedInputControlElement) {\n            this._renderedInputControlElement.focus();\n        }\n    }\n\n    isValid(): boolean {\n        return true;\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (!this.id) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.inputsMustHaveUniqueId());\n        }\n\n        if (this.isRequired) {\n            if (!this.label) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.RequiredInputsShouldHaveLabel,\n                    \"Required inputs should have a label\");\n            }\n\n            if (!this.errorMessage) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.RequiredInputsShouldHaveErrorMessage,\n                    \"Required inputs should have an error message\");\n            }\n        }\n    }\n\n    validateValue(): boolean {\n        this.resetValidationFailureCue();\n\n        let result = this.isRequired ? this.isSet() && this.isValid() : this.isValid();\n\n        if (!result && this.renderedInputControlElement) {\n            this.renderedInputControlElement.classList.add(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\n\n            this.showValidationErrorMessage();\n        }\n\n        return result;\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return [ this ];\n    }\n\n    abstract get value(): any;\n\n    get isInteractive(): boolean {\n        return true;\n    }\n}\n\nexport class TextInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n    static readonly maxLengthProperty = new NumProperty(Versions.v1_0, \"maxLength\");\n    static readonly isMultilineProperty = new BoolProperty(Versions.v1_0, \"isMultiline\", false);\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly styleProperty = new EnumProperty(Versions.v1_0, \"style\", Enums.InputTextStyle, Enums.InputTextStyle.Text);\n    static readonly inlineActionProperty = new ActionProperty(Versions.v1_0, \"inlineAction\", [ \"Action.ShowCard\" ]);\n    static readonly regexProperty = new StringProperty(Versions.v1_3, \"regex\", true);\n\n    @property(TextInput.valueProperty)\n    defaultValue?: string;\n\n    @property(TextInput.maxLengthProperty)\n    maxLength?: number;\n\n    @property(TextInput.isMultilineProperty)\n    isMultiline: boolean = false;\n\n    @property(TextInput.placeholderProperty)\n    placeholder?: string;\n\n    @property(TextInput.styleProperty)\n    style: Enums.InputTextStyle = Enums.InputTextStyle.Text;\n\n    @property(TextInput.inlineActionProperty)\n    inlineAction?: Action;\n\n    @property(TextInput.regexProperty)\n    regex?: string;\n\n    //#endregion\n\n    private setupInput(input: HTMLInputElement | HTMLTextAreaElement) {\n        input.style.flex = \"1 1 auto\";\n        input.tabIndex = 0;\n\n        if (this.placeholder) {\n            input.placeholder = this.placeholder;\n            input.setAttribute(\"aria-label\", this.placeholder)\n        }\n\n        if (this.defaultValue) {\n            input.value = this.defaultValue;\n        }\n\n        if (this.maxLength && this.maxLength > 0) {\n            input.maxLength = this.maxLength;\n        }\n\n        input.oninput = () => { this.valueChanged(); }\n        input.onkeypress = (e: KeyboardEvent) => {\n            // Ctrl+Enter pressed\n            if (e.ctrlKey && e.code === \"Enter\" && this.inlineAction) {\n                this.inlineAction.execute();\n            }\n        }\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let result: HTMLInputElement | HTMLTextAreaElement;\n\n        if (this.isMultiline) {\n            result = document.createElement(\"textarea\");\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\", \"ac-multiline\");\n\n            if (this.height === \"stretch\") {\n                result.style.height = \"initial\";\n            }\n        }\n        else {\n            result = document.createElement(\"input\");\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\");\n            result.type = Enums.InputTextStyle[this.style].toLowerCase();\n        }\n\n        this.setupInput(result);\n\n        return result;\n    }\n\n    protected overrideInternalRender(): HTMLElement | undefined {\n        let renderedInputControl = super.overrideInternalRender();\n\n        if (this.inlineAction) {\n            let button = document.createElement(\"button\");\n            button.className = this.hostConfig.makeCssClassName(\"ac-inlineActionButton\");\n            button.onclick = (e) => {\n                e.preventDefault();\n                e.cancelBubble = true;\n\n                if (this.inlineAction) {\n                    this.inlineAction.execute();\n                }\n            };\n\n            if (this.inlineAction.iconUrl) {\n                button.classList.add(\"iconOnly\");\n\n                let icon = document.createElement(\"img\");\n                icon.style.height = \"100%\";\n                icon.setAttribute(\"role\", \"presentation\");\n\n                // The below trick is necessary as a workaround in Chrome where the icon is initially displayed\n                // at its native size then resized to 100% of the button's height. This cfreates an unpleasant\n                // flicker. On top of that, Chrome's flex implementation fails to prperly re-layout the button\n                // after the image has loaded and been gicven its final size. The below trick also fixes that.\n                icon.style.display = \"none\";\n                icon.onload = () => {\n                    icon.style.removeProperty(\"display\");\n                };\n                icon.onerror = () => {\n                    button.removeChild(icon);\n                    button.classList.remove(\"iconOnly\");\n                    button.classList.add(\"textOnly\");\n                    button.textContent = this.inlineAction && this.inlineAction.title ? this.inlineAction.title : Strings.defaults.inlineActionTitle();\n                }\n\n                icon.src = this.inlineAction.iconUrl;\n\n                button.appendChild(icon);\n                button.title = this.inlineAction.title ? this.inlineAction.title : Strings.defaults.inlineActionTitle();\n            }\n            else {\n                button.classList.add(\"textOnly\");\n                button.textContent = this.inlineAction.title ? this.inlineAction.title : Strings.defaults.inlineActionTitle();\n            }\n\n            button.style.marginLeft = \"8px\";\n\n            this.inputControlContainerElement.appendChild(button);\n        }\n\n        return renderedInputControl;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Text\";\n    }\n\n    getActionById(id: string) {\n        let result = super.getActionById(id);\n\n        if (!result && this.inlineAction) {\n            result = this.inlineAction.getActionById(id);\n        }\n\n        return result;\n    }\n\n    isSet(): boolean {\n        return this.value ? true : false;\n    }\n\n    isValid(): boolean {\n        if (!this.value) {\n            return true;\n        }\n\n        if (this.regex) {\n            return new RegExp(this.regex, \"g\").test(this.value);\n        }\n\n        return true;\n    }\n\n    get value(): string | undefined {\n        if (this.renderedInputControlElement) {\n            if (this.isMultiline) {\n                return (<HTMLTextAreaElement>this.renderedInputControlElement).value;\n            }\n            else {\n                return (<HTMLInputElement>this.renderedInputControlElement).value;\n            }\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n\nexport class ToggleInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\n    static readonly valueOnProperty = new StringProperty(Versions.v1_0, \"valueOn\", true, undefined, \"true\", (sender: SerializableObject) => { return \"true\"; });\n    static readonly valueOffProperty = new StringProperty(Versions.v1_0, \"valueOff\", true, undefined, \"false\", (sender: SerializableObject) => { return \"false\"; });\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\n\n    @property(ToggleInput.valueProperty)\n    defaultValue?: string;\n\n    @property(ToggleInput.titleProperty)\n    title?: string;\n\n    @property(ToggleInput.valueOnProperty)\n    valueOn: string = \"true\";\n\n    @property(ToggleInput.valueOffProperty)\n    valueOff: string = \"false\";\n\n    @property(ToggleInput.wrapProperty)\n    wrap: boolean = false;\n\n    //#endregion\n\n    private _checkboxInputElement: HTMLInputElement;\n    private _checkboxInputLabelElement: HTMLElement | undefined;\n\n    protected updateInputControlAriaLabelledBy() {\n        if (this._checkboxInputElement) {\n            let joinedLabelIds = this.getAllLabelIds().join(\" \");\n\n            if (this._checkboxInputLabelElement && this._checkboxInputLabelElement.id) {\n                joinedLabelIds += \" \" + this._checkboxInputLabelElement.id;\n            }\n\n            if (joinedLabelIds) {\n                this._checkboxInputElement.setAttribute(\"aria-labelledby\", joinedLabelIds);\n            }\n            else {\n                this._checkboxInputElement.removeAttribute(\"aria-labelledby\");\n            }\n        }\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element = document.createElement(\"div\");\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-toggleInput\");\n        element.style.width = \"100%\";\n        element.style.display = \"flex\";\n        element.style.alignItems = \"center\";\n\n        this._checkboxInputElement = document.createElement(\"input\");\n        this._checkboxInputElement.id = Utils.generateUniqueId();\n        this._checkboxInputElement.type = \"checkbox\";\n        this._checkboxInputElement.style.display = \"inline-block\";\n        this._checkboxInputElement.style.verticalAlign = \"middle\";\n        this._checkboxInputElement.style.margin = \"0\";\n        this._checkboxInputElement.style.flex = \"0 0 auto\";\n\n        if (this.title) {\n            this._checkboxInputElement.setAttribute(\"aria-label\", this.title);\n        }\n\n        if (this.isRequired) {\n            this._checkboxInputElement.setAttribute(\"aria-required\", \"true\");\n        }\n\n        this._checkboxInputElement.tabIndex = 0;\n\n        if (this.defaultValue == this.valueOn) {\n            this._checkboxInputElement.checked = true;\n        }\n\n        this._checkboxInputElement.onchange = () => { this.valueChanged(); }\n\n        Utils.appendChild(element, this._checkboxInputElement);\n\n        if (this.title || this.isDesignMode()) {\n            let label = new TextBlock();\n            label.setParent(this);\n            label.forElementId = this._checkboxInputElement.id;\n            label.hostConfig = this.hostConfig;\n            label.text = !this.title ? this.getJsonTypeName() : this.title;\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\n            label.wrap = this.wrap;\n\n            this._checkboxInputLabelElement = label.render();\n\n            if (this._checkboxInputLabelElement) {\n                this._checkboxInputLabelElement.id = Utils.generateUniqueId();\n                this._checkboxInputLabelElement.style.display = \"inline-block\";\n                this._checkboxInputLabelElement.style.flex = \"1 1 auto\";\n                this._checkboxInputLabelElement.style.marginLeft = \"6px\";\n                this._checkboxInputLabelElement.style.verticalAlign = \"middle\";\n\n                let spacerElement = document.createElement(\"div\");\n                spacerElement.style.width = \"6px\";\n\n                Utils.appendChild(element, spacerElement);\n                Utils.appendChild(element, this._checkboxInputLabelElement);\n            }\n        }\n\n        return element;\n    }\n\n    protected get isNullable(): boolean {\n        return false;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Toggle\";\n    }\n\n    focus() {\n        if (this._checkboxInputElement) {\n            this._checkboxInputElement.focus();\n        }\n    }\n\n    isSet(): boolean {\n        if (this.isRequired) {\n            return this.value === this.valueOn;\n        }\n\n        return this.value ? true : false;\n    }\n\n    get value(): string | undefined {\n        if (this._checkboxInputElement) {\n            return this._checkboxInputElement.checked ? this.valueOn : this.valueOff;\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n\nexport class Choice extends SerializableObject {\n    //#region Schema\n\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n\n    @property(Choice.titleProperty)\n    title?: string;\n\n    @property(Choice.valueProperty)\n    value?: string;\n\n    //#endregion\n\n    protected getSchemaKey(): string {\n        return \"Choice\";\n    }\n\n    constructor(title?: string, value?: string) {\n        super();\n\n        this.title = title;\n        this.value = value;\n    }\n}\n\nexport class ChoiceSetInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n    static readonly choicesProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"choices\", Choice);\n    static readonly styleProperty = new ValueSetProperty(\n        Versions.v1_0,\n        \"style\",\n        [\n            { value: \"compact\" },\n            { value: \"expanded\" }\n        ],\n        \"compact\");\n    static readonly isMultiSelectProperty = new BoolProperty(Versions.v1_0, \"isMultiSelect\", false);\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\n\n    @property(ChoiceSetInput.valueProperty)\n    defaultValue?: string;\n\n    @property(ChoiceSetInput.styleProperty)\n    style?: \"compact\" | \"expanded\";\n\n    get isCompact(): boolean {\n        return this.style !== \"expanded\";\n    }\n\n    set isCompact(value: boolean) {\n        this.style = value ? undefined : \"expanded\";\n    }\n\n    @property(ChoiceSetInput.isMultiSelectProperty)\n    isMultiSelect: boolean = false;\n\n    @property(ChoiceSetInput.placeholderProperty)\n    placeholder?: string;\n\n    @property(ChoiceSetInput.wrapProperty)\n    wrap: boolean = false;\n\n    @property(ChoiceSetInput.choicesProperty)\n    choices: Choice[] = [];\n\n    //#endregion\n\n    private static uniqueCategoryCounter = 0;\n\n    private static getUniqueCategoryName(): string {\n        let uniqueCategoryName = \"__ac-category\" + ChoiceSetInput.uniqueCategoryCounter;\n\n        ChoiceSetInput.uniqueCategoryCounter++;\n\n        return uniqueCategoryName;\n    }\n\n    private _uniqueCategoryName: string;\n    private _selectElement: HTMLSelectElement;\n    private _toggleInputs: HTMLInputElement[] | undefined;\n    private _labels: Array<HTMLElement | undefined>;\n\n    // Make sure `aria-current` is applied to the currently-selected item\n    private internalApplyAriaCurrent(): void {\n        const options = this._selectElement.options;\n\n        if (options) {\n            for (let i = 0; i < options.length; i++) {\n                if (options[i].selected) {\n                    options[i].setAttribute(\"aria-current\", \"true\");\n                }\n                else {\n                    options[i].removeAttribute(\"aria-current\");\n                }\n            }\n        }\n    }\n\n    private renderCompoundInput(cssClassName: string, type: \"checkbox\" | \"radio\", defaultValues: string[] | undefined): HTMLElement {\n        let element = document.createElement(\"div\");\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", cssClassName);\n        element.style.width = \"100%\";\n\n        this._toggleInputs = [];\n        this._labels = [];\n\n        for (let choice of this.choices) {\n            let input = document.createElement(\"input\");\n            input.id = Utils.generateUniqueId();\n            input.type = type;\n            input.style.margin = \"0\";\n            input.style.display = \"inline-block\";\n            input.style.verticalAlign = \"middle\";\n            input.style.flex = \"0 0 auto\";\n            input.name = this.id ? this.id : this._uniqueCategoryName;\n\n            if (this.isRequired) {\n                input.setAttribute(\"aria-required\", \"true\");\n            }\n\n            if (choice.value) {\n                input.value = choice.value;\n            }\n\n            if (choice.title) {\n                input.setAttribute(\"aria-label\", choice.title);\n            }\n\n            if (defaultValues && choice.value) {\n                if (defaultValues.indexOf(choice.value) >= 0) {\n                    input.checked = true;\n                }\n            }\n\n            input.onchange = () => { this.valueChanged(); }\n\n            this._toggleInputs.push(input);\n\n            let compoundInput = document.createElement(\"div\");\n            compoundInput.style.display = \"flex\";\n            compoundInput.style.alignItems = \"center\";\n\n            Utils.appendChild(compoundInput, input);\n\n            let label = new TextBlock();\n            label.setParent(this);\n            label.forElementId = input.id;\n            label.hostConfig = this.hostConfig;\n            label.text = choice.title ? choice.title : \"Choice \" + this._toggleInputs.length;\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\n            label.wrap = this.wrap;\n\n            let labelElement = label.render();\n\n            this._labels.push(labelElement);\n\n            if (labelElement) {\n                labelElement.id = Utils.generateUniqueId();\n                labelElement.style.display = \"inline-block\";\n                labelElement.style.flex = \"1 1 auto\";\n                labelElement.style.marginLeft = \"6px\";\n                labelElement.style.verticalAlign = \"middle\";\n\n                let spacerElement = document.createElement(\"div\");\n                spacerElement.style.width = \"6px\";\n\n                Utils.appendChild(compoundInput, spacerElement);\n                Utils.appendChild(compoundInput, labelElement);\n            }\n\n            Utils.appendChild(element, compoundInput);\n        }\n\n        return element;\n    }\n\n    protected updateInputControlAriaLabelledBy() {\n        if ((this.isMultiSelect || this.style === \"expanded\") && this._toggleInputs && this._labels) {\n            let labelIds: string[] = this.getAllLabelIds();\n\n            for (let i = 0; i < this._toggleInputs.length; i++) {\n                let joinedLabelIds = labelIds.join(\" \");\n                let label = this._labels[i];\n\n                if (label && label.id) {\n                    joinedLabelIds += \" \" + label.id;\n                }\n\n                if (joinedLabelIds) {\n                    this._toggleInputs[i].setAttribute(\"aria-labelledby\", joinedLabelIds);\n                }\n                else {\n                    this._toggleInputs[i].removeAttribute(\"aria-labelledby\");\n                }\n            }\n        }\n        else {\n            super.updateInputControlAriaLabelledBy();\n        }\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        this._uniqueCategoryName = ChoiceSetInput.getUniqueCategoryName();\n\n        if (this.isMultiSelect) {\n            // Render as a list of toggle inputs\n            return this.renderCompoundInput(\n                \"ac-choiceSetInput-multiSelect\",\n                \"checkbox\",\n                this.defaultValue ? this.defaultValue.split(this.hostConfig.choiceSetInputValueSeparator) : undefined);\n        }\n        else {\n            if (this.style === \"expanded\") {\n                // Render as a series of radio buttons\n                return this.renderCompoundInput(\n                    \"ac-choiceSetInput-expanded\",\n                    \"radio\",\n                    this.defaultValue ? [ this.defaultValue ] : undefined);\n            }\n            else {\n                // Render as a combo box\n                this._selectElement = document.createElement(\"select\");\n                this._selectElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-multichoiceInput\", \"ac-choiceSetInput-compact\");\n                this._selectElement.style.width = \"100%\";\n\n                let option = document.createElement(\"option\");\n                option.selected = true;\n                option.disabled = true;\n                option.hidden = true;\n                option.value = \"\";\n\n                if (this.placeholder) {\n                    option.text = this.placeholder;\n                }\n\n                Utils.appendChild(this._selectElement, option);\n\n                for (let choice of this.choices) {\n                    let option = document.createElement(\"option\");\n                    option.value = <string>choice.value;\n                    option.text = <string>choice.title;\n                    option.setAttribute(\"aria-label\", <string>choice.title);\n\n                    if (choice.value == this.defaultValue) {\n                        option.selected = true;\n                    }\n\n                    Utils.appendChild(this._selectElement, option);\n                }\n\n                this._selectElement.onchange = () => {\n                    this.internalApplyAriaCurrent();\n                    this.valueChanged();\n                }\n\n                this.internalApplyAriaCurrent();\n\n                return this._selectElement;\n            }\n        }\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.ChoiceSet\";\n    }\n\n    focus() {\n        if (this._toggleInputs && (this.isMultiSelect || this.style === \"expanded\")) {\n            if (this._toggleInputs.length > 0) {\n                this._toggleInputs[0].focus();\n            }\n        }\n        else {\n            super.focus();\n        }\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (this.choices.length == 0) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.CollectionCantBeEmpty,\n                Strings.errors.choiceSetMustHaveAtLeastOneChoice());\n        }\n\n        for (let choice of this.choices) {\n            if (!choice.title || !choice.value) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.PropertyCantBeNull,\n                    Strings.errors.choiceSetChoicesMustHaveTitleAndValue());\n            }\n        }\n    }\n\n    isSet(): boolean {\n        return this.value ? true : false;\n    }\n\n    get value(): string | undefined {\n        if (!this.isMultiSelect) {\n            if (this.isCompact) {\n                if (this._selectElement) {\n                    return this._selectElement.selectedIndex > 0 ? this._selectElement.value : undefined;\n                }\n\n                return undefined;\n            }\n            else {\n                if (!this._toggleInputs || this._toggleInputs.length == 0) {\n                    return undefined;\n                }\n\n                for (let toggleInput of this._toggleInputs) {\n                    if (toggleInput.checked) {\n                        return toggleInput.value;\n                    }\n                }\n\n                return undefined;\n            }\n        }\n        else {\n            if (!this._toggleInputs || this._toggleInputs.length == 0) {\n                return undefined;\n            }\n\n            let result: string = \"\";\n\n            for (let toggleInput of this._toggleInputs) {\n                if (toggleInput.checked) {\n                    if (result != \"\") {\n                        result += this.hostConfig.choiceSetInputValueSeparator;\n                    }\n\n                    result += toggleInput.value;\n                }\n            }\n\n            return result ? result : undefined;\n        }\n    }\n}\n\nexport class NumberInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new NumProperty(Versions.v1_0, \"value\");\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly minProperty = new NumProperty(Versions.v1_0, \"min\");\n    static readonly maxProperty = new NumProperty(Versions.v1_0, \"max\");\n\n    @property(NumberInput.valueProperty)\n    defaultValue?: number;\n\n    @property(NumberInput.minProperty)\n    min?: number;\n\n    @property(NumberInput.maxProperty)\n    max?: number;\n\n    @property(NumberInput.placeholderProperty)\n    placeholder?: string;\n\n    //#endregion\n\n    private _numberInputElement: HTMLInputElement;\n\n    protected internalRender(): HTMLElement | undefined {\n        this._numberInputElement = document.createElement(\"input\");\n        this._numberInputElement.setAttribute(\"type\", \"number\");\n\n        if (this.min !== undefined) {\n            this._numberInputElement.setAttribute(\"min\", this.min.toString());\n        }\n\n        if (this.max !== undefined) {\n            this._numberInputElement.setAttribute(\"max\", this.max.toString());\n        }\n\n        this._numberInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-numberInput\");\n        this._numberInputElement.style.width = \"100%\";\n        this._numberInputElement.tabIndex = 0;\n\n        if (this.defaultValue !== undefined) {\n            this._numberInputElement.valueAsNumber = this.defaultValue;\n        }\n\n        if (this.placeholder) {\n            this._numberInputElement.placeholder = this.placeholder;\n            this._numberInputElement.setAttribute(\"aria-label\", this.placeholder);\n        }\n\n        this._numberInputElement.oninput = () => { this.valueChanged(); }\n\n        return this._numberInputElement;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Number\";\n    }\n\n    isSet(): boolean {\n        return this.value !== undefined && !isNaN(this.value);\n    }\n\n    isValid(): boolean {\n        if (this.value === undefined) {\n            return !this.isRequired;\n        }\n\n        let result = true;\n\n        if (this.min !== undefined) {\n            result = result && (this.value >= this.min);\n        }\n\n        if (this.max !== undefined) {\n            result = result && (this.value <= this.max);\n        }\n\n        return result;\n    }\n\n    get value(): number | undefined {\n        return this._numberInputElement ? this._numberInputElement.valueAsNumber : undefined;\n    }\n}\n\nexport class DateInput extends Input {\n    //#region Schema\n\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly minProperty = new StringProperty(Versions.v1_0, \"min\");\n    static readonly maxProperty = new StringProperty(Versions.v1_0, \"max\");\n\n    @property(DateInput.valueProperty)\n    defaultValue?: string;\n\n    @property(DateInput.minProperty)\n    min?: string;\n\n    @property(DateInput.maxProperty)\n    max?: string;\n\n    @property(DateInput.placeholderProperty)\n    placeholder?: string;\n\n    //#endregion\n\n    private _dateInputElement: HTMLInputElement;\n\n    protected internalRender(): HTMLElement | undefined {\n        this._dateInputElement = document.createElement(\"input\");\n        this._dateInputElement.setAttribute(\"type\", \"date\");\n\n        if (this.min) {\n            this._dateInputElement.setAttribute(\"min\", this.min);\n        }\n\n        if (this.max) {\n            this._dateInputElement.setAttribute(\"max\", this.max);\n        }\n\n        if (this.placeholder) {\n            this._dateInputElement.placeholder = this.placeholder;\n            this._dateInputElement.setAttribute(\"aria-label\", this.placeholder);\n        }\n\n        this._dateInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-dateInput\");\n        this._dateInputElement.style.width = \"100%\";\n\n        this._dateInputElement.oninput = () => { this.valueChanged(); }\n\n        if (this.defaultValue) {\n            this._dateInputElement.value = this.defaultValue;\n        }\n\n        return this._dateInputElement;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Date\";\n    }\n\n    isSet(): boolean {\n        return this.value ? true : false;\n    }\n\n    isValid(): boolean {\n        if (!this.value) {\n            return !this.isRequired;\n        }\n\n        let valueAsDate = new Date(this.value);\n\n        let result = true;\n\n        if (this.min) {\n            let minDate = new Date(this.min);\n\n            result = result && (valueAsDate >= minDate);\n        }\n\n        if (this.max) {\n            let maxDate = new Date(this.max);\n\n            result = result && (valueAsDate <= maxDate);\n        }\n\n        return result;\n    }\n\n    get value(): string | undefined {\n        return this._dateInputElement ? this._dateInputElement.value : undefined;\n    }\n}\n\nexport class TimeProperty extends CustomProperty<string | undefined> {\n    constructor(readonly targetVersion: Version, readonly name: string) {\n        super(\n            targetVersion,\n            name,\n            (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n                let value = source[property.name];\n\n                if (typeof value === \"string\" && value && /^[0-9]{2}:[0-9]{2}$/.test(value)) {\n                    return value;\n                }\n\n                return undefined;\n            },\n            (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) => {\n                context.serializeValue(target, property.name, value);\n            });\n    }\n}\n\nexport class TimeInput extends Input {\n    private static convertTimeStringToDate(timeString: string): Date {\n        return new Date(\"1973-09-04T\" + timeString + \":00Z\");\n    }\n\n    //#region Schema\n\n    static readonly valueProperty = new TimeProperty(Versions.v1_0, \"value\");\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\n    static readonly minProperty = new TimeProperty(Versions.v1_0, \"min\");\n    static readonly maxProperty = new TimeProperty(Versions.v1_0, \"max\");\n\n    @property(TimeInput.valueProperty)\n    defaultValue?: string;\n\n    @property(TimeInput.minProperty)\n    min?: string;\n\n    @property(TimeInput.maxProperty)\n    max?: string;\n\n    @property(TimeInput.placeholderProperty)\n    placeholder?: string;\n\n    //#endregion\n\n    private _timeInputElement: HTMLInputElement;\n\n    protected internalRender(): HTMLElement | undefined {\n        this._timeInputElement = document.createElement(\"input\");\n        this._timeInputElement.setAttribute(\"type\", \"time\");\n        this._timeInputElement.setAttribute(\"min\", <string>this.min);\n        this._timeInputElement.setAttribute(\"max\", <string>this.max);\n        this._timeInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-timeInput\");\n        this._timeInputElement.style.width = \"100%\";\n        this._timeInputElement.oninput = () => { this.valueChanged(); }\n\n        if (this.placeholder) {\n            this._timeInputElement.placeholder = this.placeholder;\n            this._timeInputElement.setAttribute(\"aria-label\", this.placeholder);\n        }\n\n        if (this.defaultValue) {\n            this._timeInputElement.value = this.defaultValue;\n        }\n\n        return this._timeInputElement;\n    }\n\n    getJsonTypeName(): string {\n        return \"Input.Time\";\n    }\n\n    isSet(): boolean {\n        return this.value ? true : false;\n    }\n\n    isValid(): boolean {\n        if (!this.value) {\n            return !this.isRequired;\n        }\n\n        let valueAsDate = TimeInput.convertTimeStringToDate(this.value);\n\n        let result = true;\n\n        if (this.min) {\n            let minDate = TimeInput.convertTimeStringToDate(this.min);\n\n            result = result && (valueAsDate >= minDate);\n        }\n\n        if (this.max) {\n            let maxDate = TimeInput.convertTimeStringToDate(this.max);\n\n            result = result && (valueAsDate <= maxDate);\n        }\n\n        return result;\n    }\n\n    get value(): string | undefined {\n        return this._timeInputElement ? this._timeInputElement.value : undefined;\n    }\n}\n\nconst enum ActionButtonState {\n    Normal,\n    Expanded,\n    Subdued\n}\n\nclass ActionButton {\n    private _parentContainerStyle: string;\n    private _state: ActionButtonState = ActionButtonState.Normal;\n\n    private updateCssStyle() {\n        if (this.action.parent && this.action.renderedElement) {\n            let hostConfig = this.action.parent.hostConfig;\n\n            this.action.renderedElement.className = hostConfig.makeCssClassName(\"ac-pushButton\");\n\n            if (this._parentContainerStyle) {\n                this.action.renderedElement.classList.add(\"style-\" + this._parentContainerStyle);\n            }\n\n            this.action.updateActionButtonCssStyle(this.action.renderedElement, this._state);\n\n            this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"expanded\"));\n            this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"subdued\"));\n\n            switch (this._state) {\n                case ActionButtonState.Expanded:\n                    this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"expanded\"));\n                    break;\n                case ActionButtonState.Subdued:\n                    this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"subdued\"));\n                    break;\n            }\n\n            if (this.action.style) {\n                if (this.action.style === Enums.ActionStyle.Positive) {\n                    this.action.renderedElement.classList.add(...hostConfig.makeCssClassNames(\"primary\", \"style-positive\"));\n                }\n                else {\n                    this.action.renderedElement.classList.add(...hostConfig.makeCssClassNames(\"style-\" + this.action.style.toLowerCase()));\n                }\n            }\n        }\n    }\n\n    readonly action: Action;\n\n    constructor(action: Action, parentContainerStyle: string) {\n        this.action = action;\n        this._parentContainerStyle = parentContainerStyle;\n    }\n\n    onClick?: (actionButton: ActionButton) => void;\n\n    render() {\n        this.action.render();\n\n        if (this.action.renderedElement) {\n            this.action.renderedElement.onclick = (e) => {\n                e.preventDefault();\n                e.cancelBubble = true;\n\n                this.click();\n            };\n\n            this.updateCssStyle();\n        }\n    }\n\n    click() {\n        if (this.onClick !== undefined) {\n            this.onClick(this);\n        }\n    }\n\n    get state(): ActionButtonState {\n        return this._state;\n    }\n\n    set state(value: ActionButtonState) {\n        this._state = value;\n\n        this.updateCssStyle();\n    }\n}\n\nexport type ActionType = { new(): Action };\n\nexport abstract class Action extends CardObject {\n    //#region Schema\n\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\n    static readonly iconUrlProperty = new StringProperty(Versions.v1_1, \"iconUrl\");\n    static readonly styleProperty = new ValueSetProperty(\n        Versions.v1_2,\n        \"style\",\n        [\n            { value: Enums.ActionStyle.Default },\n            { value: Enums.ActionStyle.Positive },\n            { value: Enums.ActionStyle.Destructive }\n        ],\n        Enums.ActionStyle.Default);\n\n    @property(Action.titleProperty)\n    title?: string;\n\n    @property(Action.iconUrlProperty)\n    iconUrl?: string;\n\n    @property(Action.styleProperty)\n    style: string = Enums.ActionStyle.Default;\n\n    //#endregion\n\n    private _actionCollection?: ActionCollection; // hold the reference to its action collection\n\n    protected getDefaultSerializationContext(): BaseSerializationContext {\n        return new SerializationContext();\n    }\n\n    protected addCssClasses(element: HTMLElement) {\n        // Do nothing in base implementation\n    }\n\n    protected internalGetReferencedInputs(): Dictionary<Input> {\n        return {};\n    }\n\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\n        // Do nothing in base implementation\n    }\n\n    protected internalValidateInputs(referencedInputs: Dictionary<Input> | undefined): Input[] {\n        let result: Input[] = [];\n\n        if (referencedInputs) {\n            for (let key of Object.keys(referencedInputs)) {\n                let input = referencedInputs[key];\n\n                if (!input.validateValue()) {\n                    result.push(input);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return context.actionRegistry.findByName(this.getJsonTypeName()) !== undefined;\n    }\n\n    protected raiseExecuteActionEvent() {\n        if (this.onExecute) {\n            this.onExecute(this);\n        }\n\n        raiseExecuteActionEvent(this);\n    }\n\n    accessibleTitle?: string;\n    expanded?: boolean;\n\n    onExecute: (sender: Action) => void;\n\n    getHref(): string | undefined {\n        return \"\";\n    }\n\n    getAriaRole(): string {\n        return \"button\";\n    }\n\n    updateActionButtonCssStyle(actionButtonElement: HTMLElement, buttonState: ActionButtonState = ActionButtonState.Normal): void {\n        // Do nothing in base implementation\n    }\n\n    parse(source: any, context?: SerializationContext) {\n        return super.parse(source, context ? context : new SerializationContext());\n    }\n\n    render(baseCssClass: string = \"ac-pushButton\") {\n        // Cache hostConfig for perf\n        let hostConfig = this.hostConfig;\n\n        let buttonElement = document.createElement(\"button\");\n\n        this.addCssClasses(buttonElement);\n\n        if (this.accessibleTitle) {\n            buttonElement.setAttribute(\"aria-label\", this.accessibleTitle);\n        }\n        else if (this.title) {\n            buttonElement.setAttribute(\"aria-label\", this.title);\n        }\n\n        if (this.expanded != undefined) {\n            buttonElement.setAttribute(\"aria-expanded\", this.expanded.toString())\n        }\n\n        buttonElement.type = \"button\";\n        buttonElement.style.display = \"flex\";\n        buttonElement.style.alignItems = \"center\";\n        buttonElement.style.justifyContent = \"center\";\n\n        buttonElement.setAttribute(\"role\", this.getAriaRole());\n\n        let titleElement = document.createElement(\"div\");\n        titleElement.style.overflow = \"hidden\";\n        titleElement.style.textOverflow = \"ellipsis\";\n\n        if (!(hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle || hostConfig.actions.allowTitleToWrap)) {\n            titleElement.style.whiteSpace = \"nowrap\";\n        }\n\n        if (this.title) {\n            titleElement.innerText = this.title;\n        }\n\n        if (!this.iconUrl) {\n            buttonElement.classList.add(\"noIcon\");\n\n            buttonElement.appendChild(titleElement);\n        }\n        else {\n            let iconElement = document.createElement(\"img\");\n            iconElement.src = this.iconUrl;\n            iconElement.style.width = hostConfig.actions.iconSize + \"px\";\n            iconElement.style.height = hostConfig.actions.iconSize + \"px\";\n            iconElement.style.flex = \"0 0 auto\";\n\n            if (hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle) {\n                buttonElement.classList.add(\"iconAbove\");\n                buttonElement.style.flexDirection = \"column\";\n\n                if (this.title) {\n                    iconElement.style.marginBottom = \"6px\";\n                }\n            }\n            else {\n                buttonElement.classList.add(\"iconLeft\");\n\n                iconElement.style.maxHeight = \"100%\";\n\n                if (this.title) {\n                    iconElement.style.marginRight = \"6px\";\n                }\n            }\n\n            buttonElement.appendChild(iconElement);\n            buttonElement.appendChild(titleElement);\n        }\n\n        this._renderedElement = buttonElement;\n    }\n\n    execute() {\n        if (this._actionCollection) {\n            this._actionCollection.actionExecuted(this);\n        }\n\n        this.raiseExecuteActionEvent();\n    }\n\n    prepareForExecution(): boolean {\n        let referencedInputs = this.getReferencedInputs();\n        let invalidInputs = this.internalValidateInputs(referencedInputs);\n\n        if (invalidInputs.length > 0) {\n            invalidInputs[0].focus();\n\n            return false;\n        }\n\n        this.internalPrepareForExecution(referencedInputs);\n\n        return true;\n    };\n\n    remove(): boolean {\n        if (this._actionCollection) {\n            return this._actionCollection.removeAction(this);\n        }\n\n        return false;\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return [];\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return this.iconUrl ? [{ url: this.iconUrl, mimeType: \"image\" }] : [];\n    }\n\n    getActionById(id: string): Action | undefined {\n        return this.id === id ? this : undefined;\n    }\n\n    getReferencedInputs(): Dictionary<Input> | undefined {\n        return this.internalGetReferencedInputs();\n    }\n\n    /**\n     * Validates the inputs associated with this action.\n     *\n     * @returns A list of inputs that failed validation, or an empty array if no input failed validation.\n     */\n    validateInputs(): Input[] {\n        return this.internalValidateInputs(this.getReferencedInputs());\n    }\n\n    get isPrimary(): boolean {\n        return this.style == Enums.ActionStyle.Positive;\n    }\n\n    set isPrimary(value: boolean) {\n        if (value) {\n            this.style = Enums.ActionStyle.Positive;\n        }\n        else {\n            if (this.style == Enums.ActionStyle.Positive) {\n                this.style = Enums.ActionStyle.Default;\n            }\n        }\n    }\n\n    get hostConfig(): HostConfig {\n        return this.parent ? this.parent.hostConfig : defaultHostConfig;\n    }\n\n    get parent(): CardElement | undefined {\n        return <CardElement>this._parent;\n    }\n}\n\nexport abstract class SubmitActionBase extends Action {\n    //#region Schema\n\n    static readonly dataProperty = new PropertyDefinition(Versions.v1_0, \"data\");\n    static readonly associatedInputsProperty = new CustomProperty(\n        Versions.v1_3,\n        \"associatedInputs\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            let value = source[property.name];\n\n            if (value !== undefined && typeof value === \"string\") {\n                return value.toLowerCase() === \"none\" ? \"none\" : \"auto\";\n            }\n\n            return undefined;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) => {\n            context.serializeValue(target, property.name, value);\n        });\n\n    @property(SubmitActionBase.dataProperty)\n    private _originalData?: PropertyBag;\n\n    @property(SubmitActionBase.associatedInputsProperty)\n    associatedInputs?: \"auto\" | \"none\";\n\n    //#endregion\n\n    private _isPrepared: boolean = false;\n    private _processedData?: PropertyBag;\n\n    protected internalGetReferencedInputs(): Dictionary<Input> {\n        let result: Dictionary<Input> = {};\n\n        if (this.associatedInputs !== \"none\") {\n            let current: CardElement | undefined = this.parent;\n            let inputs: Input[] = [];\n\n            while (current) {\n                inputs = inputs.concat(current.getAllInputs(false));\n\n                current = current.parent;\n            }\n\n            for (let input of inputs) {\n                if (input.id) {\n                    result[input.id] = input;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\n        if (this._originalData) {\n            this._processedData = JSON.parse(JSON.stringify(this._originalData));\n        }\n        else {\n            this._processedData = {};\n        }\n\n        if (this._processedData && inputs) {\n            for (let key of Object.keys(inputs)) {\n                let input = inputs[key];\n\n                if (input.id && input.isSet()) {\n                    this._processedData[input.id] = typeof input.value === \"string\" ? input.value : input.value.toString();\n                }\n            }\n        }\n\n        this._isPrepared = true;\n    }\n\n    get data(): object | undefined {\n        return this._isPrepared ? this._processedData : this._originalData;\n    }\n\n    set data(value: object | undefined) {\n        this._originalData = value;\n        this._isPrepared = false;\n    }\n}\n\nexport class SubmitAction extends SubmitActionBase {\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.Submit\" = \"Action.Submit\";\n\n    getJsonTypeName(): string {\n        return SubmitAction.JsonTypeName;\n    }\n}\n\nexport class ExecuteAction extends SubmitActionBase {\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.Execute\" = \"Action.Execute\";\n\n    //#region Schema\n\n    static readonly verbProperty = new StringProperty(Versions.v1_4, \"verb\");\n\n    @property(ExecuteAction.verbProperty)\n    verb: string;\n\n    //#endregion\n\n    getJsonTypeName(): string {\n        return ExecuteAction.JsonTypeName;\n    }\n}\n\nexport class OpenUrlAction extends Action {\n    //#region Schema\n\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\n\n    @property(OpenUrlAction.urlProperty)\n    url?: string;\n\n    //#endregion\n\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.OpenUrl\" = \"Action.OpenUrl\";\n\n    getJsonTypeName(): string {\n        return OpenUrlAction.JsonTypeName;\n    }\n\n    getAriaRole() : string {\n        return \"link\";\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (!this.url) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.propertyMustBeSet(\"url\"));\n        }\n    }\n\n    getHref(): string | undefined {\n        return this.url;\n    }\n}\n\nexport class ToggleVisibilityAction extends Action {\n    //#region Schema\n\n    static readonly targetElementsProperty = new CustomProperty<PropertyBag>(\n        Versions.v1_2,\n        \"targetElements\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            let result: PropertyBag = {}\n\n            if (Array.isArray(source[property.name])) {\n                for (let item of source[property.name]) {\n                    if (typeof item === \"string\") {\n                        result[item] = undefined;\n                    }\n                    else if (typeof item === \"object\") {\n                        let elementId = item[\"elementId\"];\n\n                        if (typeof elementId === \"string\") {\n                            result[elementId] = Utils.parseBool(item[\"isVisible\"]);\n                        }\n                    }\n                }\n            }\n\n            return result;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: PropertyBag, context: BaseSerializationContext) => {\n            let targetElements: any[] = [];\n\n            for (let id of Object.keys(value)) {\n                if (typeof value[id] === \"boolean\") {\n                    targetElements.push(\n                        {\n                            elementId: id,\n                            isVisible: value[id]\n                        }\n                    );\n                }\n                else {\n                    targetElements.push(id);\n                }\n            }\n\n            context.serializeArray(target, property.name, targetElements);\n        },\n        {},\n        (sender: SerializableObject) => { return {}; });\n\n    @property(ToggleVisibilityAction.targetElementsProperty)\n    targetElements: { [key: string]: any } = {};\n\n    //#endregion\n\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.ToggleVisibility\" = \"Action.ToggleVisibility\";\n\n    private updateAriaControlsAttribute() {\n        // apply aria labels to make it clear which elements this action will toggle\n        if (this.targetElements) {\n            const elementIds = Object.keys(this.targetElements);\n\n            if (this._renderedElement) {\n                if (elementIds.length > 0) {\n                    this._renderedElement.setAttribute(\"aria-controls\", elementIds.join(\" \"));\n                }\n                else {\n                    this._renderedElement.removeAttribute(\"aria-controls\");\n                }\n            }\n        }\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (!this.targetElements) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.propertyMustBeSet(\"targetElements\"));\n        }\n    }\n\n    getJsonTypeName(): string {\n        return ToggleVisibilityAction.JsonTypeName;\n    }\n\n    render(baseCssClass: string = \"ac-pushButton\") {\n        super.render(baseCssClass);\n        this.updateAriaControlsAttribute();\n    }\n\n    execute() {\n        if (this.parent) {\n            for (let elementId of Object.keys(this.targetElements)) {\n                let targetElement = this.parent.getRootElement().getElementById(elementId);\n\n                if (targetElement) {\n                    if (typeof this.targetElements[elementId] === \"boolean\") {\n                        targetElement.isVisible = this.targetElements[elementId];\n                    }\n                    else {\n                        targetElement.isVisible = !targetElement.isVisible;\n                    }\n                }\n            }\n        }\n    }\n\n    addTargetElement(elementId: string, isVisible: boolean | undefined = undefined) {\n        this.targetElements[elementId] = isVisible;\n        this.updateAriaControlsAttribute();\n    }\n\n    removeTargetElement(elementId: string) {\n        delete this.targetElements[elementId];\n        this.updateAriaControlsAttribute();\n    }\n}\n\nclass StringWithSubstitutionProperty extends PropertyDefinition  {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): StringWithSubstitutions {\n        let result = new StringWithSubstitutions();\n        result.set(Utils.parseString(source[this.name]));\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: StringWithSubstitutions, context: BaseSerializationContext): void {\n        context.serializeValue(target, this.name, value.getOriginal());\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string) {\n        super(targetVersion, name, undefined, () => { return new StringWithSubstitutions(); });\n    }\n}\n\nexport class HttpHeader extends SerializableObject {\n    //#region Schema\n\n    static readonly nameProperty = new StringProperty(Versions.v1_0, \"name\");\n    static readonly valueProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"value\");\n\n    protected getSchemaKey(): string {\n        return \"HttpHeader\";\n    }\n\n    @property(HttpHeader.nameProperty)\n    name: string;\n\n    @property(HttpHeader.valueProperty)\n    private _value: StringWithSubstitutions;\n\n    //#endregion\n\n    constructor(name: string = \"\", value: string = \"\") {\n        super();\n\n        this.name = name;\n        this.value = value;\n    }\n\n    getReferencedInputs(inputs: Input[], referencedInputs: Dictionary<Input>) {\n        this._value.getReferencedInputs(inputs, referencedInputs);\n    }\n\n    prepareForExecution(inputs: Dictionary<Input>) {\n        this._value.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\n    }\n\n    get value(): string | undefined {\n        return this._value.get();\n    }\n\n    set value(newValue: string | undefined) {\n        this._value.set(newValue);\n    }\n}\n\nexport class HttpAction extends Action {\n    //#region Schema\n\n    static readonly urlProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"url\");\n    static readonly bodyProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"body\");\n    static readonly methodProperty = new StringProperty(Versions.v1_0, \"method\");\n    static readonly headersProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"headers\", HttpHeader);\n    static readonly ignoreInputValidationProperty = new BoolProperty(Versions.v1_3, \"ignoreInputValidation\", false);\n\n    @property(HttpAction.urlProperty)\n    private _url: StringWithSubstitutions;\n\n    @property(HttpAction.bodyProperty)\n    private _body: StringWithSubstitutions;\n\n    @property(HttpAction.methodProperty)\n    method?: string;\n\n    @property(HttpAction.headersProperty)\n    headers: HttpHeader[];\n\n    @property(HttpAction.ignoreInputValidationProperty)\n    private _ignoreInputValidation: boolean = false;\n\n    //#endregion\n\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.Http\" = \"Action.Http\";\n\n    protected internalGetReferencedInputs(): Dictionary<Input> {\n        let allInputs = this.parent ? this.parent.getRootElement().getAllInputs() : [];\n        let result: Dictionary<Input> = {};\n\n        this._url.getReferencedInputs(allInputs, result);\n\n        for (let header of this.headers) {\n            header.getReferencedInputs(allInputs, result);\n        }\n\n        this._body.getReferencedInputs(allInputs, result);\n\n        return result;\n    }\n\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\n        if (inputs) {\n            this._url.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\n\n            let contentType = ContentTypes.applicationJson;\n\n            for (let header of this.headers) {\n                header.prepareForExecution(inputs);\n\n                if (header.name && header.name.toLowerCase() == \"content-type\") {\n                    contentType = <string>header.value;\n                }\n            }\n\n            this._body.substituteInputValues(inputs, contentType);\n        }\n    };\n\n    getJsonTypeName(): string {\n        return HttpAction.JsonTypeName;\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (!this.url) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.propertyMustBeSet(\"url\"));\n        }\n\n        if (this.headers.length > 0) {\n            for (let header of this.headers) {\n                if (!header.name) {\n                    context.addFailure(\n                        this,\n                        Enums.ValidationEvent.PropertyCantBeNull,\n                        Strings.errors.actionHttpHeadersMustHaveNameAndValue());\n                }\n            }\n        }\n    }\n\n    get ignoreInputValidation(): boolean {\n        return this._ignoreInputValidation;\n    }\n\n    set ignoreInputValidation(value: boolean) {\n        this._ignoreInputValidation = value;\n    }\n\n    get url(): string | undefined {\n        return this._url.get();\n    }\n\n    set url(value: string | undefined) {\n        this._url.set(value);\n    }\n\n    get body(): string | undefined {\n        return this._body.get();\n    }\n\n    set body(value: string | undefined) {\n        this._body.set(value);\n    }\n}\n\nexport class ShowCardAction extends Action {\n    // Note the \"weird\" way this field is declared is to work around a breaking\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\n    static readonly JsonTypeName: \"Action.ShowCard\" = \"Action.ShowCard\";\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        let jsonCard = source[\"card\"];\n\n        if (jsonCard) {\n            this.card.parse(jsonCard, context);\n        }\n        else {\n            context.logParseEvent(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.showCardMustHaveCard());\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        if (this.card) {\n            context.serializeValue(target, \"card\", this.card.toJSON(context));\n        }\n    }\n\n    protected addCssClasses(element: HTMLElement) {\n        super.addCssClasses(element);\n\n        if (this.parent) {\n            element.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\n        }\n    }\n\n    protected raiseExecuteActionEvent() {\n        if (this.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Popup) {\n            // Only raise the event in Popup mode.\n            super.raiseExecuteActionEvent();\n        }\n    }\n\n    readonly card: AdaptiveCard = new InlineAdaptiveCard();\n\n    getJsonTypeName(): string {\n        return ShowCardAction.JsonTypeName;\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        this.card.internalValidateProperties(context);\n    }\n\n    updateActionButtonCssStyle(actionButtonElement: HTMLElement, buttonState: ActionButtonState = ActionButtonState.Normal): void {\n        super.updateActionButtonCssStyle(actionButtonElement);\n\n        if (this.parent) {\n            actionButtonElement.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\n            actionButtonElement.setAttribute(\"aria-expanded\", (buttonState === ActionButtonState.Expanded).toString());\n        }\n    }\n\n    setParent(value: CardElement) {\n        super.setParent(value);\n\n        this.card.setParent(value);\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return this.card.getAllInputs(processActions);\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return super.getResourceInformation().concat(this.card.getResourceInformation());\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result = super.getActionById(id);\n\n        if (!result) {\n            result = this.card.getActionById(id);\n        }\n\n        return result;\n    }\n}\n\nclass ActionCollection {\n    private _owner: CardElement;\n    private _actionCardContainer: HTMLDivElement;\n    private _expandedAction?: ShowCardAction;\n    private _renderedActionCount: number = 0;\n    private _actionCard?: HTMLElement;\n\n    private isActionAllowed(action: Action): boolean {\n        let forbiddenTypes = this._owner.getForbiddenActionTypes();\n\n        if (forbiddenTypes) {\n            for (let forbiddenType of forbiddenTypes) {\n                if (action.constructor === forbiddenType) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private refreshContainer() {\n        this._actionCardContainer.innerHTML = \"\";\n\n        if (!this._actionCard) {\n            this._actionCardContainer.style.marginTop = \"0px\";\n\n            return;\n        }\n\n        this._actionCardContainer.style.marginTop = this._renderedActionCount > 0 ? this._owner.hostConfig.actions.showCard.inlineTopMargin + \"px\" : \"0px\";\n\n        let padding = this._owner.getEffectivePadding();\n\n        this._owner.getImmediateSurroundingPadding(padding);\n\n        let physicalPadding = this._owner.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n\n        if (this._actionCard) {\n            this._actionCard.style.paddingLeft = physicalPadding.left + \"px\";\n            this._actionCard.style.paddingRight = physicalPadding.right + \"px\";\n\n            this._actionCard.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\n            this._actionCard.style.marginRight = \"-\" + physicalPadding.right + \"px\";\n\n            if (physicalPadding.bottom != 0 && !this._owner.isDesignMode()) {\n                this._actionCard.style.paddingBottom = physicalPadding.bottom + \"px\";\n                this._actionCard.style.marginBottom = \"-\" + physicalPadding.bottom + \"px\";\n            }\n\n            Utils.appendChild(this._actionCardContainer, this._actionCard);\n        }\n    }\n\n    private layoutChanged() {\n        this._owner.getRootElement().updateLayout();\n    }\n\n    private showActionCard(action: ShowCardAction, suppressStyle: boolean = false, raiseEvent: boolean = true) {\n        (<InlineAdaptiveCard>action.card).suppressStyle = suppressStyle;\n\n        // Always re-render a ShowCard action in design mode; reuse already rendered ShowCard (if available) otherwise\n        let renderedCard = action.card.renderedElement && !this._owner.isDesignMode() ? action.card.renderedElement : action.card.render();\n\n        this._actionCard = renderedCard;\n        this._expandedAction = action;\n\n        this.refreshContainer();\n\n        if (raiseEvent) {\n            this.layoutChanged();\n\n            raiseInlineCardExpandedEvent(action, true);\n        }\n    }\n\n    private collapseExpandedAction() {\n        for (let button of this.buttons) {\n            button.state = ActionButtonState.Normal;\n        }\n\n        let previouslyExpandedAction = this._expandedAction;\n\n        this._expandedAction = undefined;\n        this._actionCard = undefined;\n\n        this.refreshContainer();\n\n        if (previouslyExpandedAction) {\n            this.layoutChanged();\n\n            raiseInlineCardExpandedEvent(previouslyExpandedAction, false);\n        }\n    }\n\n    private expandShowCardAction(action: ShowCardAction, raiseEvent: boolean) {\n        for (let button of this.buttons) {\n            if (button.action !== action) {\n                button.state = ActionButtonState.Subdued;\n            }\n            else {\n                button.state = ActionButtonState.Expanded;\n            }\n        }\n\n        this.showActionCard(\n            action,\n            !(this._owner.isAtTheVeryLeft() && this._owner.isAtTheVeryRight()),\n            raiseEvent);\n    }\n\n    private getParentContainer(): Container | undefined {\n        if (this._owner instanceof Container) {\n            return this._owner;\n        }\n        else {\n            return this._owner.getParentContainer();\n        }\n    }\n\n    private findActionButton(action: Action): ActionButton | undefined {\n        for (let actionButton of this.buttons) {\n            if (actionButton.action == action) {\n                return actionButton;\n            }\n        }\n\n        return undefined;\n    }\n\n    items: Action[] = [];\n    buttons: ActionButton[] = [];\n\n    constructor(owner: CardElement) {\n        this._owner = owner;\n    }\n\n    actionExecuted(action: Action) {\n        if (!(action instanceof ShowCardAction)) {\n            this.collapseExpandedAction();\n        }\n        else {\n            if (action === this._expandedAction) {\n                this.collapseExpandedAction();\n            }\n            else {\n                this.expandShowCardAction(action, true);\n            }\n        }\n    }\n\n    parse(source: any, context: SerializationContext) {\n        this.clear();\n\n        if (Array.isArray(source)) {\n            for (let jsonAction of source) {\n                let action = context.parseAction(\n                    this._owner,\n                    jsonAction,\n                    [],\n                    !this._owner.isDesignMode());\n\n                if (action) {\n                    this.addAction(action);\n                }\n            }\n        }\n    }\n\n    toJSON(target: PropertyBag, propertyName: string, context: SerializationContext): any {\n        context.serializeArray(target, propertyName, this.items);\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = undefined;\n\n        for (let item of this.items) {\n            result = item.getActionById(id);\n\n            if (result) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    validateProperties(context: ValidationResults) {\n        if (this._owner.hostConfig.actions.maxActions && this.items.length > this._owner.hostConfig.actions.maxActions) {\n            context.addFailure(\n                this._owner,\n                Enums.ValidationEvent.TooManyActions,\n                Strings.errors.tooManyActions(this._owner.hostConfig.actions.maxActions));\n        }\n\n        if (this.items.length > 0 && !this._owner.hostConfig.supportsInteractivity) {\n            context.addFailure(\n                this._owner,\n                Enums.ValidationEvent.InteractivityNotAllowed,\n                Strings.errors.interactivityNotAllowed());\n        }\n\n        for (let item of this.items) {\n            if (!this.isActionAllowed(item)) {\n                context.addFailure(\n                    this._owner,\n                    Enums.ValidationEvent.ActionTypeNotAllowed,\n                    Strings.errors.actionTypeNotAllowed(item.getJsonTypeName()));\n            }\n\n            item.internalValidateProperties(context);\n        }\n    }\n\n    render(orientation: Enums.Orientation, isDesignMode: boolean): HTMLElement | undefined {\n        // Cache hostConfig for better perf\n        let hostConfig = this._owner.hostConfig;\n\n        if (!hostConfig.supportsInteractivity) {\n            return undefined;\n        }\n\n        let element = document.createElement(\"div\");\n        let maxActions = hostConfig.actions.maxActions ? Math.min(hostConfig.actions.maxActions, this.items.length) : this.items.length;\n\n        this._actionCardContainer = document.createElement(\"div\");\n        this._renderedActionCount = 0;\n\n        if (hostConfig.actions.preExpandSingleShowCardAction && maxActions == 1 && this.items[0] instanceof ShowCardAction && this.isActionAllowed(this.items[0])) {\n            this.showActionCard(<ShowCardAction>this.items[0], true);\n            this._renderedActionCount = 1;\n        }\n        else {\n            let buttonStrip = document.createElement(\"div\");\n            buttonStrip.className = hostConfig.makeCssClassName(\"ac-actionSet\");\n            buttonStrip.style.display = \"flex\";\n            buttonStrip.setAttribute(\"role\", \"menubar\");\n\n            if (orientation == Enums.Orientation.Horizontal) {\n                buttonStrip.style.flexDirection = \"row\";\n\n                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\n                    switch (this._owner.horizontalAlignment) {\n                        case Enums.HorizontalAlignment.Center:\n                            buttonStrip.style.justifyContent = \"center\";\n                            break;\n                        case Enums.HorizontalAlignment.Right:\n                            buttonStrip.style.justifyContent = \"flex-end\";\n                            break;\n                        default:\n                            buttonStrip.style.justifyContent = \"flex-start\";\n                            break;\n                    }\n                }\n                else {\n                    switch (hostConfig.actions.actionAlignment) {\n                        case Enums.ActionAlignment.Center:\n                            buttonStrip.style.justifyContent = \"center\";\n                            break;\n                        case Enums.ActionAlignment.Right:\n                            buttonStrip.style.justifyContent = \"flex-end\";\n                            break;\n                        default:\n                            buttonStrip.style.justifyContent = \"flex-start\";\n                            break;\n                    }\n                }\n            }\n            else {\n                buttonStrip.style.flexDirection = \"column\";\n\n                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\n                    switch (this._owner.horizontalAlignment) {\n                        case Enums.HorizontalAlignment.Center:\n                            buttonStrip.style.alignItems = \"center\";\n                            break;\n                        case Enums.HorizontalAlignment.Right:\n                            buttonStrip.style.alignItems = \"flex-end\";\n                            break;\n                        default:\n                            buttonStrip.style.alignItems = \"flex-start\";\n                            break;\n                    }\n                }\n                else {\n                    switch (hostConfig.actions.actionAlignment) {\n                        case Enums.ActionAlignment.Center:\n                            buttonStrip.style.alignItems = \"center\";\n                            break;\n                        case Enums.ActionAlignment.Right:\n                            buttonStrip.style.alignItems = \"flex-end\";\n                            break;\n                        case Enums.ActionAlignment.Stretch:\n                            buttonStrip.style.alignItems = \"stretch\";\n                            break;\n                        default:\n                            buttonStrip.style.alignItems = \"flex-start\";\n                            break;\n                    }\n                }\n            }\n\n            let parentContainer = this.getParentContainer();\n\n            if (parentContainer) {\n                let parentContainerStyle = parentContainer.getEffectiveStyle();\n\n                const allowedActions = this.items.filter(this.isActionAllowed.bind(this));\n\n                for (let i = 0; i < allowedActions.length; i++) {\n                    let actionButton = this.findActionButton(allowedActions[i]);\n\n                    if (!actionButton) {\n                        actionButton = new ActionButton(allowedActions[i], parentContainerStyle);\n                        actionButton.onClick = (ab) => { ab.action.execute(); };\n\n                        this.buttons.push(actionButton);\n                    }\n\n                    actionButton.render();\n\n                    if (actionButton.action.renderedElement) {\n                        if (allowedActions.length > 1) {\n                            actionButton.action.renderedElement.setAttribute(\"aria-posinset\", (i + 1).toString());\n                            actionButton.action.renderedElement.setAttribute(\"aria-setsize\", allowedActions.length.toString());\n                            actionButton.action.renderedElement.setAttribute(\"role\", \"menuitem\");\n                        }\n\n                        if (hostConfig.actions.actionsOrientation == Enums.Orientation.Horizontal && hostConfig.actions.actionAlignment == Enums.ActionAlignment.Stretch) {\n                            actionButton.action.renderedElement.style.flex = \"0 1 100%\";\n                        }\n                        else {\n                            actionButton.action.renderedElement.style.flex = \"0 1 auto\";\n                        }\n\n                        buttonStrip.appendChild(actionButton.action.renderedElement);\n\n                        this._renderedActionCount++;\n\n                        if (this._renderedActionCount >= hostConfig.actions.maxActions || i == this.items.length - 1) {\n                            break;\n                        }\n                        else if (hostConfig.actions.buttonSpacing > 0) {\n                            let spacer = document.createElement(\"div\");\n\n                            if (orientation === Enums.Orientation.Horizontal) {\n                                spacer.style.flex = \"0 0 auto\";\n                                spacer.style.width = hostConfig.actions.buttonSpacing + \"px\";\n                            }\n                            else {\n                                spacer.style.height = hostConfig.actions.buttonSpacing + \"px\";\n                            }\n\n                            Utils.appendChild(buttonStrip, spacer);\n                        }\n                    }\n                }\n            }\n\n            let buttonStripContainer = document.createElement(\"div\");\n            buttonStripContainer.style.overflow = \"hidden\";\n            buttonStripContainer.appendChild(buttonStrip);\n\n            Utils.appendChild(element, buttonStripContainer);\n        }\n\n        Utils.appendChild(element, this._actionCardContainer);\n\n        for (let button of this.buttons) {\n            if (button.state == ActionButtonState.Expanded) {\n                this.expandShowCardAction(<ShowCardAction>button.action, false);\n\n                break;\n            }\n        }\n\n        return this._renderedActionCount > 0 ? element : undefined;\n    }\n\n    addAction(action: Action) {\n        if (!action) {\n            throw new Error(\"The action parameter cannot be null.\");\n        }\n\n        if ((!action.parent || action.parent === this._owner) && this.items.indexOf(action) < 0) {\n            this.items.push(action);\n\n            if (!action.parent) {\n                action.setParent(this._owner);\n            }\n\n            action[\"_actionCollection\"] = this;\n        }\n        else {\n            throw new Error(Strings.errors.actionAlreadyParented());\n        }\n    }\n\n    removeAction(action: Action): boolean {\n        if (this.expandedAction && this._expandedAction == action) {\n            this.collapseExpandedAction();\n        }\n\n        let actionIndex = this.items.indexOf(action);\n\n        if (actionIndex >= 0) {\n            this.items.splice(actionIndex, 1);\n\n            action.setParent(undefined);\n\n            action[\"_actionCollection\"] = undefined;\n\n            for (let i = 0; i < this.buttons.length; i++) {\n                if (this.buttons[i].action == action) {\n                    this.buttons.splice(i, 1);\n\n                    break;\n                }\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    clear() {\n        this.items = [];\n        this.buttons = [];\n\n        this._expandedAction = undefined;\n        this._renderedActionCount = 0;\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        let result: Input[] = [];\n\n        if (processActions) {\n            for (let action of this.items) {\n                result = result.concat(action.getAllInputs());\n            }\n        }\n\n        return result;\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        let result: IResourceInformation[] = [];\n\n        for (let action of this.items) {\n            result = result.concat(action.getResourceInformation());\n        }\n\n        return result;\n    }\n\n    get renderedActionCount(): number {\n        return this._renderedActionCount;\n    }\n\n    get expandedAction(): ShowCardAction | undefined {\n        return this._expandedAction;\n    }\n}\n\nexport class ActionSet extends CardElement {\n    //#region Schema\n\n    static readonly orientationProperty = new EnumProperty(Versions.v1_1, \"orientation\", Enums.Orientation);\n\n    @property(ActionSet.orientationProperty)\n    orientation?: Enums.Orientation;\n\n    //#endregion\n\n    private _actionCollection: ActionCollection;\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._actionCollection.parse(source[\"actions\"], context);\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        this._actionCollection.toJSON(target, \"actions\", context);\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        return this._actionCollection.render(this.orientation !== undefined ? this.orientation : this.hostConfig.actions.actionsOrientation, this.isDesignMode());\n    }\n\n    constructor() {\n        super();\n\n        this._actionCollection = new ActionCollection(this);\n    }\n\n    isBleedingAtBottom(): boolean {\n        if (this._actionCollection.renderedActionCount == 0) {\n            return super.isBleedingAtBottom();\n        }\n        else {\n            if (this._actionCollection.items.length == 1) {\n                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\n            }\n            else {\n                return this._actionCollection.expandedAction !== undefined;\n            }\n        }\n    }\n\n    getJsonTypeName(): string {\n        return \"ActionSet\";\n    }\n\n    getActionCount(): number {\n        return this._actionCollection.items.length;\n    }\n\n    getActionAt(index: number): Action | undefined {\n        if (index >= 0 && index < this.getActionCount()) {\n            return this._actionCollection.items[index];\n        }\n        else {\n            return super.getActionAt(index);\n        }\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = this._actionCollection.getActionById(id);\n\n        return result ? result : super.getActionById(id);\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        this._actionCollection.validateProperties(context);\n    }\n\n    addAction(action: Action) {\n        this._actionCollection.addAction(action);\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        return processActions ? this._actionCollection.getAllInputs() : [];\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return this._actionCollection.getResourceInformation();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    findDOMNodeOwner(node: Node): CardObject | undefined {\n        let target: CardObject | undefined = undefined;\n\n        for (const action of this._actionCollection.items) {\n            // recur through each Action\n            target = action.findDOMNodeOwner(node);\n\n            if (target) {\n                return target;\n            }\n        }\n\n        // if not found in any Action, defer to parent implementation\n        return super.findDOMNodeOwner(node);\n    }\n\n    get isInteractive(): boolean {\n        return true;\n    }\n}\n\nexport abstract class StylableCardElementContainer extends CardElementContainer {\n    //#region Schema\n\n    static readonly styleProperty = new ValueSetProperty(\n        Versions.v1_0,\n        \"style\",\n        [\n            { value: Enums.ContainerStyle.Default },\n            { value: Enums.ContainerStyle.Emphasis },\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Accent },\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Good },\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Attention },\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Warning }\n        ]);\n    static readonly bleedProperty = new BoolProperty(Versions.v1_2, \"bleed\", false);\n    static readonly minHeightProperty = new PixelSizeProperty(Versions.v1_2, \"minHeight\");\n\n    @property(StylableCardElementContainer.styleProperty)\n    get style(): string | undefined {\n        if (this.allowCustomStyle) {\n            let style = this.getValue(StylableCardElementContainer.styleProperty);\n\n            if (style && this.hostConfig.containerStyles.getStyleByName(style)) {\n                return style;\n            }\n        }\n\n        return undefined;\n    }\n\n    set style(value: string | undefined) {\n        this.setValue(StylableCardElementContainer.styleProperty, value);\n    }\n\n    @property(StylableCardElementContainer.bleedProperty)\n    private _bleed: boolean = false;\n\n    @property(StylableCardElementContainer.minHeightProperty)\n    minPixelHeight?: number;\n\n    //#endregion\n\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\n        super.adjustRenderedElementSize(renderedElement);\n\n        if (this.minPixelHeight) {\n            renderedElement.style.minHeight = this.minPixelHeight + \"px\";\n        }\n    }\n\n    protected applyBackground() {\n        if (this.renderedElement) {\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));\n\n            if (styleDefinition.backgroundColor) {\n                const bgColor = <string>Utils.stringToCssColor(styleDefinition.backgroundColor);\n                this.renderedElement.style.backgroundColor = bgColor;\n                this.renderedElement.style.border = \"1px solid \" + bgColor;\n            }\n        }\n    }\n\n    protected applyPadding() {\n        super.applyPadding();\n\n        if (!this.renderedElement) {\n            return;\n        }\n\n        let physicalPadding = new SpacingDefinition();\n\n        if (this.getEffectivePadding()) {\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\n        }\n\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\n\n        if (this.isBleeding()) {\n            // Bleed into the first parent that does have padding\n            let padding = new PaddingDefinition();\n\n            this.getImmediateSurroundingPadding(padding);\n\n            let surroundingPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\n\n            this.renderedElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\n            this.renderedElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\n\n            if (!this.isDesignMode()) {\n                this.renderedElement.style.marginTop = \"-\" + surroundingPadding.top + \"px\";\n                this.renderedElement.style.marginBottom = \"-\" + surroundingPadding.bottom + \"px\";\n            }\n\n            if (this.separatorElement && this.separatorOrientation == Enums.Orientation.Horizontal) {\n                this.separatorElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\n                this.separatorElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\n            }\n        }\n        else {\n            this.renderedElement.style.marginRight = \"0\";\n            this.renderedElement.style.marginLeft = \"0\";\n            this.renderedElement.style.marginTop = \"0\";\n            this.renderedElement.style.marginBottom = \"0\";\n\n            if (this.separatorElement && this.separatorOrientation === Enums.Orientation.Horizontal) {\n                this.separatorElement.style.marginRight = \"0\";\n                this.separatorElement.style.marginLeft = \"0\";\n            }\n        }\n    }\n\n    protected getHasBackground(): boolean {\n        let currentElement: CardElement | undefined = this.parent;\n\n        while (currentElement) {\n            let currentElementHasBackgroundImage = currentElement instanceof Container ? currentElement.backgroundImage.isValid() : false;\n\n            if (currentElement instanceof StylableCardElementContainer) {\n                if (this.hasExplicitStyle && (currentElement.getEffectiveStyle() != this.getEffectiveStyle() || currentElementHasBackgroundImage)) {\n                    return true;\n                }\n            }\n\n            currentElement = currentElement.parent;\n        }\n\n        return false;\n    }\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return this.getHasBackground() ?\n            new PaddingDefinition(\n                Enums.Spacing.Padding,\n                Enums.Spacing.Padding,\n                Enums.Spacing.Padding,\n                Enums.Spacing.Padding) : super.getDefaultPadding();\n    }\n\n    protected getHasExpandedAction(): boolean {\n        return false;\n    }\n\n    protected getBleed(): boolean {\n        return this._bleed;\n    }\n\n    protected setBleed(value: boolean) {\n        this._bleed = value;\n    }\n\n    protected get renderedActionCount(): number {\n        return 0;\n    }\n\n    protected get hasExplicitStyle(): boolean {\n        return this.getValue(StylableCardElementContainer.styleProperty) !== undefined;\n    }\n\n    protected get allowCustomStyle(): boolean {\n        return true;\n    }\n\n    isBleeding(): boolean {\n\t\treturn (this.getHasBackground() || this.hostConfig.alwaysAllowBleed) && this.getBleed();\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        let explicitStyle = this.getValue(StylableCardElementContainer.styleProperty);\n\n        if (explicitStyle !== undefined) {\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(explicitStyle);\n\n            if (!styleDefinition) {\n                context.addFailure(\n                    this,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(explicitStyle, \"style\"));\n            }\n        }\n    }\n\n    render(): HTMLElement | undefined {\n        let renderedElement = super.render();\n\n        if (renderedElement && this.getHasBackground()) {\n            this.applyBackground();\n        }\n\n        return renderedElement;\n    }\n\n    getEffectiveStyle(): string {\n        let effectiveStyle = this.style;\n\n        return effectiveStyle ? effectiveStyle : super.getEffectiveStyle();\n    }\n}\n\nexport class BackgroundImage extends SerializableObject {\n    //#region Schema\n\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\n    static readonly fillModeProperty = new EnumProperty(Versions.v1_2, \"fillMode\", Enums.FillMode, Enums.FillMode.Cover);\n    static readonly horizontalAlignmentProperty = new EnumProperty(Versions.v1_2, \"horizontalAlignment\", Enums.HorizontalAlignment, Enums.HorizontalAlignment.Left);\n    static readonly verticalAlignmentProperty = new EnumProperty(Versions.v1_2, \"verticalAlignment\", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);\n\n    @property(BackgroundImage.urlProperty)\n    url?: string;\n\n    @property(BackgroundImage.fillModeProperty)\n    fillMode: Enums.FillMode;\n\n    @property(BackgroundImage.horizontalAlignmentProperty)\n    horizontalAlignment: Enums.HorizontalAlignment;\n\n    @property(BackgroundImage.verticalAlignmentProperty)\n    verticalAlignment: Enums.VerticalAlignment;\n\n    //#endregion\n\n    protected getSchemaKey(): string {\n        return \"BackgroundImage\";\n    }\n\n    protected internalParse(source: any, context: BaseSerializationContext) {\n        if (typeof source === \"string\") {\n            this.resetDefaultValues();\n            this.url = source;\n        }\n        else {\n            return super.internalParse(source, context);\n        }\n    }\n\n    apply(element: CardElement) {\n        if (this.url && element.renderedElement) {\n            element.renderedElement.style.backgroundImage = \"url('\" + element.preProcessPropertyValue(BackgroundImage.urlProperty, this.url) + \"')\";\n\n            switch (this.fillMode) {\n                case Enums.FillMode.Repeat:\n                    element.renderedElement.style.backgroundRepeat = \"repeat\";\n                    break;\n                case Enums.FillMode.RepeatHorizontally:\n                    element.renderedElement.style.backgroundRepeat = \"repeat-x\";\n                    break;\n                case Enums.FillMode.RepeatVertically:\n                    element.renderedElement.style.backgroundRepeat = \"repeat-y\";\n                    break;\n                case Enums.FillMode.Cover:\n                default:\n                    element.renderedElement.style.backgroundRepeat = \"no-repeat\";\n                    element.renderedElement.style.backgroundSize = \"cover\";\n                    break;\n            }\n\n            switch (this.horizontalAlignment) {\n                case Enums.HorizontalAlignment.Center:\n                    element.renderedElement.style.backgroundPositionX = \"center\";\n                    break;\n                case Enums.HorizontalAlignment.Right:\n                    element.renderedElement.style.backgroundPositionX = \"right\";\n                    break;\n            }\n\n            switch (this.verticalAlignment) {\n                case Enums.VerticalAlignment.Center:\n                    element.renderedElement.style.backgroundPositionY = \"center\";\n                    break;\n                case Enums.VerticalAlignment.Bottom:\n                    element.renderedElement.style.backgroundPositionY = \"bottom\";\n                    break;\n            }\n        }\n    }\n\n    isValid(): boolean {\n        return this.url ? true : false;\n    }\n}\n\nexport class Container extends StylableCardElementContainer {\n    //#region Schema\n\n    static readonly backgroundImageProperty = new SerializableObjectProperty(\n        Versions.v1_0,\n        \"backgroundImage\",\n        BackgroundImage);\n    static readonly verticalContentAlignmentProperty = new EnumProperty(Versions.v1_1, \"verticalContentAlignment\", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);\n    static readonly rtlProperty = new BoolProperty(Versions.v1_0, \"rtl\");\n\n    @property(Container.backgroundImageProperty)\n    get backgroundImage(): BackgroundImage {\n        return this.getValue(Container.backgroundImageProperty);\n    }\n\n    @property(Container.verticalContentAlignmentProperty)\n    verticalContentAlignment: Enums.VerticalAlignment = Enums.VerticalAlignment.Top;\n\n    @property(Container.rtlProperty)\n    rtl?: boolean;\n\n    //#endregion\n\n    private _items: CardElement[] = [];\n    private _renderedItems: CardElement[] = [];\n\n    private insertItemAt(\n        item: CardElement,\n        index: number,\n        forceInsert: boolean) {\n        if (!item.parent || forceInsert) {\n            if (item.isStandalone) {\n                if (index < 0 || index >= this._items.length) {\n                    this._items.push(item);\n                }\n                else {\n                    this._items.splice(index, 0, item);\n                }\n\n                item.setParent(this);\n            }\n            else {\n                throw new Error(Strings.errors.elementTypeNotStandalone(item.getJsonTypeName()));\n            }\n        }\n        else {\n            throw new Error(Strings.errors.elementAlreadyParented());\n        }\n    }\n\n    protected supportsExcplitiHeight(): boolean {\n        return true;\n    }\n\n    protected getItemsCollectionPropertyName(): string {\n        return \"items\";\n    }\n\n    protected applyBackground() {\n        if (this.backgroundImage.isValid() && this.renderedElement) {\n            this.backgroundImage.apply(this);\n        }\n\n        super.applyBackground();\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        this._renderedItems = [];\n\n        // Cache hostConfig to avoid walking the parent hierarchy several times\n        let hostConfig = this.hostConfig;\n\n        let element = document.createElement(\"div\");\n\n        if (this.rtl !== undefined && this.rtl) {\n            element.dir = \"rtl\";\n        }\n\n        element.classList.add(hostConfig.makeCssClassName(\"ac-container\"));\n        element.style.display = \"flex\";\n        element.style.flexDirection = \"column\";\n\n        if (GlobalSettings.useAdvancedCardBottomTruncation) {\n            // Forces the container to be at least as tall as its content.\n            //\n            // Fixes a quirk in Chrome where, for nested flex elements, the\n            // inner element's height would never exceed the outer element's\n            // height. This caused overflow truncation to break -- containers\n            // would always be measured as not overflowing, since their heights\n            // were constrained by their parents as opposed to truly reflecting\n            // the height of their content.\n            //\n            // See the \"Browser Rendering Notes\" section of this answer:\n            // https://stackoverflow.com/questions/36247140/why-doesnt-flex-item-shrink-past-content-size\n            element.style.minHeight = '-webkit-min-content';\n        }\n\n        switch (this.verticalContentAlignment) {\n            case Enums.VerticalAlignment.Center:\n                element.style.justifyContent = \"center\";\n                break;\n            case Enums.VerticalAlignment.Bottom:\n                element.style.justifyContent = \"flex-end\";\n                break;\n            default:\n                element.style.justifyContent = \"flex-start\";\n                break;\n        }\n\n        if (this._items.length > 0) {\n            for (let item of this._items) {\n                let renderedItem = this.isElementAllowed(item) ? item.render() : undefined;\n\n                if (renderedItem) {\n                    if (this._renderedItems.length > 0 && item.separatorElement) {\n                        item.separatorElement.style.flex = \"0 0 auto\";\n\n                        Utils.appendChild(element, item.separatorElement);\n                    }\n\n                    Utils.appendChild(element, renderedItem);\n\n                    this._renderedItems.push(item);\n                }\n            }\n        }\n        else {\n            if (this.isDesignMode()) {\n                let placeholderElement = this.createPlaceholderElement();\n                placeholderElement.style.width = \"100%\";\n                placeholderElement.style.height = \"100%\";\n\n                element.appendChild(placeholderElement);\n            }\n        }\n\n        return element;\n    }\n\n    protected truncateOverflow(maxHeight: number): boolean {\n        if (this.renderedElement) {\n            // Add 1 to account for rounding differences between browsers\n            let boundary = this.renderedElement.offsetTop + maxHeight + 1;\n\n            let handleElement = (cardElement: CardElement) => {\n                let elt = cardElement.renderedElement;\n\n                if (elt) {\n                    switch (Utils.getFitStatus(elt, boundary)) {\n                        case Enums.ContainerFitStatus.FullyInContainer:\n                            let sizeChanged = cardElement['resetOverflow']();\n                            // If the element's size changed after resetting content,\n                            // we have to check if it still fits fully in the card\n                            if (sizeChanged) {\n                                handleElement(cardElement);\n                            }\n                            break;\n                        case Enums.ContainerFitStatus.Overflowing:\n                            let maxHeight = boundary - elt.offsetTop;\n                            cardElement['handleOverflow'](maxHeight);\n                            break;\n                        case Enums.ContainerFitStatus.FullyOutOfContainer:\n                            cardElement['handleOverflow'](0);\n                            break;\n                    }\n                }\n            };\n\n            for (let item of this._items) {\n                handleElement(item);\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    protected undoOverflowTruncation() {\n        for (let item of this._items) {\n            item['resetOverflow']();\n        }\n    }\n\n    protected getHasBackground(): boolean {\n        return this.backgroundImage.isValid() || super.getHasBackground();\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this.clear();\n        this.setShouldFallback(false);\n\n        let jsonItems = source[this.getItemsCollectionPropertyName()];\n\n        if (Array.isArray(jsonItems)) {\n            for (let item of jsonItems) {\n                let element = context.parseElement(this, item, !this.isDesignMode());\n\n                if (element) {\n                    this.insertItemAt(element, -1, true);\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        context.serializeArray(target, this.getItemsCollectionPropertyName(), this._items);\n    }\n\n    protected get isSelectable(): boolean {\n        return true;\n    }\n\n    getItemCount(): number {\n        return this._items.length;\n    }\n\n    getItemAt(index: number): CardElement {\n        return this._items[index];\n    }\n\n    getFirstVisibleRenderedItem(): CardElement | undefined {\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\n            for (let item of this._renderedItems) {\n                if (item.isVisible) {\n                    return item;\n                }\n            };\n        }\n\n        return undefined;\n    }\n\n    getLastVisibleRenderedItem(): CardElement | undefined {\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\n            for (let i = this._renderedItems.length - 1; i >= 0; i--) {\n                if (this._renderedItems[i].isVisible) {\n                    return this._renderedItems[i];\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    getJsonTypeName(): string {\n        return \"Container\";\n    }\n\n    isFirstElement(element: CardElement): boolean {\n        let designMode = this.isDesignMode();\n\n        for (let item of this._items) {\n            if (item.isVisible || designMode) {\n                return item == element;\n            }\n        }\n\n        return false;\n    }\n\n    isLastElement(element: CardElement): boolean {\n        let designMode = this.isDesignMode();\n\n        for (let i = this._items.length - 1; i >= 0; i--) {\n            if (this._items[i].isVisible || designMode) {\n                return this._items[i] == element;\n            }\n        }\n\n        return false;\n    }\n\n    isRtl(): boolean {\n        if (this.rtl !== undefined) {\n            return this.rtl;\n        }\n        else {\n            let parentContainer = this.getParentContainer();\n\n            return parentContainer ? parentContainer.isRtl() : false;\n        }\n    }\n\n    isBleedingAtTop(): boolean {\n        let firstRenderedItem = this.getFirstVisibleRenderedItem();\n\n        return this.isBleeding() || (firstRenderedItem ? firstRenderedItem.isBleedingAtTop() : false);\n    }\n\n    isBleedingAtBottom(): boolean {\n        let lastRenderedItem = this.getLastVisibleRenderedItem();\n\n        return this.isBleeding() || (lastRenderedItem ? lastRenderedItem.isBleedingAtBottom() && lastRenderedItem.getEffectiveStyle() == this.getEffectiveStyle() : false);\n    }\n\n    indexOf(cardElement: CardElement): number {\n        return this._items.indexOf(cardElement);\n    }\n\n    addItem(item: CardElement) {\n        this.insertItemAt(item, -1, false);\n    }\n\n    insertItemBefore(item: CardElement, insertBefore: CardElement) {\n        this.insertItemAt(item, this._items.indexOf(insertBefore), false);\n    }\n\n    insertItemAfter(item: CardElement, insertAfter: CardElement) {\n        this.insertItemAt(item, this._items.indexOf(insertAfter) + 1, false);\n    }\n\n    removeItem(item: CardElement): boolean {\n        let itemIndex = this._items.indexOf(item);\n\n        if (itemIndex >= 0) {\n            this._items.splice(itemIndex, 1);\n\n            item.setParent(undefined);\n\n            this.updateLayout();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    clear() {\n        this._items = [];\n        this._renderedItems = [];\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        let result = super.getResourceInformation();\n\n        if (this.backgroundImage.isValid()) {\n            result.push(\n                {\n                    url: <string>this.backgroundImage.url,\n                    mimeType: \"image\"\n                }\n            );\n        }\n\n        return result;\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = super.getActionById(id);\n\n        if (!result) {\n            if (this.selectAction) {\n                result = this.selectAction.getActionById(id);\n            }\n\n            if (!result) {\n                for (let item of this._items) {\n                    result = item.getActionById(id);\n\n                    if (result) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    get padding(): PaddingDefinition | undefined {\n        return this.getPadding();\n    }\n\n    set padding(value: PaddingDefinition | undefined) {\n        this.setPadding(value);\n    }\n\n    get selectAction(): Action | undefined {\n        return this._selectAction;\n    }\n\n    set selectAction(value: Action | undefined) {\n        this._selectAction = value;\n    }\n\n    get bleed(): boolean {\n        return this.getBleed();\n    }\n\n    set bleed(value: boolean) {\n        this.setBleed(value);\n    }\n}\n\nexport type ColumnWidth = SizeAndUnit | \"auto\" | \"stretch\";\n\nexport class Column extends Container {\n    //#region Schema\n\n    static readonly widthProperty = new CustomProperty<ColumnWidth>(\n        Versions.v1_0,\n        \"width\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            let result: ColumnWidth = property.defaultValue;\n            let value = source[property.name];\n            let invalidWidth = false;\n\n            if (typeof value === \"number\" && !isNaN(value)) {\n                result = new SizeAndUnit(value, Enums.SizeUnit.Weight);\n            }\n            else if (value === \"auto\" || value === \"stretch\") {\n                result = value;\n            }\n            else if (typeof value === \"string\") {\n                try {\n                    result = SizeAndUnit.parse(value);\n\n                    if (result.unit === Enums.SizeUnit.Pixel && property.targetVersion.compareTo(context.targetVersion) > 0) {\n                        invalidWidth = true;\n                    }\n                }\n                catch (e) {\n                    invalidWidth = true;\n                }\n            }\n            else {\n                invalidWidth = true;\n            }\n\n            if (invalidWidth) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidColumnWidth(value));\n\n                result = \"auto\";\n            }\n\n            return result;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: ColumnWidth, context: BaseSerializationContext) => {\n            if (value instanceof SizeAndUnit) {\n                if (value.unit === Enums.SizeUnit.Pixel) {\n                    context.serializeValue(target, \"width\", value.physicalSize + \"px\");\n                }\n                else {\n                    context.serializeNumber(target, \"width\", value.physicalSize);\n                }\n            }\n            else {\n                context.serializeValue(target, \"width\", value);\n            }\n        },\n        \"stretch\");\n\n    @property(Column.widthProperty)\n    width: ColumnWidth = \"stretch\";\n\n    //#endregion\n\n    private _computedWeight: number = 0;\n\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\n        const minDesignTimeColumnHeight = 20;\n\n        if (this.isDesignMode()) {\n            renderedElement.style.minWidth = \"20px\";\n            renderedElement.style.minHeight = (!this.minPixelHeight ? minDesignTimeColumnHeight : Math.max(this.minPixelHeight, minDesignTimeColumnHeight)) + \"px\";\n        }\n        else {\n            renderedElement.style.minWidth = \"0\";\n\n            if (this.minPixelHeight) {\n                renderedElement.style.minHeight = this.minPixelHeight + \"px\";\n            }\n        }\n\n        if (this.width === \"auto\") {\n            renderedElement.style.flex = \"0 1 auto\";\n        }\n        else if (this.width === \"stretch\") {\n            renderedElement.style.flex = \"1 1 50px\";\n        }\n        else if (this.width instanceof SizeAndUnit) {\n            if (this.width.unit == Enums.SizeUnit.Pixel) {\n                renderedElement.style.flex = \"0 0 auto\";\n                renderedElement.style.width = this.width.physicalSize + \"px\";\n            }\n            else {\n                renderedElement.style.flex = \"1 1 \" + (this._computedWeight > 0 ? this._computedWeight : this.width.physicalSize) + \"%\";\n            }\n        }\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return true;\n    }\n\n    protected get separatorOrientation(): Enums.Orientation {\n        return Enums.Orientation.Vertical;\n    }\n\n    constructor(width: ColumnWidth = \"stretch\") {\n        super();\n\n        this.width = width;\n    }\n\n    getJsonTypeName(): string {\n        return \"Column\";\n    }\n\n    get hasVisibleSeparator(): boolean {\n        if (this.parent && this.parent instanceof ColumnSet) {\n            return this.separatorElement !== undefined && !this.parent.isLeftMostElement(this);\n        }\n        else {\n            return false;\n        }\n    }\n\n    get isStandalone(): boolean {\n        return false;\n    }\n}\n\nexport class ColumnSet extends StylableCardElementContainer {\n    private _columns: Column[] = [];\n    private _renderedColumns: Column[];\n\n    private createColumnInstance(source: any, context: SerializationContext): Column | undefined {\n        return context.parseCardObject<Column>(\n            this,\n            source,\n            [], // Forbidden types not supported for elements for now\n            !this.isDesignMode(),\n            (typeName: string) => {\n                return !typeName || typeName === \"Column\" ? new Column() : undefined;\n            },\n            (typeName: string, errorType: TypeErrorType) => {\n                context.logParseEvent(\n                    undefined,\n                    Enums.ValidationEvent.ElementTypeNotAllowed,\n                    Strings.errors.elementTypeNotAllowed(typeName));\n            });\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        this._renderedColumns = [];\n\n        if (this._columns.length > 0) {\n            // Cache hostConfig to avoid walking the parent hierarchy several times\n            let hostConfig = this.hostConfig;\n\n            let element = document.createElement(\"div\");\n            element.className = hostConfig.makeCssClassName(\"ac-columnSet\");\n            element.style.display = \"flex\";\n\n            if (GlobalSettings.useAdvancedCardBottomTruncation) {\n                // See comment in Container.internalRender()\n                element.style.minHeight = '-webkit-min-content';\n            }\n\n            switch (this.horizontalAlignment) {\n                case Enums.HorizontalAlignment.Center:\n                    element.style.justifyContent = \"center\";\n                    break;\n                case Enums.HorizontalAlignment.Right:\n                    element.style.justifyContent = \"flex-end\";\n                    break;\n                default:\n                    element.style.justifyContent = \"flex-start\";\n                    break;\n            }\n\n            let totalWeight: number = 0;\n\n            for (let column of this._columns) {\n                if (column.width instanceof SizeAndUnit && (column.width.unit == Enums.SizeUnit.Weight)) {\n                    totalWeight += column.width.physicalSize;\n                }\n            }\n\n            for (let column of this._columns) {\n                if (column.width instanceof SizeAndUnit && column.width.unit == Enums.SizeUnit.Weight && totalWeight > 0) {\n                    let computedWeight = 100 / totalWeight * column.width.physicalSize;\n\n                    // Best way to emulate \"internal\" access I know of\n                    column[\"_computedWeight\"] = computedWeight;\n                }\n\n                let renderedColumn = column.render();\n\n                if (renderedColumn) {\n                    if (this._renderedColumns.length > 0 && column.separatorElement) {\n                        column.separatorElement.style.flex = \"0 0 auto\";\n\n                        Utils.appendChild(element, column.separatorElement);\n                    }\n\n                    Utils.appendChild(element, renderedColumn);\n\n                    this._renderedColumns.push(column);\n                }\n            }\n\n            return this._renderedColumns.length > 0 ? element : undefined;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    protected truncateOverflow(maxHeight: number): boolean {\n        for (let column of this._columns) {\n            column['handleOverflow'](maxHeight);\n        }\n\n        return true;\n    }\n\n    protected undoOverflowTruncation() {\n        for (let column of this._columns) {\n            column['resetOverflow']();\n        }\n    }\n\n    protected get isSelectable(): boolean {\n        return true;\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._columns = [];\n        this._renderedColumns = [];\n\n        let jsonColumns = source[\"columns\"];\n\n        if (Array.isArray(jsonColumns)) {\n            for (let item of jsonColumns) {\n                let column = this.createColumnInstance(item, context);\n\n                if (column) {\n                    this._columns.push(column);\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        context.serializeArray(target, \"columns\", this._columns);\n    }\n\n    isFirstElement(element: CardElement): boolean {\n        for (let column of this._columns) {\n            if (column.isVisible) {\n                return column == element;\n            }\n        }\n\n        return false;\n    }\n\n    isBleedingAtTop(): boolean {\n        if (this.isBleeding()) {\n            return true;\n        }\n\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\n            for (let column of this._columns) {\n                if (column.isBleedingAtTop()) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    isBleedingAtBottom(): boolean {\n        if (this.isBleeding()) {\n            return true;\n        }\n\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\n            for (let column of this._columns) {\n                if (column.isBleedingAtBottom()) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    getItemCount(): number {\n        return this._columns.length;\n    }\n\n    getFirstVisibleRenderedItem(): CardElement | undefined {\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\n            return this._renderedColumns[0];\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    getLastVisibleRenderedItem(): CardElement | undefined {\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\n            return this._renderedColumns[this._renderedColumns.length - 1];\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    getColumnAt(index: number): Column {\n        return this._columns[index];\n    }\n\n    getItemAt(index: number): CardElement {\n        return this.getColumnAt(index);\n    }\n\n    getJsonTypeName(): string {\n        return \"ColumnSet\";\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        let weightedColumns: number = 0;\n        let stretchedColumns: number = 0;\n\n        for (let column of this._columns) {\n            if (typeof column.width === \"number\") {\n                weightedColumns++;\n            }\n            else if (column.width === \"stretch\") {\n                stretchedColumns++;\n            }\n        }\n\n        if (weightedColumns > 0 && stretchedColumns > 0) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.Hint,\n                Strings.hints.dontUseWeightedAndStrecthedColumnsInSameSet());\n        }\n    }\n\n    addColumn(column: Column) {\n        if (!column.parent) {\n            this._columns.push(column);\n\n            column.setParent(this);\n        }\n        else {\n            throw new Error(Strings.errors.columnAlreadyBelongsToAnotherSet());\n        }\n    }\n\n    removeItem(item: CardElement): boolean {\n        if (item instanceof Column) {\n            let itemIndex = this._columns.indexOf(item);\n\n            if (itemIndex >= 0) {\n                this._columns.splice(itemIndex, 1);\n\n                item.setParent(undefined);\n\n                this.updateLayout();\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    indexOf(cardElement: CardElement): number {\n        return cardElement instanceof Column ? this._columns.indexOf(cardElement) : -1;\n    }\n\n    isLeftMostElement(element: CardElement): boolean {\n        return this._columns.indexOf(<Column>element) == 0;\n    }\n\n    isRightMostElement(element: CardElement): boolean {\n        return this._columns.indexOf(<Column>element) == this._columns.length - 1;\n    }\n\n    isTopElement(element: CardElement): boolean {\n        return this._columns.indexOf(<Column>element) >= 0;\n    }\n\n    isBottomElement(element: CardElement): boolean {\n        return this._columns.indexOf(<Column>element) >= 0;\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = undefined;\n\n        for (let column of this._columns) {\n            result = column.getActionById(id);\n\n            if (result) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    get bleed(): boolean {\n        return this.getBleed();\n    }\n\n    set bleed(value: boolean) {\n        this.setBleed(value);\n    }\n\n    get padding(): PaddingDefinition | undefined {\n        return this.getPadding();\n    }\n\n    set padding(value: PaddingDefinition | undefined) {\n        this.setPadding(value);\n    }\n\n    get selectAction(): Action | undefined {\n        return this._selectAction;\n    }\n\n    set selectAction(value: Action | undefined) {\n        this._selectAction = value;\n    }\n}\n\nfunction raiseImageLoadedEvent(image: Image) {\n    let card = image.getRootElement() as AdaptiveCard;\n    let onImageLoadedHandler = (card && card.onImageLoaded) ? card.onImageLoaded : AdaptiveCard.onImageLoaded;\n\n    if (onImageLoadedHandler) {\n        onImageLoadedHandler(image);\n    }\n}\n\nfunction raiseAnchorClickedEvent(element: CardElement, anchor: HTMLAnchorElement, ev?: MouseEvent): boolean {\n    let card = element.getRootElement() as AdaptiveCard;\n    let onAnchorClickedHandler = (card && card.onAnchorClicked) ? card.onAnchorClicked : AdaptiveCard.onAnchorClicked;\n\n    return onAnchorClickedHandler !== undefined ? onAnchorClickedHandler(element, anchor, ev) : false;\n}\n\nfunction raiseExecuteActionEvent(action: Action) {\n    let card = action.parent ? action.parent.getRootElement() as AdaptiveCard : undefined;\n    let onExecuteActionHandler = (card && card.onExecuteAction) ? card.onExecuteAction : AdaptiveCard.onExecuteAction;\n\n    if (action.prepareForExecution() && onExecuteActionHandler) {\n        onExecuteActionHandler(action);\n    }\n}\n\nfunction raiseInlineCardExpandedEvent(action: ShowCardAction, isExpanded: boolean) {\n    let card = action.parent ? action.parent.getRootElement() as AdaptiveCard : undefined;\n    let onInlineCardExpandedHandler = (card && card.onInlineCardExpanded) ? card.onInlineCardExpanded : AdaptiveCard.onInlineCardExpanded;\n\n    if (onInlineCardExpandedHandler) {\n        onInlineCardExpandedHandler(action, isExpanded);\n    }\n}\n\nfunction raiseInputValueChangedEvent(input: Input) {\n    let card = input.getRootElement() as AdaptiveCard;\n    let onInputValueChangedHandler = (card && card.onInputValueChanged) ? card.onInputValueChanged : AdaptiveCard.onInputValueChanged;\n\n    if (onInputValueChangedHandler) {\n        onInputValueChangedHandler(input);\n    }\n}\n\nfunction raiseElementVisibilityChangedEvent(element: CardElement, shouldUpdateLayout: boolean = true) {\n    let rootElement = element.getRootElement();\n\n    if (shouldUpdateLayout) {\n        rootElement.updateLayout();\n    }\n\n    let card = rootElement as AdaptiveCard;\n    let onElementVisibilityChangedHandler = (card && card.onElementVisibilityChanged) ? card.onElementVisibilityChanged : AdaptiveCard.onElementVisibilityChanged;\n\n    if (onElementVisibilityChangedHandler !== undefined) {\n        onElementVisibilityChangedHandler(element);\n    }\n}\n\nexport abstract class ContainerWithActions extends Container {\n    private _actionCollection: ActionCollection;\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._actionCollection.parse(source[\"actions\"], context);\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        this._actionCollection.toJSON(target, \"actions\", context);\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let element = super.internalRender();\n\n        if (element) {\n            let renderedActions = this._actionCollection.render(this.hostConfig.actions.actionsOrientation, false);\n\n            if (renderedActions) {\n                Utils.appendChild(\n                    element,\n                    Utils.renderSeparation(\n                        this.hostConfig,\n                        {\n                            spacing: this.hostConfig.getEffectiveSpacing(this.hostConfig.actions.spacing)\n                        },\n                        Enums.Orientation.Horizontal));\n                Utils.appendChild(element, renderedActions);\n            }\n\n            if (this.renderIfEmpty) {\n                return element;\n            }\n            else {\n                return element.children.length > 0 ? element : undefined;\n            }\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    protected getHasExpandedAction(): boolean {\n        if (this.renderedActionCount == 0) {\n            return false;\n        }\n        else if (this.renderedActionCount == 1) {\n            return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\n        }\n        else {\n            return this._actionCollection.expandedAction !== undefined;\n        }\n    }\n\n    protected get renderedActionCount(): number {\n        return this._actionCollection.renderedActionCount;\n    }\n\n    protected get renderIfEmpty(): boolean {\n        return false;\n    }\n\n    constructor() {\n        super();\n\n        this._actionCollection = new ActionCollection(this);\n    }\n\n    getActionCount(): number {\n        return this._actionCollection.items.length;\n    }\n\n    getActionAt(index: number): Action | undefined {\n        if (index >= 0 && index < this.getActionCount()) {\n            return this._actionCollection.items[index];\n        }\n        else {\n            return super.getActionAt(index);\n        }\n    }\n\n    getActionById(id: string): Action | undefined {\n        let result: Action | undefined = this._actionCollection.getActionById(id);\n\n        return result ? result : super.getActionById(id);\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (this._actionCollection) {\n            this._actionCollection.validateProperties(context);\n        }\n    }\n\n    isLastElement(element: CardElement): boolean {\n        return super.isLastElement(element) && this._actionCollection.items.length == 0;\n    }\n\n    addAction(action: Action) {\n        this._actionCollection.addAction(action);\n    }\n\n    clear() {\n        super.clear();\n\n        this._actionCollection.clear();\n    }\n\n    getAllInputs(processActions: boolean = true): Input[] {\n        let result = super.getAllInputs(processActions);\n\n        if (processActions) {\n            result = result.concat(this._actionCollection.getAllInputs(processActions));\n        }\n\n        return result;\n    }\n\n    getResourceInformation(): IResourceInformation[] {\n        return super.getResourceInformation().concat(this._actionCollection.getResourceInformation());\n    }\n\n    isBleedingAtBottom(): boolean {\n        if (this._actionCollection.renderedActionCount == 0) {\n            return super.isBleedingAtBottom();\n        }\n        else {\n            if (this._actionCollection.items.length == 1) {\n                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\n            }\n            else {\n                return this._actionCollection.expandedAction !== undefined;\n            }\n        }\n    }\n\n    get isStandalone(): boolean {\n        return false;\n    }\n}\n\nexport interface IMarkdownProcessingResult {\n    didProcess: boolean;\n    outputHtml?: any;\n}\n\nexport class RefreshActionProperty extends PropertyDefinition {\n    parse(sender: RefreshDefinition, source: PropertyBag, context: SerializationContext): ExecuteAction | undefined {\n        let action = context.parseAction(\n            sender.parent,\n            source[this.name],\n            [],\n            false);\n\n        if (action !== undefined) {\n            if (action instanceof ExecuteAction) {\n                return action;\n            }\n\n            context.logParseEvent(\n                sender,\n                Enums.ValidationEvent.ActionTypeNotAllowed,\n                Strings.errors.actionTypeNotAllowed(action.getJsonTypeName()));\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.PropertyCantBeNull,\n            Strings.errors.propertyMustBeSet(\"action\"));\n\n        return undefined;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: ExecuteAction | undefined, context: SerializationContext) {\n        context.serializeValue(target, this.name, value ? value.toJSON(context) : undefined, undefined, true);\n    }\n\n    constructor(readonly targetVersion: Version, readonly name: string) {\n        super(targetVersion, name, undefined);\n    }\n}\n\nexport class RefreshDefinition extends SerializableObject {\n    //#region Schema\n\n    static readonly actionProperty = new RefreshActionProperty(Versions.v1_4, \"action\");\n    static readonly userIdsProperty = new StringArrayProperty(Versions.v1_4, \"userIds\");\n\n    @property(RefreshDefinition.actionProperty)\n    get action(): ExecuteAction {\n        return this.getValue(RefreshDefinition.actionProperty);\n    }\n\n    set action(value: ExecuteAction) {\n        this.setValue(RefreshDefinition.actionProperty, value);\n\n        if (value) {\n            value.setParent(this.parent);\n        }\n    }\n\n    @property(RefreshDefinition.userIdsProperty)\n    userIds?: string[];\n\n    protected getSchemaKey(): string {\n        return \"RefreshDefinition\";\n    }\n\n    //#endregion\n\n    parent: CardElement;\n}\n\nexport class AuthCardButton extends SerializableObject {\n    //#region Schema\n\n    static readonly typeProperty = new StringProperty(Versions.v1_4, \"type\");\n    static readonly titleProperty = new StringProperty(Versions.v1_4, \"title\");\n    static readonly imageProperty = new StringProperty(Versions.v1_4, \"image\");\n    static readonly valueProperty = new StringProperty(Versions.v1_4, \"value\");\n\n    protected getSchemaKey(): string {\n        return \"AuthCardButton\";\n    }\n\n    //#endregion\n\n    @property(AuthCardButton.typeProperty)\n    type: string;\n\n    @property(AuthCardButton.titleProperty)\n    title?: string;\n\n    @property(AuthCardButton.imageProperty)\n    image?: string;\n\n    @property(AuthCardButton.valueProperty)\n    value: string;\n}\n\nexport class TokenExchangeResource extends SerializableObject {\n    //#region Schema\n\n    static readonly idProperty = new StringProperty(Versions.v1_4, \"id\");\n    static readonly uriProperty = new StringProperty(Versions.v1_4, \"uri\");\n    static readonly providerIdProperty = new StringProperty(Versions.v1_4, \"providerId\");\n\n    protected getSchemaKey(): string {\n        return \"TokenExchangeResource\";\n    }\n\n    //#endregion\n\n    @property(TokenExchangeResource.idProperty)\n    id?: string;\n\n    @property(TokenExchangeResource.uriProperty)\n    uri?: string;\n\n    @property(TokenExchangeResource.providerIdProperty)\n    providerId?: string;\n}\n\nexport class Authentication extends SerializableObject {\n    //#region Schema\n\n    static readonly textProperty = new StringProperty(Versions.v1_4, \"text\");\n    static readonly connectionNameProperty = new StringProperty(Versions.v1_4, \"connectionName\");\n    static readonly buttonsProperty = new SerializableObjectCollectionProperty(Versions.v1_4, \"buttons\", AuthCardButton);\n    static readonly tokenExchangeResourceProperty = new SerializableObjectProperty(Versions.v1_4, \"tokenExchangeResource\", TokenExchangeResource, true);\n\n    protected getSchemaKey(): string {\n        return \"Authentication\";\n    }\n\n    //#endregion\n\n    @property(Authentication.textProperty)\n    text?: string;\n\n    @property(Authentication.connectionNameProperty)\n    connectionName?: string;\n\n    @property(Authentication.buttonsProperty)\n    buttons: AuthCardButton[];\n\n    @property(Authentication.tokenExchangeResourceProperty)\n    tokenExchangeResource?: TokenExchangeResource;\n}\n\n// @dynamic\nexport class AdaptiveCard extends ContainerWithActions {\n    static readonly schemaUrl = \"http://adaptivecards.io/schemas/adaptive-card.json\";\n\n    //#region Schema\n\n    protected static readonly $schemaProperty = new CustomProperty<string>(\n        Versions.v1_0,\n        \"$schema\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            return AdaptiveCard.schemaUrl;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: Versions | undefined, context: BaseSerializationContext) => {\n            context.serializeValue(target, property.name, AdaptiveCard.schemaUrl);\n        });\n\n    static readonly versionProperty = new CustomProperty<Version | undefined>(\n        Versions.v1_0,\n        \"version\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            let version = Version.parse(source[property.name], context);\n\n            if (version === undefined) {\n                version = Versions.latest;\n\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidCardVersion(version.toString()));\n            }\n\n            return version;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: Versions | undefined, context: BaseSerializationContext) => {\n            if (value !== undefined) {\n                context.serializeValue(target, property.name, value.toString());\n            }\n        },\n        Versions.v1_0);\n    static readonly fallbackTextProperty = new StringProperty(Versions.v1_0, \"fallbackText\");\n    static readonly speakProperty = new StringProperty(Versions.v1_0, \"speak\");\n    static readonly refreshProperty = new SerializableObjectProperty(Versions.v1_4, \"refresh\", RefreshDefinition, true);\n    static readonly authenticationProperty = new SerializableObjectProperty(Versions.v1_4, \"authentication\", Authentication, true);\n\n    @property(AdaptiveCard.versionProperty)\n    version: Version;\n\n    @property(AdaptiveCard.fallbackTextProperty)\n    fallbackText?: string;\n\n    @property(AdaptiveCard.speakProperty)\n    speak?: string;\n\n    @property(AdaptiveCard.refreshProperty)\n    get refresh(): RefreshDefinition | undefined {\n        return this.getValue(AdaptiveCard.refreshProperty);\n    }\n\n    set refresh(value: RefreshDefinition | undefined) {\n        this.setValue(AdaptiveCard.refreshProperty, value);\n\n        if (value) {\n            value.parent = this;\n        }\n    }\n\n    @property(AdaptiveCard.authenticationProperty)\n    authentication?: Authentication;\n\n    //#endregion\n\n    static onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement, ev?: MouseEvent) => boolean;\n    static onExecuteAction?: (action: Action) => void;\n    static onElementVisibilityChanged?: (element: CardElement) => void;\n    static onImageLoaded?: (image: Image) => void;\n    static onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\n    static onInputValueChanged?: (input: Input) => void;\n    static onProcessMarkdown?: (text: string, result: IMarkdownProcessingResult) => void;\n\n    static get processMarkdown(): (text: string) => string {\n        throw new Error(Strings.errors.processMarkdownEventRemoved());\n    }\n\n    static set processMarkdown(value: (text: string) => string) {\n        throw new Error(Strings.errors.processMarkdownEventRemoved());\n    }\n\n    static applyMarkdown(text: string): IMarkdownProcessingResult {\n        let result: IMarkdownProcessingResult = {\n            didProcess: false\n        };\n\n        if (AdaptiveCard.onProcessMarkdown) {\n            AdaptiveCard.onProcessMarkdown(text, result);\n        }\n        else if ((<any>window).markdownit) {\n            // Check for markdownit\n            let markdownIt: any = (<any>window).markdownit;\n            result.outputHtml = markdownIt().render(text);\n            result.didProcess = true;\n        }\n        else {\n            console.warn(Strings.errors.markdownProcessingNotEnabled)\n        }\n\n        return result;\n    }\n\n    private _fallbackCard?: AdaptiveCard;\n\n    private isVersionSupported(): boolean {\n        if (this.bypassVersionCheck) {\n            return true;\n        }\n        else {\n            let unsupportedVersion: boolean =\n                !this.version ||\n                !this.version.isValid ||\n                (this.maxVersion.major < this.version.major) ||\n                (this.maxVersion.major == this.version.major && this.maxVersion.minor < this.version.minor);\n\n            return !unsupportedVersion;\n        }\n    }\n\n    protected getDefaultSerializationContext(): BaseSerializationContext {\n        return new SerializationContext(this.version);\n    }\n\n    protected getItemsCollectionPropertyName(): string {\n        return \"body\";\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        this._fallbackCard = undefined;\n\n        let fallbackElement = context.parseElement(undefined, source[\"fallback\"], !this.isDesignMode());\n\n        if (fallbackElement) {\n            this._fallbackCard = new AdaptiveCard();\n            this._fallbackCard.addItem(fallbackElement);\n        }\n\n        super.internalParse(source, context);\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        this.setValue(AdaptiveCard.versionProperty, context.targetVersion);\n\n        super.internalToJSON(target, context);\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let renderedElement = super.internalRender();\n\n        if (GlobalSettings.useAdvancedCardBottomTruncation && renderedElement) {\n            // Unlike containers, the root card element should be allowed to\n            // be shorter than its content (otherwise the overflow truncation\n            // logic would never get triggered)\n            renderedElement.style.removeProperty(\"minHeight\");\n        }\n\n        return renderedElement;\n    }\n\n    protected getHasBackground(): boolean {\n        return true;\n    }\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return new PaddingDefinition(\n            Enums.Spacing.Padding,\n            Enums.Spacing.Padding,\n            Enums.Spacing.Padding,\n            Enums.Spacing.Padding);\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return true;\n    }\n\n    protected get renderIfEmpty(): boolean {\n        return true;\n    }\n\n    protected get bypassVersionCheck(): boolean {\n        return false;\n    }\n\n    protected get allowCustomStyle() {\n        return this.hostConfig.adaptiveCard && this.hostConfig.adaptiveCard.allowCustomStyle;\n    }\n\n    protected get hasBackground(): boolean {\n        return true;\n    }\n\n    onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement, ev?: MouseEvent) => boolean;\n    onExecuteAction?: (action: Action) => void;\n    onElementVisibilityChanged?: (element: CardElement) => void;\n    onImageLoaded?: (image: Image) => void;\n    onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\n    onInputValueChanged?: (input: Input) => void;\n\n    designMode: boolean = false;\n\n    getJsonTypeName(): string {\n        return \"AdaptiveCard\";\n    }\n\n    internalValidateProperties(context: ValidationResults) {\n        super.internalValidateProperties(context);\n\n        if (this.getValue(CardElement.typeNameProperty) !== \"AdaptiveCard\") {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.MissingCardType,\n                Strings.errors.invalidCardType());\n        }\n\n        if (!this.bypassVersionCheck && !this.version) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.PropertyCantBeNull,\n                Strings.errors.propertyMustBeSet(\"version\"));\n        }\n        else if (!this.isVersionSupported()) {\n            context.addFailure(\n                this,\n                Enums.ValidationEvent.UnsupportedCardVersion,\n                Strings.errors.unsupportedCardVersion(this.version.toString(), this.maxVersion.toString()));\n        }\n    }\n\n    render(target?: HTMLElement): HTMLElement | undefined {\n        let renderedCard: HTMLElement | undefined;\n\n        if (this.shouldFallback() && this._fallbackCard) {\n            this._fallbackCard.hostConfig = this.hostConfig;\n\n            renderedCard = this._fallbackCard.render();\n        }\n        else {\n            renderedCard = super.render();\n\n            if (renderedCard) {\n                renderedCard.classList.add(this.hostConfig.makeCssClassName(\"ac-adaptiveCard\"));\n\n                // Having a tabIndex on the root container for a card can mess up accessibility in some scenarios.\n                // However, we've shipped this behavior before, and so can't just turn it off in a point release. For\n                // now, to unblock accessibility scenarios for our customers, we've got an option to turn it off. In a\n                // future release, we should strongly consider flipping the default such that we *don't* emit a tabIndex\n                // by default.\n                if (GlobalSettings.setTabIndexAtCardRoot) {\n                    renderedCard.tabIndex = 0;\n                }\n\n                if (this.speak) {\n                    renderedCard.setAttribute(\"aria-label\", this.speak);\n                }\n            }\n        }\n\n        if (target) {\n            Utils.appendChild(target, renderedCard);\n\n            this.updateLayout();\n        }\n\n        return renderedCard;\n    }\n\n    updateLayout(processChildren: boolean = true) {\n        super.updateLayout(processChildren);\n\n        if (GlobalSettings.useAdvancedCardBottomTruncation && this.isDisplayed()) {\n            let padding = this.hostConfig.getEffectiveSpacing(Enums.Spacing.Default);\n\n            this['handleOverflow']((<HTMLElement>this.renderedElement).offsetHeight - padding);\n        }\n    }\n\n    shouldFallback(): boolean {\n        return super.shouldFallback() || !this.isVersionSupported();\n    }\n\n    get hasVisibleSeparator(): boolean {\n        return false;\n    }\n}\n\nclass InlineAdaptiveCard extends AdaptiveCard {\n    //#region Schema\n\n    protected getSchemaKey(): string {\n        return \"InlineAdaptiveCard\";\n    }\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        super.populateSchema(schema);\n\n        schema.remove(\n            AdaptiveCard.$schemaProperty,\n            AdaptiveCard.versionProperty);\n    }\n\n    //#endregion\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return new PaddingDefinition(\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\n            Enums.Spacing.Padding,\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\n            Enums.Spacing.Padding);\n    }\n\n    protected get bypassVersionCheck(): boolean {\n        return true;\n    }\n\n    protected get defaultStyle(): string {\n        if (this.suppressStyle) {\n            return Enums.ContainerStyle.Default;\n        }\n        else {\n            return this.hostConfig.actions.showCard.style ? this.hostConfig.actions.showCard.style : Enums.ContainerStyle.Emphasis;\n        }\n    }\n\n    suppressStyle: boolean = false;\n\n    render(target?: HTMLElement): HTMLElement | undefined {\n        let renderedCard = super.render(target);\n\n        if (renderedCard) {\n            renderedCard.setAttribute(\"aria-live\", \"polite\");\n            renderedCard.removeAttribute(\"tabindex\");\n        }\n\n        return renderedCard;\n    }\n}\n\nexport class GlobalRegistry {\n    static populateWithDefaultElements(registry: CardObjectRegistry<CardElement>) {\n        registry.clear();\n\n        registry.register(\"Container\", Container);\n        registry.register(\"TextBlock\", TextBlock);\n        registry.register(\"RichTextBlock\", RichTextBlock, Versions.v1_2);\n        registry.register(\"TextRun\", TextRun, Versions.v1_2);\n        registry.register(\"Image\", Image);\n        registry.register(\"ImageSet\", ImageSet);\n        registry.register(\"Media\", Media, Versions.v1_1);\n        registry.register(\"FactSet\", FactSet);\n        registry.register(\"ColumnSet\", ColumnSet);\n        registry.register(\"ActionSet\", ActionSet, Versions.v1_2);\n        registry.register(\"Input.Text\", TextInput);\n        registry.register(\"Input.Date\", DateInput);\n        registry.register(\"Input.Time\", TimeInput);\n        registry.register(\"Input.Number\", NumberInput);\n        registry.register(\"Input.ChoiceSet\", ChoiceSetInput);\n        registry.register(\"Input.Toggle\", ToggleInput);\n    }\n\n    static populateWithDefaultActions(registry: CardObjectRegistry<Action>) {\n        registry.clear();\n\n        registry.register(OpenUrlAction.JsonTypeName, OpenUrlAction);\n        registry.register(SubmitAction.JsonTypeName, SubmitAction);\n        registry.register(ShowCardAction.JsonTypeName, ShowCardAction);\n        registry.register(ToggleVisibilityAction.JsonTypeName, ToggleVisibilityAction, Versions.v1_2);\n        registry.register(ExecuteAction.JsonTypeName, ExecuteAction, Versions.v1_4);\n    }\n\n    static readonly elements = new CardObjectRegistry<CardElement>();\n    static readonly actions = new CardObjectRegistry<Action>();\n\n    static reset() {\n        GlobalRegistry.populateWithDefaultElements(GlobalRegistry.elements);\n        GlobalRegistry.populateWithDefaultActions(GlobalRegistry.actions);\n    }\n}\n\nGlobalRegistry.reset();\n\nconst enum TypeErrorType {\n    UnknownType,\n    ForbiddenType\n}\n\nexport class SerializationContext extends BaseSerializationContext {\n    private _elementRegistry?: CardObjectRegistry<CardElement>;\n    private _actionRegistry?: CardObjectRegistry<Action>;\n\n    private internalParseCardObject<T extends CardObject>(\n        parent: CardElement | undefined,\n        source: any,\n        forbiddenTypeNames: string[],\n        allowFallback: boolean,\n        createInstanceCallback: (typeName: string) => T | undefined,\n        logParseEvent: (typeName: string, errorType: TypeErrorType) => void): T | undefined {\n        let result: T | undefined = undefined;\n\n        if (source && typeof source === \"object\") {\n            let typeName = Utils.parseString(source[\"type\"]);\n\n            if (typeName) {\n                if (forbiddenTypeNames.indexOf(typeName) >= 0) {\n                    logParseEvent(typeName, TypeErrorType.ForbiddenType);\n                }\n                else {\n                    let tryToFallback = false;\n\n                    result = createInstanceCallback(typeName);\n\n                    if (!result) {\n                        tryToFallback = GlobalSettings.enableFallback && allowFallback;\n\n                        logParseEvent(typeName, TypeErrorType.UnknownType);\n                    }\n                    else {\n                        result.setParent(parent);\n                        result.parse(source, this);\n\n                        tryToFallback = GlobalSettings.enableFallback && allowFallback && result.shouldFallback();\n                    }\n\n                    if (tryToFallback) {\n                        let fallback = source[\"fallback\"];\n\n                        if (!fallback && parent) {\n                            parent.setShouldFallback(true);\n                        }\n                        if (typeof fallback === \"string\" && fallback.toLowerCase() === \"drop\") {\n                            result = undefined;\n                        }\n                        else if (typeof fallback === \"object\") {\n                            result = this.internalParseCardObject<T>(\n                                parent,\n                                fallback,\n                                forbiddenTypeNames,\n                                true,\n                                createInstanceCallback,\n                                logParseEvent);\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    protected cardObjectParsed(o: SerializableObject, source: any) {\n        if (o instanceof Action && this.onParseAction) {\n            this.onParseAction(o, source, this);\n        }\n        else if (o instanceof CardElement && this.onParseElement) {\n            this.onParseElement(o, source, this);\n        }\n    }\n\n    onParseAction?: (action: Action, source: any, context: SerializationContext) => void;\n    onParseElement?: (element: CardElement, source: any, context: SerializationContext) => void;\n\n    shouldSerialize(o: SerializableObject): boolean {\n        if (o instanceof Action) {\n            return this.actionRegistry.findByName(o.getJsonTypeName()) !== undefined;\n        }\n        else if (o instanceof CardElement) {\n            return this.elementRegistry.findByName(o.getJsonTypeName()) !== undefined;\n        }\n        else {\n            return true;\n        }\n    }\n\n    parseCardObject<T extends CardObject>(\n        parent: CardElement | undefined,\n        source: any,\n        forbiddenTypeNames: string[],\n        allowFallback: boolean,\n        createInstanceCallback: (typeName: string) => T | undefined,\n        logParseEvent: (typeName: string, errorType: TypeErrorType) => void): T | undefined {\n        let result = this.internalParseCardObject(\n            parent,\n            source,\n            forbiddenTypeNames,\n            allowFallback,\n            createInstanceCallback,\n            logParseEvent);\n\n        if (result !== undefined) {\n            this.cardObjectParsed(result, source);\n        }\n\n        return result;\n    }\n\n    parseElement(parent: CardElement | undefined, source: any, allowFallback: boolean): CardElement | undefined {\n        return this.parseCardObject<CardElement>(\n            parent,\n            source,\n            [], // Forbidden types not supported for elements for now\n            allowFallback,\n            (typeName: string) => {\n                return this.elementRegistry.createInstance(typeName, this.targetVersion);\n            },\n            (typeName: string, errorType: TypeErrorType) => {\n                if (errorType === TypeErrorType.UnknownType) {\n                    this.logParseEvent(\n                        undefined,\n                        Enums.ValidationEvent.UnknownElementType,\n                        Strings.errors.unknownElementType(typeName));\n                }\n                else {\n                    this.logParseEvent(\n                        undefined,\n                        Enums.ValidationEvent.ElementTypeNotAllowed,\n                        Strings.errors.elementTypeNotAllowed(typeName));\n                }\n            });\n    }\n\n    parseAction(\n        parent: CardElement,\n        source: any,\n        forbiddenActionTypes: string[],\n        allowFallback: boolean): Action | undefined {\n        return this.parseCardObject<Action>(\n            parent,\n            source,\n            forbiddenActionTypes,\n            allowFallback,\n            (typeName: string) => {\n                return this.actionRegistry.createInstance(typeName, this.targetVersion);\n            },\n            (typeName: string, errorType: TypeErrorType) => {\n                if (errorType == TypeErrorType.UnknownType) {\n                    this.logParseEvent(\n                        undefined,\n                        Enums.ValidationEvent.UnknownActionType,\n                        Strings.errors.unknownActionType(typeName));\n                }\n                else {\n                    this.logParseEvent(\n                        undefined,\n                        Enums.ValidationEvent.ActionTypeNotAllowed,\n                        Strings.errors.actionTypeNotAllowed(typeName));\n                }\n            });\n    }\n\n    get elementRegistry(): CardObjectRegistry<CardElement> {\n        return this._elementRegistry ? this._elementRegistry : GlobalRegistry.elements;\n    }\n\n    // Not using a property setter here because the setter should accept \"undefined\"\n    // whereas the getter should never return undefined.\n    setElementRegistry(value: CardObjectRegistry<CardElement> | undefined) {\n        this._elementRegistry = value;\n    }\n\n    get actionRegistry(): CardObjectRegistry<Action> {\n        return this._actionRegistry ? this._actionRegistry : GlobalRegistry.actions;\n    }\n\n    // Not using a property setter here because the setter should accept \"undefined\"\n    // whereas the getter should never return undefined.\n    setActionRegistry(value: CardObjectRegistry<Action> | undefined) {\n        this._actionRegistry = value;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport * as Utils from \"./utils\";\nimport * as Shared from \"./shared\";\nimport { HostCapabilities } from \"./host-capabilities\";\n\nfunction parseHostConfigEnum(targetEnum: { [s: number]: string }, value: string | number, defaultValue: number): number {\n    if (typeof value === \"string\") {\n        let parsedValue = Utils.parseEnum(targetEnum, value, defaultValue);\n\n        return parsedValue !== undefined ? parsedValue : defaultValue;\n    }\n    else if (typeof value === \"number\") {\n        return value;\n    }\n    else {\n        return defaultValue;\n    }\n}\n\nexport class ColorDefinition {\n    default: string = \"#000000\";\n    subtle: string = \"#666666\";\n\n    constructor(defaultColor?: string, subtleColor?: string) {\n        if (defaultColor) {\n            this.default = defaultColor;\n        }\n\n        if (subtleColor) {\n            this.subtle = subtleColor;\n        }\n    }\n\n    parse(obj?: any) {\n        if (obj) {\n            this.default = obj[\"default\"] || this.default;\n            this.subtle = obj[\"subtle\"] || this.subtle;\n        }\n    }\n}\n\nexport class TextColorDefinition extends ColorDefinition {\n    readonly highlightColors = new ColorDefinition(\"#22000000\", \"#11000000\");\n\n    parse(obj?: any) {\n        super.parse(obj);\n\n        if (obj) {\n            this.highlightColors.parse(obj[\"highlightColors\"]);\n        }\n    }\n}\n\nexport class AdaptiveCardConfig {\n    allowCustomStyle: boolean = false;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.allowCustomStyle = obj[\"allowCustomStyle\"] || this.allowCustomStyle;\n        }\n    }\n}\n\nexport class ImageSetConfig {\n    imageSize: Enums.Size = Enums.Size.Medium;\n    maxImageHeight: number = 100;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.imageSize = obj[\"imageSize\"] != null ? obj[\"imageSize\"] : this.imageSize;\n            this.maxImageHeight = <number>Utils.parseNumber(obj[\"maxImageHeight\"], 100);\n        }\n    }\n\n    toJSON() {\n        return {\n            imageSize: Enums.Size[this.imageSize],\n            maxImageHeight: this.maxImageHeight\n        }\n    }\n}\n\nexport class MediaConfig {\n    defaultPoster?: string;\n    allowInlinePlayback: boolean = true;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.defaultPoster = obj[\"defaultPoster\"];\n            this.allowInlinePlayback = obj[\"allowInlinePlayback\"] || this.allowInlinePlayback;\n        }\n    }\n\n    toJSON() {\n        return {\n            defaultPoster: this.defaultPoster,\n            allowInlinePlayback: this.allowInlinePlayback\n        }\n    }\n}\n\nexport class BaseTextDefinition {\n    size: Enums.TextSize = Enums.TextSize.Default;\n    color: Enums.TextColor = Enums.TextColor.Default;;\n    isSubtle: boolean = false;\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.size = parseHostConfigEnum(Enums.TextSize, obj[\"size\"], this.size);\n            this.color = parseHostConfigEnum(Enums.TextColor, obj[\"color\"], this.color);\n            this.isSubtle = obj[\"isSubtle\"] || this.isSubtle;\n            this.weight = parseHostConfigEnum(Enums.TextWeight, obj[\"weight\"], this.getDefaultWeight());\n        }\n    }\n\n    getDefaultWeight() {\n        return Enums.TextWeight.Default;\n    }\n\n    toJSON(): any {\n        return {\n            size: Enums.TextSize[this.size],\n            color: Enums.TextColor[this.color],\n            isSubtle: this.isSubtle,\n            weight: Enums.TextWeight[this.weight]\n        }\n    }\n}\n\nexport class RequiredInputLabelTextDefinition extends BaseTextDefinition {\n    suffix?: string = \" *\";\n    suffixColor: Enums.TextColor = Enums.TextColor.Attention;\n\n    constructor(obj?: any) {\n        super(obj);\n\n        if (obj) {\n            this.suffix = obj[\"suffix\"] || this.suffix;\n            this.suffixColor = parseHostConfigEnum(Enums.TextColor, obj[\"suffixColor\"], this.suffixColor);\n        }\n    }\n\n    toJSON(): any {\n        let result = super.toJSON();\n        result[\"suffix\"] = this.suffix;\n        result[\"suffixColor\"] = Enums.TextColor[this.suffixColor];\n\n        return result;\n    }\n}\n\nexport class InputLabelConfig {\n    inputSpacing: Enums.Spacing = Enums.Spacing.Small;\n    readonly requiredInputs: RequiredInputLabelTextDefinition = new RequiredInputLabelTextDefinition();\n    readonly optionalInputs: BaseTextDefinition = new BaseTextDefinition();\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.inputSpacing = parseHostConfigEnum(Enums.Spacing, obj[\"inputSpacing\"], this.inputSpacing);\n            this.requiredInputs = new RequiredInputLabelTextDefinition(obj[\"requiredInputs\"]);\n            this.optionalInputs = new BaseTextDefinition(obj[\"optionalInputs\"]);\n        }\n    }\n}\n\nexport class InputConfig {\n    readonly label: InputLabelConfig = new InputLabelConfig();\n    readonly errorMessage: BaseTextDefinition = new BaseTextDefinition({ color: Enums.TextColor.Attention });\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.label = new InputLabelConfig(obj[\"label\"]);\n            this.errorMessage = new BaseTextDefinition(obj[\"errorMessage\"]);\n        }\n    }\n}\n\nexport class FactTextDefinition extends BaseTextDefinition {\n    wrap: boolean = true;\n\n    constructor(obj?: any) {\n        super(obj);\n\n        if (obj) {\n            this.wrap = obj[\"wrap\"] != null ? obj[\"wrap\"] : this.wrap;\n        }\n    }\n\n    toJSON(): any {\n        let result = super.toJSON();\n        result[\"wrap\"] = this.wrap;\n\n        return result;\n    }\n}\n\nexport class FactTitleDefinition extends FactTextDefinition {\n    maxWidth?: number = 150;\n    weight: Enums.TextWeight = Enums.TextWeight.Bolder;\n\n    constructor(obj?: any) {\n        super(obj);\n\n        if (obj) {\n            this.maxWidth = obj[\"maxWidth\"] != null ? obj[\"maxWidth\"] : this.maxWidth;\n            this.weight = parseHostConfigEnum(Enums.TextWeight, obj[\"weight\"], Enums.TextWeight.Bolder);\n        }\n    }\n\n    getDefaultWeight() {\n        return Enums.TextWeight.Bolder;\n    }\n}\n\nexport class FactSetConfig {\n    readonly title: FactTitleDefinition = new FactTitleDefinition();\n    readonly value: FactTextDefinition = new FactTextDefinition();\n    spacing: number = 10;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.title = new FactTitleDefinition(obj[\"title\"]);\n            this.value = new FactTextDefinition(obj[\"value\"]);\n            this.spacing = obj.spacing && obj.spacing != null ? obj.spacing && obj.spacing : this.spacing;\n        }\n    }\n}\n\nexport class ShowCardActionConfig {\n    actionMode: Enums.ShowCardActionMode = Enums.ShowCardActionMode.Inline;\n    inlineTopMargin: number = 16;\n    style?: string = Enums.ContainerStyle.Emphasis;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.actionMode = parseHostConfigEnum(Enums.ShowCardActionMode, obj[\"actionMode\"], Enums.ShowCardActionMode.Inline);\n            this.inlineTopMargin = obj[\"inlineTopMargin\"] != null ? obj[\"inlineTopMargin\"] : this.inlineTopMargin;\n            this.style = obj[\"style\"] && typeof obj[\"style\"] === \"string\" ? obj[\"style\"] : Enums.ContainerStyle.Emphasis;\n        }\n    }\n\n    toJSON() {\n        return {\n            actionMode: Enums.ShowCardActionMode[this.actionMode],\n            inlineTopMargin: this.inlineTopMargin,\n            style: this.style\n        }\n    }\n}\n\nexport class ActionsConfig {\n    maxActions: number = 5;\n    spacing: Enums.Spacing = Enums.Spacing.Default;\n    buttonSpacing: number = 20;\n    readonly showCard: ShowCardActionConfig = new ShowCardActionConfig();\n    preExpandSingleShowCardAction?: boolean = false;\n    actionsOrientation: Enums.Orientation = Enums.Orientation.Horizontal;\n    actionAlignment: Enums.ActionAlignment = Enums.ActionAlignment.Left;\n    iconPlacement: Enums.ActionIconPlacement = Enums.ActionIconPlacement.LeftOfTitle;\n    allowTitleToWrap: boolean = false;\n    iconSize: number = 16;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.maxActions = obj[\"maxActions\"] != null ? obj[\"maxActions\"] : this.maxActions;\n            this.spacing = parseHostConfigEnum(Enums.Spacing, obj.spacing && obj.spacing, Enums.Spacing.Default);\n            this.buttonSpacing = obj[\"buttonSpacing\"] != null ? obj[\"buttonSpacing\"] : this.buttonSpacing;\n            this.showCard = new ShowCardActionConfig(obj[\"showCard\"]);\n            this.preExpandSingleShowCardAction = Utils.parseBool(obj[\"preExpandSingleShowCardAction\"], false);\n            this.actionsOrientation = parseHostConfigEnum(Enums.Orientation, obj[\"actionsOrientation\"], Enums.Orientation.Horizontal);\n            this.actionAlignment = parseHostConfigEnum(Enums.ActionAlignment, obj[\"actionAlignment\"], Enums.ActionAlignment.Left);\n            this.iconPlacement = parseHostConfigEnum(Enums.ActionIconPlacement, obj[\"iconPlacement\"], Enums.ActionIconPlacement.LeftOfTitle);\n            this.allowTitleToWrap = obj[\"allowTitleToWrap\"] != null ? obj[\"allowTitleToWrap\"] : this.allowTitleToWrap;\n\n            try {\n                let sizeAndUnit = Shared.SizeAndUnit.parse(obj[\"iconSize\"]);\n\n                if (sizeAndUnit.unit == Enums.SizeUnit.Pixel) {\n                    this.iconSize = sizeAndUnit.physicalSize;\n                }\n            }\n            catch (e) {\n                // Swallow this, keep default icon size\n            }\n        }\n    }\n\n    toJSON() {\n        return {\n            maxActions: this.maxActions,\n            spacing: Enums.Spacing[this.spacing],\n            buttonSpacing: this.buttonSpacing,\n            showCard: this.showCard,\n            preExpandSingleShowCardAction: this.preExpandSingleShowCardAction,\n            actionsOrientation: Enums.Orientation[this.actionsOrientation],\n            actionAlignment: Enums.ActionAlignment[this.actionAlignment]\n        }\n    }\n}\n\nexport class ColorSetDefinition {\n    private parseSingleColor(obj: any, propertyName: string) {\n        if (obj) {\n            ((<any>this)[propertyName] as TextColorDefinition).parse(obj[propertyName]);\n        }\n    }\n\n    default: TextColorDefinition = new TextColorDefinition();\n    dark: TextColorDefinition = new TextColorDefinition();\n    light: TextColorDefinition = new TextColorDefinition();\n    accent: TextColorDefinition = new TextColorDefinition();\n    good: TextColorDefinition = new TextColorDefinition();\n    warning: TextColorDefinition = new TextColorDefinition();\n    attention: TextColorDefinition = new TextColorDefinition();\n\n    constructor(obj?: any) {\n        this.parse(obj);\n    }\n\n    parse(obj: any) {\n        if (obj) {\n            this.parseSingleColor(obj, \"default\");\n            this.parseSingleColor(obj, \"dark\");\n            this.parseSingleColor(obj, \"light\");\n            this.parseSingleColor(obj, \"accent\");\n            this.parseSingleColor(obj, \"good\");\n            this.parseSingleColor(obj, \"warning\");\n            this.parseSingleColor(obj, \"attention\");\n        }\n    }\n}\n\nexport class ContainerStyleDefinition {\n    backgroundColor?: string;\n\n    readonly foregroundColors: ColorSetDefinition = new ColorSetDefinition(\n        {\n            \"default\": { default: \"#333333\", subtle: \"#EE333333\" },\n            \"dark\": { default: \"#000000\", subtle: \"#66000000\" },\n            \"light\": { default: \"#FFFFFF\", subtle: \"#33000000\" },\n            \"accent\": { default: \"#2E89FC\", subtle: \"#882E89FC\" },\n            \"good\": { default: \"#028A02\", subtle: \"#DD027502\" },\n            \"warning\": { default: \"#E69500\", subtle: \"#DDE69500\" },\n            \"attention\": { default: \"#CC3300\", subtle: \"#DDCC3300\" }\n        }\n    );\n\n    highlightBackgroundColor?: string;\n    highlightForegroundColor?: string;\n\n    parse(obj: any) {\n        if (obj) {\n            this.backgroundColor = obj[\"backgroundColor\"];\n\n            this.foregroundColors.parse(obj[\"foregroundColors\"]);\n\n            this.highlightBackgroundColor = obj[\"highlightBackgroundColor\"];\n            this.highlightForegroundColor = obj[\"highlightForegroundColor\"];\n        }\n    }\n\n    constructor(obj?: any) {\n        this.parse(obj);\n    }\n\n    get isBuiltIn(): boolean {\n        return false;\n    }\n}\n\nclass BuiltInContainerStyleDefinition extends ContainerStyleDefinition {\n    get isBuiltIn(): boolean {\n        return true;\n    }\n}\n\nexport interface ILineHeightDefinitions {\n    small: number;\n    medium: number;\n    default: number;\n    large: number;\n    extraLarge: number;\n}\n\nexport class ContainerStyleSet {\n    private _allStyles: { [key: string]: ContainerStyleDefinition } = {};\n\n    constructor(obj?: any) {\n        this._allStyles[Enums.ContainerStyle.Default] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Emphasis] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Accent] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Good] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Attention] = new BuiltInContainerStyleDefinition();\n        this._allStyles[Enums.ContainerStyle.Warning] = new BuiltInContainerStyleDefinition();\n\n        if (obj) {\n            this._allStyles[Enums.ContainerStyle.Default].parse(obj[Enums.ContainerStyle.Default]);\n            this._allStyles[Enums.ContainerStyle.Emphasis].parse(obj[Enums.ContainerStyle.Emphasis]);\n            this._allStyles[Enums.ContainerStyle.Accent].parse(obj[Enums.ContainerStyle.Accent]);\n            this._allStyles[Enums.ContainerStyle.Good].parse(obj[Enums.ContainerStyle.Good]);\n            this._allStyles[Enums.ContainerStyle.Attention].parse(obj[Enums.ContainerStyle.Attention]);\n            this._allStyles[Enums.ContainerStyle.Warning].parse(obj[Enums.ContainerStyle.Warning]);\n\n            const customStyleArray = obj[\"customStyles\"];\n\n            if (customStyleArray && Array.isArray(customStyleArray)) {\n                for (let customStyle of customStyleArray) {\n                    if (customStyle) {\n                        let styleName = customStyle[\"name\"];\n\n                        if (styleName && typeof styleName === \"string\") {\n                            if (this._allStyles.hasOwnProperty(styleName)) {\n                                this._allStyles[styleName].parse(customStyle[\"style\"]);\n                            }\n                            else {\n                                this._allStyles[styleName] = new ContainerStyleDefinition(customStyle[\"style\"]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    toJSON() {\n        let customStyleArray: any[] = [];\n\n        Object.keys(this._allStyles).forEach(\n            (key) => {\n                if (!this._allStyles[key].isBuiltIn) {\n                    customStyleArray.push({\n                        name: key,\n                        style: this._allStyles[key]\n                    });\n                }\n            });\n\n        let result: any = {\n            default: this.default,\n            emphasis: this.emphasis\n        }\n\n        if (customStyleArray.length > 0) {\n            result.customStyles = customStyleArray;\n        }\n\n        return result;\n    }\n\n    getStyleByName(name: string | undefined, defaultValue?: ContainerStyleDefinition): ContainerStyleDefinition {\n        if (name && this._allStyles.hasOwnProperty(name)) {\n            return this._allStyles[name];\n        }\n        else {\n            return defaultValue ? defaultValue : this._allStyles[Enums.ContainerStyle.Default];\n        }\n    }\n\n    get default(): ContainerStyleDefinition {\n        return this._allStyles[Enums.ContainerStyle.Default];\n    }\n\n    get emphasis(): ContainerStyleDefinition {\n        return this._allStyles[Enums.ContainerStyle.Emphasis];\n    }\n}\n\nexport interface IFontSizeDefinitions {\n    small: number;\n    default: number;\n    medium: number;\n    large: number;\n    extraLarge: number;\n}\n\nexport interface IFontWeightDefinitions {\n    lighter: number;\n    default: number;\n    bolder: number;\n}\n\nexport class FontTypeDefinition {\n    static readonly monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\n\n    fontFamily?: string = \"Segoe UI,Segoe,Segoe WP,Helvetica Neue,Helvetica,sans-serif\";\n\n    fontSizes: IFontSizeDefinitions = {\n        small: 12,\n        default: 14,\n        medium: 17,\n        large: 21,\n        extraLarge: 26\n    };\n\n    fontWeights: IFontWeightDefinitions = {\n        lighter: 200,\n        default: 400,\n        bolder: 600\n    };\n\n    constructor(fontFamily?: string) {\n        if (fontFamily) {\n            this.fontFamily = fontFamily;\n        }\n    }\n\n    parse(obj?: any) {\n        this.fontFamily = obj[\"fontFamily\"] || this.fontFamily;\n        this.fontSizes = {\n            small: obj.fontSizes && obj.fontSizes[\"small\"] || this.fontSizes.small,\n            default: obj.fontSizes && obj.fontSizes[\"default\"] || this.fontSizes.default,\n            medium: obj.fontSizes && obj.fontSizes[\"medium\"] || this.fontSizes.medium,\n            large: obj.fontSizes && obj.fontSizes[\"large\"] || this.fontSizes.large,\n            extraLarge: obj.fontSizes && obj.fontSizes[\"extraLarge\"] || this.fontSizes.extraLarge\n        };\n        this.fontWeights = {\n            lighter: obj.fontWeights && obj.fontWeights[\"lighter\"] || this.fontWeights.lighter,\n            default: obj.fontWeights && obj.fontWeights[\"default\"] || this.fontWeights.default,\n            bolder: obj.fontWeights && obj.fontWeights[\"bolder\"] || this.fontWeights.bolder\n        };\n    }\n}\n\nexport class FontTypeSet {\n    default: FontTypeDefinition;\n    monospace: FontTypeDefinition;\n\n    constructor(obj?: any) {\n        this.default = new FontTypeDefinition();\n        this.monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\n\n        if (obj) {\n            this.default.parse(obj[\"default\"]);\n            this.monospace.parse(obj[\"monospace\"]);\n        }\n    }\n\n    getStyleDefinition(style: Enums.FontType | undefined): FontTypeDefinition {\n        switch (style) {\n            case Enums.FontType.Monospace:\n                return this.monospace;\n            case Enums.FontType.Default:\n            default:\n                return this.default;\n        }\n    }\n}\n\nexport class HostConfig {\n    readonly hostCapabilities = new HostCapabilities();\n\n    private _legacyFontType: FontTypeDefinition;\n\n    choiceSetInputValueSeparator: string = \",\";\n    supportsInteractivity: boolean = true;\n    lineHeights?: ILineHeightDefinitions;\n    fontTypes?: FontTypeSet;\n\n    readonly spacing = {\n        small: 3,\n        default: 8,\n        medium: 20,\n        large: 30,\n        extraLarge: 40,\n        padding: 15\n    };\n\n    readonly separator = {\n        lineThickness: 1,\n        lineColor: \"#EEEEEE\"\n    };\n\n    readonly imageSizes = {\n        small: 40,\n        medium: 80,\n        large: 160\n    };\n\n    readonly containerStyles: ContainerStyleSet = new ContainerStyleSet();\n    readonly inputs: InputConfig = new InputConfig();\n    readonly actions: ActionsConfig = new ActionsConfig();\n    readonly adaptiveCard: AdaptiveCardConfig = new AdaptiveCardConfig();\n    readonly imageSet: ImageSetConfig = new ImageSetConfig();\n    readonly media: MediaConfig = new MediaConfig();\n    readonly factSet: FactSetConfig = new FactSetConfig();\n\n    cssClassNamePrefix?: string;\n    alwaysAllowBleed: boolean = false;\n\n    constructor(obj?: any) {\n        if (obj) {\n            if (typeof obj === \"string\" || obj instanceof String) {\n                obj = JSON.parse(obj as string);\n            }\n\n            this.choiceSetInputValueSeparator = (obj && typeof obj[\"choiceSetInputValueSeparator\"] === \"string\") ? obj[\"choiceSetInputValueSeparator\"] : this.choiceSetInputValueSeparator;\n            this.supportsInteractivity = (obj && typeof obj[\"supportsInteractivity\"] === \"boolean\") ? obj[\"supportsInteractivity\"] : this.supportsInteractivity;\n\n            this._legacyFontType = new FontTypeDefinition();\n            this._legacyFontType.parse(obj);\n\n            if (obj.fontTypes) {\n                this.fontTypes = new FontTypeSet(obj.fontTypes);\n            }\n\n            if (obj.lineHeights) {\n                this.lineHeights = {\n                    small: obj.lineHeights[\"small\"],\n                    default: obj.lineHeights[\"default\"],\n                    medium: obj.lineHeights[\"medium\"],\n                    large: obj.lineHeights[\"large\"],\n                    extraLarge: obj.lineHeights[\"extraLarge\"]\n                };\n            };\n\n            this.imageSizes = {\n                small: obj.imageSizes && obj.imageSizes[\"small\"] || this.imageSizes.small,\n                medium: obj.imageSizes && obj.imageSizes[\"medium\"] || this.imageSizes.medium,\n                large: obj.imageSizes && obj.imageSizes[\"large\"] || this.imageSizes.large,\n            };\n\n            this.containerStyles = new ContainerStyleSet(obj[\"containerStyles\"]);\n            this.spacing = {\n                small: obj.spacing && obj.spacing[\"small\"] || this.spacing.small,\n                default: obj.spacing && obj.spacing[\"default\"] || this.spacing.default,\n                medium: obj.spacing && obj.spacing[\"medium\"] || this.spacing.medium,\n                large: obj.spacing && obj.spacing[\"large\"] || this.spacing.large,\n                extraLarge: obj.spacing && obj.spacing[\"extraLarge\"] || this.spacing.extraLarge,\n                padding: obj.spacing && obj.spacing[\"padding\"] || this.spacing.padding\n            };\n\n            this.separator = {\n                lineThickness: obj.separator && obj.separator[\"lineThickness\"] || this.separator.lineThickness,\n                lineColor: obj.separator && obj.separator[\"lineColor\"] || this.separator.lineColor\n            }\n\n            this.inputs = new InputConfig(obj.inputs || this.inputs);\n            this.actions = new ActionsConfig(obj.actions || this.actions);\n            this.adaptiveCard = new AdaptiveCardConfig(obj.adaptiveCard || this.adaptiveCard);\n            this.imageSet = new ImageSetConfig(obj[\"imageSet\"]);\n            this.factSet = new FactSetConfig(obj[\"factSet\"])\n        }\n    }\n\n    getFontTypeDefinition(style?: Enums.FontType): FontTypeDefinition {\n        if (this.fontTypes) {\n            return this.fontTypes.getStyleDefinition(style);\n        }\n        else {\n            return style == Enums.FontType.Monospace ? FontTypeDefinition.monospace : this._legacyFontType;\n        }\n    }\n\n    getEffectiveSpacing(spacing: Enums.Spacing): number {\n        switch (spacing) {\n            case Enums.Spacing.Small:\n                return this.spacing.small;\n            case Enums.Spacing.Default:\n                return this.spacing.default;\n            case Enums.Spacing.Medium:\n                return this.spacing.medium;\n            case Enums.Spacing.Large:\n                return this.spacing.large;\n            case Enums.Spacing.ExtraLarge:\n                return this.spacing.extraLarge;\n            case Enums.Spacing.Padding:\n                return this.spacing.padding;\n            default:\n                return 0;\n        }\n    }\n\n    paddingDefinitionToSpacingDefinition(paddingDefinition: Shared.PaddingDefinition): Shared.SpacingDefinition {\n        return new Shared.SpacingDefinition(\n            this.getEffectiveSpacing(paddingDefinition.top),\n            this.getEffectiveSpacing(paddingDefinition.right),\n            this.getEffectiveSpacing(paddingDefinition.bottom),\n            this.getEffectiveSpacing(paddingDefinition.left));\n    }\n\n    makeCssClassNames(...classNames: string[]): string[] {\n        let result: string[] = [];\n\n        for (let className of classNames) {\n            result.push((this.cssClassNamePrefix ? this.cssClassNamePrefix + \"-\" : \"\") + className);\n        }\n\n        return result;\n    }\n\n    makeCssClassName(...classNames: string[]): string {\n        let result = this.makeCssClassNames(...classNames).join(\" \");\n\n        return result ? result : \"\";\n    }\n\n    get fontFamily(): string | undefined {\n        return this._legacyFontType.fontFamily;\n    }\n\n    set fontFamily(value: string | undefined) {\n        this._legacyFontType.fontFamily = value;\n    }\n\n    get fontSizes(): IFontSizeDefinitions {\n        return this._legacyFontType.fontSizes;\n    }\n\n    get fontWeights(): IFontWeightDefinitions {\n        return this._legacyFontType.fontWeights;\n    }\n}\n\nexport const defaultHostConfig: HostConfig = new HostConfig(\n    {\n        supportsInteractivity: true,\n        spacing: {\n            small: 10,\n            default: 20,\n            medium: 30,\n            large: 40,\n            extraLarge: 50,\n            padding: 20\n        },\n        separator: {\n            lineThickness: 1,\n            lineColor: \"#EEEEEE\"\n        },\n        fontTypes: {\n            default: {\n                fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n                fontSizes: {\n                    small: 12,\n                    default: 14,\n                    medium: 17,\n                    large: 21,\n                    extraLarge: 26\n                },\n                fontWeights: {\n                    lighter: 200,\n                    default: 400,\n                    bolder: 600\n                }\n            },\n            monospace: {\n                fontFamily: \"'Courier New', Courier, monospace\",\n                fontSizes: {\n                    small: 12,\n                    default: 14,\n                    medium: 17,\n                    large: 21,\n                    extraLarge: 26\n                },\n                fontWeights: {\n                    lighter: 200,\n                    default: 400,\n                    bolder: 600\n                }\n            }\n        },\n        imageSizes: {\n            small: 40,\n            medium: 80,\n            large: 160\n        },\n        containerStyles: {\n            default: {\n                backgroundColor: \"#FFFFFF\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            emphasis: {\n                backgroundColor: \"#08000000\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            accent: {\n                backgroundColor: \"#C7DEF9\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            good: {\n                backgroundColor: \"#CCFFCC\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            attention: {\n                backgroundColor: \"#FFC5B2\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            },\n            warning: {\n                backgroundColor: \"#FFE2B2\",\n                foregroundColors: {\n                    default: {\n                        default: \"#333333\",\n                        subtle: \"#EE333333\"\n                    },\n                    dark: {\n                        default: \"#000000\",\n                        subtle: \"#66000000\"\n                    },\n                    light: {\n                        default: \"#FFFFFF\",\n                        subtle: \"#33000000\"\n                    },\n                    accent: {\n                        default: \"#2E89FC\",\n                        subtle: \"#882E89FC\"\n                    },\n                    attention: {\n                        default: \"#cc3300\",\n                        subtle: \"#DDcc3300\"\n                    },\n                    good: {\n                        default: \"#028A02\",\n                        subtle: \"#DD027502\"\n                    },\n                    warning: {\n                        default: \"#e69500\",\n                        subtle: \"#DDe69500\"\n                    }\n                }\n            }\n        },\n        inputs: {\n            label: {\n                requiredInputs: {\n                    color: Enums.TextColor.Accent,\n                    size: Enums.TextSize.ExtraLarge,\n                    weight: Enums.TextWeight.Bolder,\n                    isSubtle: true,\n                    suffix: \" (required)\",\n                    suffixColor: Enums.TextColor.Good\n                },\n                optionalInputs: {\n                    color: Enums.TextColor.Warning,\n                    size: Enums.TextSize.Medium,\n                    weight: Enums.TextWeight.Lighter,\n                    isSubtle: false\n                }\n            },\n            errorMessage: {\n                color: Enums.TextColor.Accent,\n                size: Enums.TextSize.Small,\n                weight: Enums.TextWeight.Bolder\n            }\n        },\n        actions: {\n            maxActions: 5,\n            spacing: Enums.Spacing.Default,\n            buttonSpacing: 10,\n            showCard: {\n                actionMode: Enums.ShowCardActionMode.Inline,\n                inlineTopMargin: 16\n            },\n            actionsOrientation: Enums.Orientation.Horizontal,\n            actionAlignment: Enums.ActionAlignment.Left\n        },\n        adaptiveCard: {\n            allowCustomStyle: false\n        },\n        imageSet: {\n            imageSize: Enums.Size.Medium,\n            maxImageHeight: 100\n        },\n        factSet: {\n            title: {\n                color: Enums.TextColor.Default,\n                size: Enums.TextSize.Default,\n                isSubtle: false,\n                weight: Enums.TextWeight.Bolder,\n                wrap: true,\n                maxWidth: 150,\n            },\n            value: {\n                color: Enums.TextColor.Default,\n                size: Enums.TextSize.Default,\n                isSubtle: false,\n                weight: Enums.TextWeight.Default,\n                wrap: true,\n            },\n            spacing: 10\n        }\n    });\n","import { Authentication, AuthCardButton, ExecuteAction, TokenExchangeResource } from \"./card-elements\";\n\nexport enum ActivityRequestTrigger {\n    Automatic = \"automatic\",\n    Manual = \"manual\",\n}\n\nexport interface IActivityRequest {\n    readonly action: ExecuteAction;\n    readonly trigger: ActivityRequestTrigger;\n    readonly attemptNumber: number;\n    readonly consecutiveRefreshes: number;\n\n    authCode?: string;\n    authToken?: string;\n\n    retryAsync(): void;\n}\n\nexport class ActivityRequestError {\n    constructor(readonly code?: string, readonly message?: string) { }\n}\n\nexport abstract class ActivityResponse {\n    constructor(readonly request: IActivityRequest) { }\n}\n\nexport class SuccessResponse extends ActivityResponse {\n    constructor(readonly request: IActivityRequest, readonly rawContent?: string) {\n        super(request);\n    }\n}\n\nexport class ErrorResponse extends ActivityResponse {\n    constructor(readonly request: IActivityRequest, readonly error: ActivityRequestError) {\n        super(request);\n    }\n}\n\nexport class LoginRequestResponse extends ActivityResponse {\n    readonly signinButton?: AuthCardButton;\n\n    constructor(readonly request: IActivityRequest, private _auth: Authentication) {\n        super(request);\n\n        for (let button of this._auth.buttons) {\n            if (button.type === \"signin\" && button.value !== undefined) {\n                try {\n                    new URL(button.value);\n\n                    this.signinButton = button;\n\n                    break;\n                }\n                catch (e) {\n                    // Ignore parsing error\n                }\n            }\n        }\n    }\n\n    get tokenExchangeResource(): TokenExchangeResource | undefined {\n        return this._auth.tokenExchangeResource;\n    }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport * from \"./serialization\";\nexport * from \"./registry\";\nexport * from \"./card-object\";\nexport * from \"./card-elements\";\nexport * from \"./enums\";\nexport * from \"./host-config\";\nexport * from \"./shared\";\nexport * from \"./utils\";\nexport * from \"./strings\";\nexport * from \"./channel-adapter\";\nexport * from \"./activity-request\";\nexport * from \"./adaptive-applet\";\n\nexport { IAdaptiveCard, ICardElement } from \"./schema\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nabstract class AbstractTextFormatter {\n    private _regularExpression: RegExp;\n\n    protected abstract internalFormat(lang: string | undefined, matches: RegExpExecArray): string;\n\n    constructor(regularExpression: RegExp) {\n        this._regularExpression = regularExpression;\n    }\n\n    format(lang: string | undefined, input: string | undefined): string | undefined {\n        let matches;\n\n        if (input) {\n            let result = input;\n\n            while ((matches = this._regularExpression.exec(input)) != null) {\n                result = result.replace(matches[0], this.internalFormat(lang, matches));\n            };\n\n            return result;\n        }\n        else {\n            return input;\n        }\n    }\n}\n\nclass DateFormatter extends AbstractTextFormatter {\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\n        let date = new Date(Date.parse(matches[1]));\n        let format = matches[2] != undefined ? matches[2].toLowerCase() : \"compact\";\n\n        if (format != \"compact\") {\n            return date.toLocaleDateString(lang, { day: \"numeric\", weekday: format, month: format, year: \"numeric\" });\n        }\n        else {\n            return date.toLocaleDateString();\n        }\n    }\n}\n\nclass TimeFormatter extends AbstractTextFormatter {\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\n        let date = new Date(Date.parse(matches[1]));\n\n        return date.toLocaleTimeString(lang, { hour: 'numeric', minute: '2-digit' });\n    }\n}\n\nexport function formatText(lang: string | undefined, text: string | undefined): string | undefined {\n    const formatters: AbstractTextFormatter[] = [\n        new DateFormatter(/\\{{2}DATE\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))(?:, ?(COMPACT|LONG|SHORT))?\\)\\}{2}/g),\n        new TimeFormatter(/\\{{2}TIME\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))\\)\\}{2}/g)\n    ];\n\n    let result = text;\n\n    for (let formatter of formatters) {\n        result = formatter.format(lang, result);\n    }\n\n    return result;\n}\n","import { ActivityResponse, IActivityRequest } from \"./activity-request\";\n\nexport abstract class ChannelAdapter {\n    abstract sendRequestAsync(request: IActivityRequest): Promise<ActivityResponse>;\n}\n","import * as Enums from \"./enums\";\nimport * as Utils from \"./utils\";\nimport { GlobalSettings } from \"./shared\";\nimport { ChannelAdapter } from \"./channel-adapter\";\nimport { ActivityResponse, IActivityRequest, ActivityRequestTrigger, SuccessResponse, ErrorResponse, LoginRequestResponse } from \"./activity-request\";\nimport { Strings } from \"./strings\";\nimport { SubmitAction, ExecuteAction, SerializationContext, AdaptiveCard, Action, Input, Authentication, TokenExchangeResource, AuthCardButton, CardElement } from \"./card-elements\";\nimport { Versions } from \"./serialization\";\nimport { HostConfig } from \"./host-config\";\n\nfunction logEvent(level: Enums.LogLevel, message?: any, ...optionalParams: any[]) {\n    if (GlobalSettings.applets.logEnabled) {\n        if (GlobalSettings.applets.onLogEvent) {\n            GlobalSettings.applets.onLogEvent(level, message, optionalParams);\n        }\n        else {\n            switch (level) {\n                case Enums.LogLevel.Warning:\n                    console.warn(message, optionalParams);\n                    break;\n                case Enums.LogLevel.Error:\n                    console.error(message, optionalParams);\n                    break;\n                default:\n                    console.log(message, optionalParams);\n                    break;\n            }\n        }\n    }\n}\n\nclass ActivityRequest implements IActivityRequest {\n    constructor(\n        readonly action: ExecuteAction,\n        readonly trigger: ActivityRequestTrigger,\n        readonly consecutiveRefreshes: number) { }\n\n    authCode?: string;\n    authToken?: string;\n    attemptNumber: number = 0;\n\n    onSend: (sender: ActivityRequest) => void;\n\n    async retryAsync(): Promise<void> {\n        if (this.onSend) {\n            this.onSend(this);\n        }\n    }\n}\n\nexport class AdaptiveApplet {\n    private static readonly submitMagicCodeActionId = \"submitMagicCode\";\n    private static readonly cancelMagicCodeAuthActionId = \"cancelMagicCodeAuth\";\n\n    private _card?: AdaptiveCard;\n    private _cardPayload: any;\n    private _allowAutomaticCardUpdate: boolean = false;\n    private _refreshButtonHostElement: HTMLElement;\n    private _cardHostElement: HTMLElement;\n    private _progressOverlay?: HTMLElement;\n\n    private displayCard(card: AdaptiveCard) {\n        if (card.renderedElement) {\n            Utils.clearElementChildren(this._cardHostElement);\n\n            this._refreshButtonHostElement.style.display = \"none\";\n\n            this._cardHostElement.appendChild(card.renderedElement);\n        }\n        else {\n            throw new Error(\"displayCard: undefined card.\");\n        }\n    }\n\n    private showManualRefreshButton(refreshAction: ExecuteAction) {\n        let displayBuiltInManualRefreshButton = this.onShowManualRefreshButton ? this.onShowManualRefreshButton(this) : true;\n\n        if (displayBuiltInManualRefreshButton) {\n            this._refreshButtonHostElement.style.display = \"none\";\n\n            let renderedRefreshButton: HTMLElement | undefined = undefined;\n\n            if (this.onRenderManualRefreshButton) {\n                renderedRefreshButton = this.onRenderManualRefreshButton(this);\n            }\n            else {\n                let message = Strings.runtime.refreshThisCard();\n                \n                if (GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic) {\n                    let autoRefreshPausedMessage = Strings.runtime.automaticRefreshPaused();\n\n                    if (autoRefreshPausedMessage[autoRefreshPausedMessage.length - 1] !== \" \") {\n                        autoRefreshPausedMessage += \" \";\n                    }\n\n                    message = Strings.runtime.clckToRestartAutomaticRefresh();\n                }\n\n                let cardPayload = {\n                    type: \"AdaptiveCard\",\n                    version: \"1.2\",\n                    body: [\n                        {\n                            type: \"RichTextBlock\",\n                            horizontalAlignment: \"right\",\n                            inlines: [\n                                {\n                                    type: \"TextRun\",\n                                    text: message,\n                                    selectAction: {\n                                        type: \"Action.Submit\",\n                                        id: \"refreshCard\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                };\n\n                let card = new AdaptiveCard();\n                card.parse(cardPayload, new SerializationContext(Versions.v1_2));\n                card.onExecuteAction = (action: Action) => {\n                    if (action.id === \"refreshCard\") {\n                        Utils.clearElementChildren(this._refreshButtonHostElement);\n                        \n                        this.internalExecuteAction(refreshAction, ActivityRequestTrigger.Automatic, 0);\n                    }\n                }\n\n                renderedRefreshButton = card.render();\n            }\n\n            if (renderedRefreshButton) {\n                Utils.clearElementChildren(this._refreshButtonHostElement);\n\n                this._refreshButtonHostElement.appendChild(renderedRefreshButton);\n\n                this._refreshButtonHostElement.style.removeProperty(\"display\");\n            }\n        }\n    }\n\n    private createActivityRequest(action: ExecuteAction, trigger: ActivityRequestTrigger, consecutiveRefreshes: number): ActivityRequest | undefined {\n        if (this.card) {\n            let request = new ActivityRequest(action, trigger, consecutiveRefreshes);\n            request.onSend = (sender: ActivityRequest) => {\n                sender.attemptNumber++;\n\n                this.internalSendActivityRequestAsync(request);\n            }\n\n            let cancel = this.onPrepareActivityRequest ? !this.onPrepareActivityRequest(this, request, action) : false;\n\n            return cancel ? undefined : request;\n        }\n        else {\n            throw new Error(\"createActivityRequest: no card has been set.\");\n        }\n    }\n\n    private createMagicCodeInputCard(attemptNumber: number): AdaptiveCard {\n        let payload = {\n            type: \"AdaptiveCard\",\n            version: \"1.0\",\n            body: [\n                {\n                    type: \"TextBlock\",\n                    color: \"attention\",\n                    text: attemptNumber === 1 ? undefined : \"That didn't work... let's try again.\",\n                    wrap: true,\n                    horizontalAlignment: \"center\"\n                },\n                {\n                    type: \"TextBlock\",\n                    text: \"Please login in the popup. You will obtain a magic code. Paste that code below and select \\\"Submit\\\"\",\n                    wrap: true,\n                    horizontalAlignment: \"center\"\n                },\n                {\n                    type: \"Input.Text\",\n                    id: \"magicCode\",\n                    placeholder: \"Enter magic code\"\n                },\n                {\n                    type: \"ActionSet\",\n                    horizontalAlignment: \"center\",\n                    actions: [\n                        {\n                            type: \"Action.Submit\",\n                            id: AdaptiveApplet.submitMagicCodeActionId,\n                            title: \"Submit\"\n                        },\n                        {\n                            type: \"Action.Submit\",\n                            id: AdaptiveApplet.cancelMagicCodeAuthActionId,\n                            title: \"Cancel\"\n                        }\n                    ]\n                }\n            ]\n        };\n\n        let card = new AdaptiveCard();\n        card.parse(payload);\n\n        return card;\n    }\n\n    private cancelAutomaticRefresh() {\n        if (this._allowAutomaticCardUpdate) {\n            logEvent(Enums.LogLevel.Warning, \"Automatic card refresh has been cancelled as a result of the user interacting with the card.\");\n        }\n\n        this._allowAutomaticCardUpdate = false;\n    }\n\n    private createSerializationContext(): SerializationContext {\n        return this.onCreateSerializationContext ? this.onCreateSerializationContext(this) : new SerializationContext();\n    }\n\n    private internalSetCard(payload: any, consecutiveRefreshes: number) {\n        if (typeof payload === \"object\" && payload[\"type\"] === \"AdaptiveCard\") {\n            this._cardPayload = payload;\n        }\n\n        if (this._cardPayload) {\n            try {\n                let card = new AdaptiveCard();\n\n                if (this.hostConfig) {\n                    card.hostConfig = this.hostConfig;\n                }\n\n                let serializationContext = this.createSerializationContext();\n\n                card.parse(this._cardPayload, serializationContext);\n\n                let doChangeCard = this.onCardChanging ? this.onCardChanging(this, this._cardPayload) : true;\n\n                if (doChangeCard) {\n                    this._card = card;\n\n                    if (this._card.authentication && this._card.authentication.tokenExchangeResource && this.onPrefetchSSOToken) {\n                        this.onPrefetchSSOToken(this, this._card.authentication.tokenExchangeResource);\n                    }\n\n                    this._card.onExecuteAction = (action: Action) => {\n                        // If the user takes an action, cancel any pending automatic refresh\n                        this.cancelAutomaticRefresh();\n\n                        this.internalExecuteAction(action, ActivityRequestTrigger.Manual, 0);\n                    }\n                    this._card.onInputValueChanged = (input: Input) => {\n                        // If the user modifies an input, cancel any pending automatic refresh\n                        this.cancelAutomaticRefresh();\n                    }\n\n                    this._card.render();\n\n                    if (this._card.renderedElement) {\n                        this.displayCard(this._card);\n\n                        if (this.onCardChanged) {\n                            this.onCardChanged(this);\n                        }\n\n                        if (this._card.refresh) {\n                            if (GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic && consecutiveRefreshes < GlobalSettings.applets.refresh.maximumConsecutiveAutomaticRefreshes) {\n                                if (GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes <= 0) {\n                                    logEvent(Enums.LogLevel.Info, \"Triggering automatic card refresh number \" + (consecutiveRefreshes + 1));\n\n                                    this.internalExecuteAction(this._card.refresh.action, ActivityRequestTrigger.Automatic, consecutiveRefreshes + 1);\n                                }\n                                else {\n                                    logEvent(Enums.LogLevel.Info, \"Scheduling automatic card refresh number \" + (consecutiveRefreshes + 1) + \" in \" + GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes + \"ms\");\n\n                                    let action = this._card.refresh.action;\n\n                                    this._allowAutomaticCardUpdate = true;\n\n                                    window.setTimeout(\n                                        () => {\n                                            if (this._allowAutomaticCardUpdate) {\n                                                this.internalExecuteAction(action, ActivityRequestTrigger.Automatic, consecutiveRefreshes + 1);\n                                            }\n                                        },\n                                        GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes\n                                    )\n                                }\n                            }\n                            else if (GlobalSettings.applets.refresh.mode !== Enums.RefreshMode.Disabled) {\n                                if (consecutiveRefreshes > 0) {\n                                    logEvent(Enums.LogLevel.Warning, \"Stopping automatic refreshes after \" + consecutiveRefreshes + \" consecutive refreshes.\");\n                                }\n                                else {\n                                    logEvent(Enums.LogLevel.Warning, \"The card has a refresh section, but automatic refreshes are disabled.\");\n                                }\n\n                                if (GlobalSettings.applets.refresh.allowManualRefreshesAfterAutomaticRefreshes || GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Manual) {\n                                    logEvent(Enums.LogLevel.Info, \"Showing manual refresh button.\");\n\n                                    this.showManualRefreshButton(this._card.refresh.action);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                // Ignore all errors\n                logEvent(Enums.LogLevel.Error, \"setCard: \" + error);\n            }\n        }\n    }\n\n    private internalExecuteAction(action: Action, trigger: ActivityRequestTrigger, consecutiveRefreshes: number) {\n        if (action instanceof ExecuteAction) {\n            if (this.channelAdapter) {\n                let request = this.createActivityRequest(action, trigger, consecutiveRefreshes);\n\n                if (request) {\n                    request.retryAsync();\n                }\n            }\n            else {\n                throw new Error(\"internalExecuteAction: No channel adapter set.\");\n            }\n        }\n\n        if (this.onAction) {\n            this.onAction(this, action);\n        }\n    }\n\n    private createProgressOverlay(request: ActivityRequest): HTMLElement | undefined {\n        if (!this._progressOverlay) {\n            if (this.onCreateProgressOverlay) {\n                this._progressOverlay = this.onCreateProgressOverlay(this, request);\n            }\n            else {\n                this._progressOverlay = document.createElement(\"div\");\n                this._progressOverlay.className = \"aaf-progress-overlay\";\n\n                let spinner = document.createElement(\"div\");\n                spinner.className = \"aaf-spinner\";\n                spinner.style.width = \"28px\";\n                spinner.style.height = \"28px\";\n\n                this._progressOverlay.appendChild(spinner);\n            }\n        }\n\n        return this._progressOverlay;\n    }\n\n    private removeProgressOverlay(request: IActivityRequest) {\n        if (this.onRemoveProgressOverlay) {\n            this.onRemoveProgressOverlay(this, request);\n        }\n        \n        if (this._progressOverlay !== undefined) {\n            this.renderedElement.removeChild(this._progressOverlay);\n\n            this._progressOverlay = undefined;\n        }\n    }\n\n    private activityRequestSucceeded(response: SuccessResponse, parsedContent: string | AdaptiveCard | undefined) {\n        if (this.onActivityRequestSucceeded) {\n            this.onActivityRequestSucceeded(this, response, parsedContent);\n        }\n    }\n\n    private activityRequestFailed(response: ErrorResponse): number {\n        return this.onActivityRequestFailed ? this.onActivityRequestFailed(this, response) : GlobalSettings.applets.defaultTimeBetweenRetryAttempts;\n    }\n\n    private showAuthCodeInputDialog(request: ActivityRequest) {\n        let showBuiltInAuthCodeInputCard = this.onShowAuthCodeInputDialog ? this.onShowAuthCodeInputDialog(this, request) : true;\n\n        if (showBuiltInAuthCodeInputCard) {\n            let authCodeInputCard = this.createMagicCodeInputCard(request.attemptNumber);\n            authCodeInputCard.render();\n            authCodeInputCard.onExecuteAction = (submitMagicCodeAction: Action) => {\n                if (this.card && submitMagicCodeAction instanceof SubmitAction) {\n                    switch (submitMagicCodeAction.id) {\n                        case AdaptiveApplet.submitMagicCodeActionId:\n                            let authCode: string | undefined = undefined;\n\n                            if (submitMagicCodeAction.data && typeof (<any>submitMagicCodeAction.data)[\"magicCode\"] === \"string\") {\n                                authCode = (<any>submitMagicCodeAction.data)[\"magicCode\"];\n                            }\n\n                            if (authCode) {\n                                this.displayCard(this.card);\n\n                                request.authCode = authCode;\n                                request.retryAsync();\n                            }\n                            else {\n                                alert(\"Please enter the magic code you received.\");\n                            }\n\n                            break;\n                        case AdaptiveApplet.cancelMagicCodeAuthActionId:\n                            logEvent(Enums.LogLevel.Warning, \"Authentication cancelled by user.\");\n\n                            this.displayCard(this.card);\n\n                            break;\n                        default:\n                            logEvent(Enums.LogLevel.Error, \"Unespected action taken from magic code input card (id = \" + submitMagicCodeAction.id + \")\");\n\n                            alert(Strings.magicCodeInputCard.somethingWentWrong());\n\n                            break;\n                    }\n                }\n            }\n\n            this.displayCard(authCodeInputCard);\n        }\n    }\n\n    private async internalSendActivityRequestAsync(request: ActivityRequest) {\n        if (!this.channelAdapter) {\n            throw new Error(\"internalSendActivityRequestAsync: channelAdapter is not set.\")\n        }\n\n        let overlay = this.createProgressOverlay(request);\n\n        if (overlay !== undefined) {\n            this.renderedElement.appendChild(overlay);\n        }\n\n        let done = false;\n\n        while (!done) {\n            let response: ActivityResponse | undefined = undefined;\n\n            if (request.attemptNumber === 1) {\n                logEvent(Enums.LogLevel.Info, \"Sending activity request to channel (attempt \" + request.attemptNumber + \")\");\n            }\n            else {\n                logEvent(Enums.LogLevel.Info, \"Re-sending activity request to channel (attempt \" + request.attemptNumber + \")\");\n            }\n\n            try {\n                response = await this.channelAdapter.sendRequestAsync(request);\n            }\n            catch (error) {\n                logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + error);\n\n                this.removeProgressOverlay(request);\n\n                done = true;\n            }\n\n            if (response) {\n                if (response instanceof SuccessResponse) {\n                    this.removeProgressOverlay(request);\n\n                    if (response.rawContent === undefined) {\n                        throw new Error(\"internalSendActivityRequestAsync: Action.Execute result is undefined\");\n                    }\n\n                    let parsedContent = response.rawContent;\n\n                    try {\n                        parsedContent = JSON.parse(response.rawContent);\n                    }\n                    catch {\n                        // Leave parseContent as is\n                    }\n\n                    if (typeof parsedContent === \"string\") {\n                        logEvent(Enums.LogLevel.Info, \"The activity request returned a string after \" + request.attemptNumber + \" attempt(s).\");\n\n                        this.activityRequestSucceeded(response, parsedContent);\n                    }\n                    else if (typeof parsedContent === \"object\" && parsedContent[\"type\"] === \"AdaptiveCard\") {\n                        logEvent(Enums.LogLevel.Info, \"The activity request returned an Adaptive Card after \" + request.attemptNumber + \" attempt(s).\");\n\n                        this.internalSetCard(parsedContent, request.consecutiveRefreshes);\n                        this.activityRequestSucceeded(response, this.card);\n                    }\n                    else {\n                        throw new Error(\"internalSendActivityRequestAsync: Action.Execute result is of unsupported type (\" + typeof response.rawContent + \")\");\n                    }\n\n                    done = true;\n                }\n                else if (response instanceof ErrorResponse) {\n                    let retryIn: number = this.activityRequestFailed(response);\n\n                    if (retryIn >= 0 && request.attemptNumber < GlobalSettings.applets.maximumRetryAttempts) {\n                        logEvent(\n                            Enums.LogLevel.Warning,\n                            `Activity request failed: ${response.error.message}. Retrying in ${retryIn}ms`);\n\n                        request.attemptNumber++;\n\n                        await new Promise<void>(\n                            (resolve, reject) => {\n                                window.setTimeout(\n                                    () => { resolve(); },\n                                    retryIn\n                                )\n                            });\n                    }\n                    else {\n                        logEvent(\n                            Enums.LogLevel.Error,\n                            `Activity request failed: ${response.error.message}. Giving up after ${request.attemptNumber} attempt(s)`);\n\n                        this.removeProgressOverlay(request);\n\n                        done = true;\n                    }\n                }\n                else if (response instanceof LoginRequestResponse) {\n                    logEvent(Enums.LogLevel.Info, \"The activity request returned a LoginRequestResponse after \" + request.attemptNumber + \" attempt(s).\");\n\n                    if (request.attemptNumber <= GlobalSettings.applets.maximumRetryAttempts) {\n                        let attemptOAuth = true;\n\n                        if (response.tokenExchangeResource && this.onSSOTokenNeeded) {\n                            // Attempt to use SSO. The host will return true if it can handle SSO, in which case\n                            // we bypass OAuth\n                            attemptOAuth = !this.onSSOTokenNeeded(this, request, response.tokenExchangeResource);\n                        }\n\n                        if (attemptOAuth) {\n                            // Attempt to use OAuth\n                            this.removeProgressOverlay(request);\n                            \n                            if (response.signinButton === undefined) {\n                                throw new Error(\"internalSendActivityRequestAsync: the login request doesn't contain a valid signin URL.\");\n                            }\n\n                            logEvent(Enums.LogLevel.Info, \"Login required at \" + response.signinButton.value);\n\n                            if (this.onShowSigninPrompt) {\n                                // Bypass the built-in auth prompt if the host app handles it\n                                this.onShowSigninPrompt(this, request, response.signinButton);\n                            }\n                            else {\n                                this.showAuthCodeInputDialog(request);\n\n                                let left = window.screenX + (window.outerWidth - GlobalSettings.applets.authPromptWidth) / 2;\n                                let top = window.screenY + (window.outerHeight - GlobalSettings.applets.authPromptHeight) / 2;\n\n                                window.open(\n                                    response.signinButton.value,\n                                    response.signinButton.title ? response.signinButton.title : \"Sign in\",\n                                    `width=${GlobalSettings.applets.authPromptWidth},height=${GlobalSettings.applets.authPromptHeight},left=${left},top=${top}`);\n                            }\n                        }\n                    }\n                    else {\n                        logEvent(Enums.LogLevel.Error, \"Authentication failed. Giving up after \" + request.attemptNumber + \" attempt(s)\");\n\n                        alert(Strings.magicCodeInputCard.authenticationFailed());\n                    }\n\n                    // Exit the loop. After a LoginRequestResponse, the host app is responsible for retrying the request\n                    break;\n                }\n                else {\n                    throw new Error(\"Unhandled response type: \" + response.toString());\n                }\n            }\n        }\n    }\n\n    readonly renderedElement: HTMLElement;\n\n    hostConfig?: HostConfig;\n    channelAdapter?: ChannelAdapter;\n\n    onCardChanging?: (sender: AdaptiveApplet, card: any) => boolean;\n    onCardChanged?: (sender: AdaptiveApplet) => void;\n    onPrefetchSSOToken?: (sender: AdaptiveApplet, tokenExchangeResource: TokenExchangeResource) => void;\n    onSSOTokenNeeded?: (sender: AdaptiveApplet, request: IActivityRequest, tokenExchangeResource: TokenExchangeResource) => boolean;\n    onPrepareActivityRequest?: (sender: AdaptiveApplet, request: IActivityRequest, action: ExecuteAction) => boolean;\n    onActivityRequestSucceeded?: (sender: AdaptiveApplet, response: SuccessResponse, parsedContent: string | AdaptiveCard | undefined) => void;\n    onActivityRequestFailed?: (sender: AdaptiveApplet, response: ErrorResponse) => number;\n    onCreateSerializationContext?: (sender: AdaptiveApplet) => SerializationContext;\n    onCreateProgressOverlay?: (sender: AdaptiveApplet, request: IActivityRequest) => HTMLElement | undefined;\n    onRemoveProgressOverlay?: (sender: AdaptiveApplet, request: IActivityRequest) => void;\n    onRenderManualRefreshButton?: (sender: AdaptiveApplet) => HTMLElement | undefined;\n    onAction?: (sender: AdaptiveApplet, action: Action) => void;\n    onShowManualRefreshButton?: (sender: AdaptiveApplet) => boolean;\n    onShowAuthCodeInputDialog?: (sender: AdaptiveApplet, request: IActivityRequest) => boolean;\n    onShowSigninPrompt?: (sender: AdaptiveApplet, request: IActivityRequest, signinButton: AuthCardButton) => void;\n\n    constructor() {\n        this.renderedElement = document.createElement(\"div\");\n        this.renderedElement.className = \"aaf-cardHost\"\n        this.renderedElement.style.position = \"relative\";\n        this.renderedElement.style.display = \"flex\";\n        this.renderedElement.style.flexDirection = \"column\";\n\n        this._cardHostElement = document.createElement(\"div\");\n\n        this._refreshButtonHostElement = document.createElement(\"div\");\n        this._refreshButtonHostElement.className = \"aaf-refreshButtonHost\";    \n        this._refreshButtonHostElement.style.display = \"none\";\n\n        this.renderedElement.appendChild(this._cardHostElement);\n        this.renderedElement.appendChild(this._refreshButtonHostElement);\n    }\n\n    refreshCard() {\n        if (this._card && this._card.refresh) {\n            this.internalExecuteAction(this._card.refresh.action, ActivityRequestTrigger.Manual, 0);\n        }\n    }\n\n    setCard(payload: any) {\n        this.internalSetCard(payload, 0);\n    }\n\n    get card(): AdaptiveCard | undefined {\n        return this._card;\n    }\n}"],"sourceRoot":""}