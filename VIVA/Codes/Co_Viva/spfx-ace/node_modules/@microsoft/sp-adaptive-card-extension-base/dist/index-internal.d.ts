/**
 * SharePoint Framwork Adaptive Card Extensions
 *
 * @remarks This package defines the APIs for creating SPFx Adaptive Card Extensions.
 * Adaptive Card Extensions are lightweight data focused components, which utilize
 * Adaptive Cards to deliver rich, native experiences.
 *
 * @packagedocumentation
 */

import { Action } from 'adaptivecards';
import { ActionStyle } from 'adaptivecards';
import { BaseComponent } from '@microsoft/sp-component-base';
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { DisplayMode } from '@microsoft/sp-core-library';
import { IAction } from 'adaptivecards/lib/schema';
import { IAdaptiveCard } from 'adaptivecards/lib/schema';
import { IColumnSet } from 'adaptivecards/lib/schema';
import { IComponentPropertyMetadata } from '@microsoft/sp-component-base';
import { IContainer } from 'adaptivecards/lib/schema';
import { IFactSet } from 'adaptivecards/lib/schema';
import { IImage } from 'adaptivecards/lib/schema';
import { IImageSet } from 'adaptivecards/lib/schema';
import { IOpenUrlAction } from 'adaptivecards/lib/schema';
import { IPropertyPaneAccessor } from '@microsoft/sp-webpart-base';
import { IPropertyPaneConfiguration } from '@microsoft/sp-property-pane';
import { IPropertyPaneGroup } from '@microsoft/sp-property-pane';
import { ISDKs } from '@microsoft/sp-webpart-base';
import { ISerializedServerProcessedData } from '@microsoft/sp-component-base';
import { IShowCardAction } from 'adaptivecards/lib/schema';
import { ISubmitAction } from 'adaptivecards/lib/schema';
import { ITextBlock } from 'adaptivecards/lib/schema';
import { ServiceKey } from '@microsoft/sp-core-library';
import { ServiceScope } from '@microsoft/sp-core-library';
import { Version } from '@microsoft/sp-core-library';

/* Excluded from this release type: _ACEMySiteCacheManager */

/* Excluded from this release type: _AdaptiveCardExtensionActionShim */

/**
 * Adaptive Card Extension context object.
 *
 * @public
 */
export declare class AdaptiveCardExtensionContext extends BaseComponentContext {
    /**
     * See {@link @microsoft/sp-component-base#BaseComponentContext.manifest}
     */
    readonly manifest: IAdaptiveCardExtensionManifest<unknown>;
    private _aceHost;
    private _deviceContext;
    private _location;
    private _logACEEditCustomerPromiseFailure;
    /* Excluded from this release type: __constructor */
    /* Excluded from this release type: _host */
    /**
     * See {@link @microsoft/sp-webpart-base#IPropertyPaneAccessor }
     */
    get propertyPane(): IPropertyPaneAccessor | undefined;
    get deviceContext(): DeviceContext;
    /* Excluded from this release type: location */
    /* Excluded from this release type: _logEditCustomerPromiseFailure */
}

/* Excluded from this release type: _AdaptiveCardExtensionHost */

/* Excluded from this release type: _AdaptiveCardExtensionLoader */

/**
 * Base class for Adaptive Card Extensions.
 *
 * @remarks Adaptive Card Extensions must inherit from this class.
 *
 * @public
 */
export declare class BaseAdaptiveCardExtension<TProperties = {}, TState = Readonly<{}>> extends BaseComponent {
    /**
     * See {@link @microsoft/sp-component-base#BaseComponent.context}.
     */
    protected context: AdaptiveCardExtensionContext;
    private _state;
    private _cardNavigator;
    private _quickViewNavigator;
    private _cacheManager;
    private _ACRenderArgs;
    private _properties;
    private _perfTagName;
    private _isLoggedRenderPerf;
    /**
     * @readonly
     */
    protected _title: string;
    /**
     * @readonly
     */
    protected _iconProperty: string;
    private _description;
    private _cardSize;
    private _displayMode;
    private _renderedOnce;
    private _isInitialized;
    private _renderedFromPersistedData;
    private _renderType;
    private _isVisible;
    private _urlParams;
    private _renderCompletedGuardTimer;
    private _renderCompletedPromise;
    private _renderCompletedPromiseResolver;
    private _renderCompletedPromiseRejector;
    private _lkgRenderTime;
    private _isInitializedWithLKG;
    private _cacheKey;
    private _instanceIdForLogs;
    constructor();
    /**
     * The {@link ViewNavigator} for the Card view.
     *
     * @readonly
     */
    get cardNavigator(): ViewNavigator<BaseCardView<TProperties, TState>>;
    /**
     * The current {@link CardSize}.
     *
     * @readonly
     */
    protected get cardSize(): CardSize;
    /**
     * The value of this property is stored in the serialized data of the Adaptive Card Extension. It can be used to
     * manage versioning of the Adaptive Card Extension.
     *
     * @remarks The default version is 1.0.
     *
     * @readonly
     */
    protected get dataVersion(): Version;
    /**
     * The description of the Adaptive Card Extension defined in the manifest.
     *
     * @readonly
     */
    protected get description(): string;
    /**
     * The current {@link @microsoft/sp-core-library#DisplayMode}.
     *
     * @readonly
     */
    get displayMode(): DisplayMode;
    /**
     * The custom, persisted properties of the Adaptive Card Extension.
     *
     * @readonly
     */
    protected get properties(): TProperties;
    /**
     * {@link QuickViewNavigator} is a {@link ViewNavigator} for the Quick view.
     *
     * @readonly
     */
    get quickViewNavigator(): QuickViewNavigator<BaseAdaptiveCardView<TProperties, TState>>;
    /**
     * Indicates whether the Adaptive Card Extension was rendered from persisted data or
     * initialized from a default state.
     *
     * @readonly
     */
    protected get renderedFromPersistedData(): boolean;
    /**
     * Indicates whether the Adaptive Card Extension has initially rendered.
     *
     * @readonly
     */
    get renderedOnce(): boolean;
    /**
     * The current {@link RenderType}.
     *
     * @readonly
     */
    get renderType(): RenderType;
    /**
     * This property defines metadata for the Adaptive Card Extension property bag. The metadata can help SharePoint understand
     * the content of the properties better and perform relevant services on the data.
     *
     * @remarks See {@link IAdaptiveCardExtensionPropertiesMetadata} for more information about how to define metadata.
     *
     * @virtual
     */
    protected get propertiesMetadata(): IAdaptiveCardExtensionPropertiesMetadata | undefined;
    /* Excluded from this release type: isRenderAsync */
    /**
     * Gets the custom state of the Adaptive Card Extension.
     *
     * @remarks This property is automatically shared across registered Views.
     *
     * @remarks This property can only be initialized once, and should be done in the constructor or {@link onInit}.
     *
     * @remarks If this property is not initialized, {@link BaseAdaptiveCardExtension.setState} cannot be called.
     *
     * @readonly
     */
    protected get state(): Readonly<TState>;
    protected set state(initialState: Readonly<TState>);
    /**
     * This value is displayed in Card and Quick view unless it is explicitly overridden by the Views.
     * It is also displayed as the Property Pane title.
     *
     * @remarks By default, this will return the title defined in the manifest.
     *
     * @virtual
     */
    get title(): string;
    /**
     * The icon url used to render an icon on the Card view.
     *
     * @remarks By default, this will return the iconImageUrl defined in the manifest.
     *
     * @virtual
     */
    protected get iconProperty(): string;
    /**
     * Get the Property Pane configuration for this Adaptive Card Extension. If an Adaptive Card Extension
     * wants to use the Property Pane, then this method must be overriden.
     *
     * @remarks Property Pane resources can be defer loaded to reduce bundle size. See {@link BaseAdaptiveCardExtension.loadPropertyPaneResources}.
     *
     * @virtual
     */
    protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration;
    /**
     * API to enable asynchronous loading of Property Pane related resources of the Adaptive Card Extension.
     *
     * @remarks No Property Pane APIs will be called before this method resolves.
     *
     * @remarks No Property Pane events will be raised until this method resolves except for `PropertyPaneConfigurationComplete`,
     * which can be used to clean up any pending resources.
     *
     * @virtual
     */
    protected loadPropertyPaneResources(): Promise<void>;
    /* Excluded from this release type: getCacheSettings */
    /* Excluded from this release type: getCachedState */
    /* Excluded from this release type: _internalOnAction */
    /* Excluded from this release type: _internalOnActionError */
    /**
     * Lifecycle method called before serialization.
     *
     * @virtual
     */
    onBeforeSerialize(): void;
    /**
     * Lifecycle method called after the Adaptive Card Extension's properties have been
     * updated by a source other than the property pane (except for isolated Adaptive Card Extensions).
     *
     * @remarks For isolated Adaptive Card Extensions, this lifecycle is invoked instead
     * of `onPropertyPaneFieldChanged`.
     *
     * @param prevProperties - The Adaptive Card Extension properties before the update.
     *
     * @virtual
     */
    onAfterPropertiesUpdatedExternally(prevProperties: TProperties): void;
    /**
     * Lifecycle method called before the property bag is populated with the deserialized property object.
     *
     * @remarks
     * The default implementation is a no-op. An Adaptive Card Extension developer can override this API if the deserialized object
     * does not fully reflect the initial state of the property bag. This gives the Adaptive Card Extension developer a chance to
     * populate the property bag right after the data is deserialized to an object.
     *
     * An important scenario to use deserialize is upgrading. An upgraded Adaptive Card Extension may load the data
     * that was serialized by an older version of the Adaptive Card Extension that supported a different schema of the property bag,
     * resulting the deserialized object to be incosistent with the current schema of the property bag. The developer
     * can use `onAfterDeserialize` to check the dataVersion and fix the property bag.
     *
     * @param deserializedProperties - The object deserialized from the stored data. Note that the schema of this object
     * is not necessarily consistent with the current property bag, because the serialization could have been done by
     * an older version of the Adaptive Card Extension
     * @param dataVersion - The data version of the stored data being deserialized. You can use this value to determine
     * if the data was serialized by an older Adaptive Card Extension. Adaptive Card Extensions can define their data version
     * by overriding the dataVersion property.
     *
     * @returns The property bag of the Adaptive Card Extension
     *
     * @virtual
     */
    protected onAfterDeserialize(deserializedProperties: any, dataVersion: Version): TProperties;
    /**
     * Lifecycle method called after the {@link @microsoft/sp-core-library#DisplayMode} changed.
     *
     * @virtual
     *
     * @param oldDisplayMode - The old display mode.
     */
    protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;
    /**
     * Lifecycle method called before disposing the Adaptive Card Extension.
     *
     * @virtual
     */
    onDispose(): void;
    /**
     * Lifecycle method called during initialization.
     *
     * @remarks Asynchronous data fetches should be started during this lifecycle. Rendering can either be dependent on the result
     * or, if resolved immediately, a fetching data state can be rendered.
     *
     * @virtual
     */
    onInit(): Promise<void>;
    /* Excluded from this release type: onInit */
    /**
     * Lifecycle method called when a Property Pane field is changed.
     *
     * @remarks This is invoked for reactive Property Panes.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     *  In the case of custom field, if no target property is provided then a custom value is assigned,
     *  which will be in the form of `__CustomField_<key provided when the custom field is created>`.
     * @param oldValue - Old value of the property.
     *  This value could be undefined/empty in the case of custom field.
     * @param newValue - New value of the property.
     *  This value could be undefined/empty in the case of custom field.
     *
     * @virtual
     */
    protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void;
    /**
     * Lifecycle method called when the {@link RenderType} changes.
     *
     * @param oldRenderType - The previous {@link RenderType}.
     *
     * @virtual
     */
    protected onRenderTypeChanged(oldRenderType: RenderType): void;
    /**
     * The id of the initial Card view.
     *
     * @remarks A Card view with this id must be registered with {@link cardNavigator} before rendering.
     *
     * @remarks By default, this returns undefined and will render a default Card view.
     *
     * @virtual
     */
    protected renderCard(): string | undefined;
    /* Excluded from this release type: _getPreFrameworkPropertyPaneConfiguration */
    /* Excluded from this release type: _isFrameworkPropertyPaneEnabled */
    /**
     * Sets the visibility of the Adaptive Card Extension and re-render
     *
     * @remarks This method should be called after a card view has been registered.
     *          Otherwise visibility change will not be applied to the Adaptive Card.
     *
     * @readonly
     */
    get isVisible(): boolean;
    set isVisible(value: boolean);
    /* Excluded from this release type: renderCompleted */
    private _endMarkForRenderComplete;
    private _resolveRenderCompleted;
    /**
     * Update the state of the Adaptive Card Extension and re-render.
     *
     * @remarks Calling {@link BaseAdaptiveCardExtension.setState} without an object will force a re-render with the current state.
     *
     * @remarks {@link BaseAdaptiveCardExtension.state} must have been initialized before calling {@link BaseAdaptiveCardExtension.setState}.
     *
     * @param state - The new state to set.
     */
    setState(newState?: Partial<TState>): void;
    /* Excluded from this release type: update */
    /* Excluded from this release type: _getRenderArguments */
    /* Excluded from this release type: _propertiesMetadata */
    /* Excluded from this release type: _getPropertyPaneConfiguration */
    /**
     * The current {@link ViewNavigator}.
     *
     * @remarks If the current {@link BaseAdaptiveCardExtension.renderType} is `Card`
     * then returns {@link BaseAdaptiveCardExtension.cardNavigator}.
     *
     * @remarks If the current {@link BaseAdaptiveCardExtension.renderType} is `QuickView`
     * then returns {@link BaseAdaptiveCardExtension.quickViewNavigator}.
     */
    get navigator(): ViewNavigator<BaseView<TProperties, TState>>;
    /* Excluded from this release type: _internalDeserialize */
    /* Excluded from this release type: _internalInitialize */
    /* Excluded from this release type: _internalSetDisplayMode */
    /* Excluded from this release type: _loadPropertyPaneResources */
    /* Excluded from this release type: _onPropertyPaneFieldChanged */
    /* Excluded from this release type: _renderCompleted */
    /* Excluded from this release type: _internalOnAfterInit */
    /* Excluded from this release type: _internalSerialize */
    /* Excluded from this release type: _setRenderType */
    /* Excluded from this release type: _updateConfigurableFields */
    /* Excluded from this release type: _logCardActionEngagement */
    private _getCard;
    /**
     * Returns the AdaptiveCard payload (template and data), as well as the top PageBar's configuration properties
     *
     * @param updateOnlyData - boolean
     */
    private _getQuickView;
    private _onViewInitialized;
    private _navigatorCallback;
    private _closeQuickViewCallback;
    /**
     * Updates this._cardObject fields according to type given
     * If RenderType is
     * 'L1' then call getL1 will be invoked. This will be used internally to support first time render
     * 'L2' and updateOnlyData == false, then getL2Template and getL2Data will be invoked
     * 'L2' and updateOnlyData == true, then getL2Data will be invoked and the last known template will be reused
     * @param renderTypeToUpdate - RenderType
     * @param updateOnlyData - boolean
     */
    private _updateRenderArgs;
    private _updateProperty;
    /**
     * Start renderComplete guard timer.
     * If renderComplete API is not called within DEFAULT_ASYNC_RENDER_COMPLETED_TIMEOUT_TIME seconds,
     * it will automatically invoke renderComplete as a time out.
     *
     * Note: Timer guard exist because BaseClientSideWebpart have a 30 second timer guard.
     * This accounts for isolated ace scenario where it has to create the isolated domain and load the ace in it.
     *
     */
    private _startRenderCompletedGuardTimer;
    private _clearRenderCompletedGuardTimer;
    private _generateCacheKey;
}

/* Excluded from this release type: _BaseAdaptiveCardExtensionCache */

/**
 * Base class for an Adaptive Card view.
 *
 * @remarks Views used to render the Quick view must inherit from this class.
 *
 * @public
 */
export declare abstract class BaseAdaptiveCardView<TProperties = {}, TState = {}, TData = {}> extends BaseView<TProperties, TState, TData> {
    /**
     * The data used to render the Adaptive Card.
     *
     * @virtual
     */
    get data(): TData;
    /**
     * An optional external link to be displayed in the navigation bar above the Adaptive Card.
     *
     * @remarks If this method is not overriden or returns undefined, no link will be displayed.
     *
     * @virtual
     */
    get externalLink(): IExternalLinkParameters | undefined;
    /**
     * The Adaptive Card template rendered by the view.
     *
     * @remarks The format of the template must be valid Adaptive Card JSON.
     *
     * @virtual
     */
    abstract get template(): ISPFxAdaptiveCard;
    /**
     * An optional title to be displayed in the navigation bar above the Adaptive Card.
     * @remarks If not overriden, the title displayed will be {@link BaseAdaptiveCardExtension.title}
     *
     * @virtual
     */
    get title(): string;
}

/**
 * Base class for a Basic Card view.
 *
 * @remarks The basic Card view displays the following:
 *  - Card title
 *  - Card icon
 *  - One primary text field
 *  - One button in the `Medium` Card size, two buttons in the `Large` Card size
 *
 * @public
 */
export declare abstract class BaseBasicCardView<TProperties = {}, TState = {}> extends BaseCardView<TProperties, TState, IBasicCardParameters> {
    /* Excluded from this release type: _templateType */
    /**
     * Returns the Adaptive Card template for the {@link BaseBasicCardView}.
     *
     * @public
     * @sealed
     */
    get template(): ISPFxAdaptiveCard;
}

/**
 * Primitive base class for Card views.
 *
 * @remarks No third-party Card views should inherit from this class.
 *
 * @public
 * @sealed
 */
export declare abstract class BaseCardView<TProperties = {}, TState = {}, TData extends IBaseCardParameters = IBaseCardParameters> extends BaseView<TProperties, TState, TData> {
    /* Excluded from this release type: _templateType */
    /**
     * The buttons displayed on the Card.
     *
     * @remarks Some Card view templates will restrict how many buttons can be displayed depending on
     * various factors. See the documentation for the respective base Card View class for specific details.
     *
     * @virtual
     */
    get cardButtons(): [ICardButton] | [ICardButton, ICardButton] | undefined;
    /**
     * The data used to render the Card view.
     *
     * @remarks The available data to display is dependent on the Card view template and its respective
     * base Card view class. See the documentation for the Card View class for specific details.
     */
    abstract get data(): TData;
    /**
     * Action to invoke when the card is selected.
     *
     * @virtual
     */
    get onCardSelection(): IQuickViewCardAction | IExternalLinkCardAction | ISelectMediaCardAction | IGetLocationCardAction | IShowLocationCardAction | undefined;
    /**
     * If true, this Card view will be cached and rendered at next load.
     *
     * @virtual
     */
    get isCacheEnabled(): boolean;
    /* Excluded from this release type: _getTemplate */
}

/**
 * Base class for an Image Card view.
 *
 * @remarks The Image Card view displays the following:
 *  - Card title
 *  - Card icon
 *  - One image
 *  - One primary text field
 *  - Zero buttons in the `Medium` Card size, up to two buttons in `Large` Card size
 *
 * @public
 */
export declare abstract class BaseImageCardView<TProperties = {}, TState = {}> extends BaseCardView<TProperties, TState, IImageCardParameters> {
    /* Excluded from this release type: _templateType */
    /**
     * Returns the Adaptive Card template for the {@link BaseImageCardView}.
     *
     * @public
     * @sealed
     */
    get template(): ISPFxAdaptiveCard;
}

/**
 * Base class for a Primary Text Card view.
 *
 * @remarks The Primary Text Card view displays the following:
 *  - Card Title
 *  - Card Icon
 *  - One primary text field
 *  - One description text field
 *  - Zero buttons in the `Medium` Card size, up to two buttons in `Large` Card size
 *
 *
 * @public
 */
export declare abstract class BasePrimaryTextCardView<TProperties = {}, TState = {}> extends BaseCardView<TProperties, TState, IPrimaryTextCardParameters> {
    /* Excluded from this release type: _templateType */
    /**
     * Returns the Adaptive Card template for the {@link BasePrimaryTextCardView}.
     *
     * @public
     * @sealed
     */
    get template(): ISPFxAdaptiveCard;
}

/**
 * Base class for all views.
 *
 * @remarks No third-party views should inherit from this class.
 *
 * @public
 * @sealed
 */
export declare abstract class BaseView<TProperties = {}, TState = {}, TData = {}> {
    /* Excluded from this release type: _ace */
    /* Excluded from this release type: _properties */
    /* Excluded from this release type: _state */
    /* Excluded from this release type: _context */
    /* Excluded from this release type: _getCardSize */
    /**
     * See {@link BaseAdaptiveCardExtension.cardNavigator}.
     *
     * @readonly
     */
    get cardNavigator(): ViewNavigator<BaseCardView<TProperties, TState>>;
    /**
     * The data used to render the View.
     */
    abstract get data(): TData | undefined;
    /**
     * See {@link BaseAdaptiveCardExtension.quickViewNavigator}.
     *
     * @readonly
     */
    get quickViewNavigator(): QuickViewNavigator<BaseAdaptiveCardView<TProperties, TState>>;
    /**
     * See {@link BaseAdaptiveCardExtension.properties}.
     */
    get properties(): TProperties;
    /**
     * See {@link BaseAdaptiveCardExtension.state}.
     */
    get state(): Readonly<TState>;
    /**
     * See {@link BaseAdaptiveCardExtension.cardSize}.
     */
    get cardSize(): CardSize;
    /**
     * See {@link BaseAdaptiveCardExtension.context}.
     */
    get context(): AdaptiveCardExtensionContext;
    /**
     * The Adaptive Card template used to render the view.
     */
    abstract get template(): ISPFxAdaptiveCard;
    /**
     * Action handler for Adaptive Card Actions.
     *
     * @param action - The {@link IActionArguments} for the current event.
     */
    onAction(action: IActionArguments): void;
    /* Excluded from this release type: onActionError */
    /**
     * See {@link BaseAdaptiveCardExtension.setState}.
     */
    setState(newState?: Partial<TState>): void;
    /**
     * Sets visibility to false and rerenders the card.
     * See {@link BaseAdaptiveCardExtension.isVisible}.
     */
    setVisibility(isVisible: boolean): void;
}

/**
 * Size of the Card view.
 *
 * @public
 */
export declare type CardSize = 'Medium' | 'Large';

/**
 * `WebView` indicates the Adaptive Card Extension is rendering through a web browser equivalent.
 * `Mobile` indicates the Adaptive Card Extension is rendering natively on a mobile platform.
 *
 * @public
 */
export declare type DeviceContext = 'WebView' | 'Mobile' | 'TeamsDesktop';

/**
 * The object passed to {@link BaseView.onAction} when an Adaptive Card Action is executed.
 *
 * @remarks Only `Submit`, `ShowCard`, 'Viva.SelectMedia', 'Viva.GetLocation' and 'Viva.ShowLocation; actions are routed to the {@link BaseView.onAction} handler.
 *
 * @public
 */
export declare type IActionArguments = ISubmitActionArguments | IShowCardActionArguments | ISelectMediaActionArguments | IGetLocationActionArguments;

/* Excluded from this release type: IActionError */

/**
 * The object passed to {@link BaseView.onActionError} when an Adaptive Card Action is executed.
 *
 * @remarks Only `Submit`, `ShowCard`, 'Viva.SelectMedia', 'Viva.GetLocation' and 'Viva.ShowLocation; actions are routed to the {@link BaseView.onActionError} handler.
 *
 * @public
 */
export declare type IActionErrorArguments = IBaseActionErrorArguments | ISelectMediaActionErrorArguments | ILocationErrorArguments;

/* Excluded from this release type: _IActionShimProvider */

/* Excluded from this release type: _IAdaptiveCardExtension */

/* Excluded from this release type: _IAdaptiveCardExtensionCache */

/* Excluded from this release type: _IAdaptiveCardExtensionCacheObject */

/* Excluded from this release type: _IAdaptiveCardExtensionContextParameters */

/* Excluded from this release type: _IAdaptiveCardExtensionData */

/* Excluded from this release type: _IAdaptiveCardExtensionHostParameters */

/* Excluded from this release type: _IAdaptiveCardExtensionLoadContext */

/* Excluded from this release type: IAdaptiveCardExtensionManifest */

/**
 * This structure is used to define metadata for Adaptive Card Extension properties as a map of string to `IAdaptiveCardExtensionPropertiesMetadata`
 *
 * @public
 */
export declare interface IAdaptiveCardExtensionPropertiesMetadata {
    [key: string]: IAdaptiveCardExtensionPropertyMetadata;
}

/**
 * This is the structure used for map values in `IAdaptiveCardExtensionPropertiesMetadata`.
 *
 * @public
 */
export declare interface IAdaptiveCardExtensionPropertyMetadata extends IComponentPropertyMetadata {
}

/* Excluded from this release type: _IAdaptiveCardRenderParameters */

/**
 * This object represents error associated with a single attachment
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface IAttachmentError {
    /**
     * Error code associated with a particular attachment
     * @public
     */
    errorCode: 'FileTooLarge' | 'IncorrectFileFormat';
}

/**
 * Base object passed to {@link BaseView.onAction} when an Adaptive Card Action is executed.
 *
 * @remarks Only `Submit` and `ShowCard` actions are routed to the {@link BaseView.onAction} handler.
 *
 * @public
 */
export declare interface IBaseActionArguments {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'Submit' | 'ShowCard';
    /**
     * The id specified in the Adaptive Card template
     */
    id?: string;
}

/**
 * Base object passed to {@link BaseView.onActionError} when an Adaptive Card OnActionError is executed.
 *
 *  @public
 */
export declare interface IBaseActionErrorArguments {
    /* Excluded from this release type: type */
    /* Excluded from this release type: id */
    /* Excluded from this release type: error */
}

/**
 * The primitive data parameters for every Card view.
 *
 * @public
 */
export declare interface IBaseCardParameters {
    /**
     * The icon to display.
     *
     * @remarks The value is a URL to an icon.
     *
     */
    iconProperty?: string;
    /**
     * The icon alt text.
     */
    iconAltText?: string;
    /* Excluded from this release type: _iconPropertyFallback */
    /**
     * The title to display.
     *
     */
    title?: string;
}

/* Excluded from this release type: _IBaseIsolatedApplicationMessage */

/* Excluded from this release type: _IBaseIsolatedMessage */

/* Excluded from this release type: _IBaseIsolatedServiceCallbackParameters */

/* Excluded from this release type: _IBaseIsolatedServiceMessage */

/**
 * The data parameters for {@link BaseBasicCardView}.
 *
 * @public
 */
export declare interface IBasicCardParameters extends IBaseCardParameters {
    /**
     * The primary text to display.
     */
    primaryText: string;
}

/* Excluded from this release type: ICachedLoadParameters */

/* Excluded from this release type: ICacheSettings */

/**
 * Type of handler for when a button is pressed.
 *
 * @public
 */
export declare type ICardAction = IQuickViewCardAction | IExternalLinkCardAction | ISubmitCardAction | ISelectMediaCardAction | IGetLocationCardAction | IShowLocationCardAction;

/**
 * A button to display on a Card View.
 *
 * @public
 */
export declare interface ICardButton {
    /**
     * Text displayed on the button.
     */
    title: string;
    /**
     * The type of the button.
     */
    action: ICardAction;
    /**
     * Controls the style of the button.
     *
     * @remarks The destructive Action style is not supported in Card views
     */
    style?: ActionStyle;
    /**
     * Unique Id of the button.
     */
    id?: string;
}

/* Excluded from this release type: _ICardDataParameters */

/* Excluded from this release type: _ICardProperties */

/* Excluded from this release type: _ICardRenderParameters */

/* Excluded from this release type: _IComponentContextParameters */

/**
 * Confirmation Dialog option that is passed through `Submit` Action is executed.
 * @public
 */
export declare interface IConfirmationDialog {
    title: string;
    message: string;
}

/**
 * Open an external link.
 *
 * @public
 */
export declare interface IExternalLinkCardAction {
    /**
     * Indicates this is an external link button.
     */
    type: 'ExternalLink';
    /**
     * Parameters for the external link.
     */
    parameters: IExternalLinkParameters;
}

/**
 * Parameters for opening an external link.
 *
 * @public
 */
export declare interface IExternalLinkParameters {
    /**
     * Indicates whether this is a Teams Deep Link.
     */
    isTeamsDeepLink?: boolean;
    /**
     * The URL of the link.
     */
    target: string;
}

/**
 * Interface for Viva Get Location action
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface IGetLocationAction extends IAction {
    /**
     * Indicates this is a Viva Select Location button.
     */
    type: 'VivaAction.GetLocation';
    /**
     * Parameters that can be supplied with the Viva Get Location Action.
     */
    parameters?: IGetLocationActionParameters;
}

/**
 * The object passed to {@link BaseView.onAction} when a Get location Action is executed.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface IGetLocationActionArguments extends Omit<IBaseActionArguments, 'type'> {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'VivaAction.GetLocation';
    /**
     * Coordinates of the location.
     * In case of erroneous situation, location object will be undefined.
     */
    location?: ILocation;
}

/**
 * Parameters that can be supplied with the Viva Get Location Action.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface IGetLocationActionParameters {
    /**
     * If true, allow the user to choose a location by opening a map.
     * Otherwise, get the current location.
     */
    chooseLocationOnMap?: boolean;
}

/* Excluded from this release type: IGetLocationActionProvider */

/**
 * Invoke an `VivaAction.GetLocation` event.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface IGetLocationCardAction {
    /**
     * Indicates this is a Viva Select Location button.
     */
    type: 'VivaAction.GetLocation';
    /**
     * Parameters that can be supplied with the Viva Get Location Action.
     */
    parameters?: IGetLocationActionParameters;
}

/**
 * The data parameters for {@link BaseImageCardView}.
 *
 * @public
 */
export declare interface IImageCardParameters extends IBaseCardParameters {
    /**
     * The image URL to display.
     */
    imageUrl: string;
    /* Excluded from this release type: _imageUrlFallback */
    /**
     * The primary text to display.
     */
    primaryText: string;
    /**
     * The image alt text.
     */
    imageAltText?: string;
}

/* Excluded from this release type: _IIsoaltedLocationRequestCallbackParameters */

/* Excluded from this release type: _IIsolatedACEDataServiceMessage */

/* Excluded from this release type: _IIsolatedACELocationServiceMessage */

/* Excluded from this release type: _IIsolatedAction */

/* Excluded from this release type: _IIsolatedActionServiceMessage */

/* Excluded from this release type: _IIsolatedCloseQuickViewMessage */

/* Excluded from this release type: _IIsolatedErrorCallbackParameters */

/* Excluded from this release type: _IIsolatedErrorMessage */

/* Excluded from this release type: _IIsolatedInitializeServiceMessage */

/* Excluded from this release type: _IIsolatedOboTokenRequestMessage */

/* Excluded from this release type: _IIsolatedOBOTokenServiceMessage */

/* Excluded from this release type: _IIsolatedOpenQuickViewMessage */

/* Excluded from this release type: _IIsolatedOpenUrlActionArguments */

/* Excluded from this release type: _IIsolatedOpenUrlCallbackParameters */

/* Excluded from this release type: _IIsolatedOpenUrlMessage */

/* Excluded from this release type: _IIsolatedQuickViewActionArguments */

/* Excluded from this release type: _IIsolatedReadyMessage */

/* Excluded from this release type: _IIsolatedRenderCallbackParameters */

/* Excluded from this release type: _IIsolatedRenderCompletedCallbackParameters */

/* Excluded from this release type: _IIsolatedRenderMessage */

/* Excluded from this release type: _IIsolatedTokenRequestMessage */

/* Excluded from this release type: _IIsolatedVisibilityChangeCallbackParameters */

/* Excluded from this release type: _ILoadIsolatedAdaptiveCardExtensionParameters */

/**
 * Interface for location coordinates
 * @public
 */
export declare interface ILocation {
    /**
     * Latitude of the location.
     */
    latitude: number;
    /**
     * Longitude of the location.
     */
    longitude: number;
    /**
     * Timestamp
     */
    timestamp?: number;
    /**
     * Accuracy of the location.
     */
    accuracy?: number;
}

declare interface ILocationActionProvider {
    isBingMapOpen?: boolean;
}

/**
 * This object represents the error data that the Location action can throw.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface ILocationErrorArguments extends Omit<IBaseActionErrorArguments, 'type'> {
    /**
     * Indicates this is a Viva Select Location button.
     */
    type: 'VivaAction.GetLocation';
    /**
     * Error codes specific to the Get Location Error
     */
    error: {
        code: 'InternalError' | 'PermissionDenied';
    };
}

/* Excluded from this release type: _ILocationRequestMessage */

/* Excluded from this release type: _INavigationBarProperties */

/**
 * The data parameters for {@link BasePrimaryTextCardView}.
 *
 * @public
 */
export declare interface IPrimaryTextCardParameters extends IBaseCardParameters {
    /**
     * The description to display.
     */
    description: string;
    /**
     * The primary text to display.
     */
    primaryText: string;
}

/**
 * Open the quick view.
 *
 * @public
 */
export declare interface IQuickViewCardAction {
    /**
     * Indicates this action opens the quick view.
     */
    type: 'QuickView';
    /**
     * Parameters for the quick view opened by this action
     */
    parameters: IQuickViewParameters;
}

/**
 * Parameters for opening a Quick view.
 *
 * @public
 */
export declare interface IQuickViewParameters {
    /**
     * The view of the Quick view to open.
     */
    view: string;
}

/* Excluded from this release type: _IQuickViewRenderParameters */

/* Excluded from this release type: _IQuickViewSubmitData */

/* Excluded from this release type: _IRenderCompletedMessage */

/* Excluded from this release type: _IRenderIsolatedQuickViewParameters */

/* Excluded from this release type: _isAdaptiveCardExtensionLKGCachingEnabled */

/* Excluded from this release type: _ISelectActionTemplateAdaptiveCard */

/* Excluded from this release type: _ISelectActionTemplateContainer */

/**
 * Interface for new Viva Select Media action
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface ISelectMediaAction extends IAction {
    /**
     * Indicates this is a Viva Select Location button.
     * @public
     */
    type: 'VivaAction.SelectMedia';
    /**
     * Parameters that can be provided to the ISelectMedia Action
     * @public
     */
    parameters: ISelectMediaActionParameters;
}

/**
 * The object passed to {@link BaseView.onAction} when a `SelectMedia` Action is executed.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface ISelectMediaActionArguments extends Omit<IBaseActionArguments, 'type'> {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'VivaAction.SelectMedia';
    /**
     * media object returned media picker API
     * @public
     */
    media: ISelectMediaAttachment[];
    /**
     * Submit Action data that is passed to internal action handler to ensure forms do not clear.
     * @public
     */
    data: any;
}

/**
 * This object represents the data returned by the native media picker API.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface ISelectMediaActionErrorArguments extends Omit<IBaseActionErrorArguments, 'type'> {
    /**
     * The type of Adaptive Card Action.
     * @public
     */
    type: 'VivaAction.SelectMedia';
    /**
     * media object returned media picker API
     * @public
     */
    media: ISelectMediaAttachment[] | undefined;
    /**
     * Error codes specific to the Select Media Action.
     * @public
     */
    error: {
        code: 'FileSelectionFailed' | 'FilesSelectedAreIncompatible';
    };
}

/**
 * Parameters that can be supplied with the Viva Select Media Action.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface ISelectMediaActionParameters {
    /**
     * Specify the specific media type that should be selected
     */
    mediaType: MediaType;
    /**
     * Allow multiple images to be selected.
     */
    allowMultipleCapture?: boolean;
    /**
     * Max file size that can be uploaded.
     */
    maxSizePerFile?: number;
    /**
     * File formats supported for upload.
     */
    supportedFileFormats?: string[];
}

/**
 * This object represents the data returned by the native media picker API.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface ISelectMediaAttachment {
    /**
     * The names of the selected files.
     */
    fileName: string;
    /**
     * Content of the file represented as base64Strings
     */
    content: string;
    /**
     * Error associated with attachment
     */
    error?: IAttachmentError;
}

/**
 * Invoke an `VivaAction.SelectMedia` event.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface ISelectMediaCardAction {
    /**
     * Indicates this is a Viva Select Media button.
     */
    type: 'VivaAction.SelectMedia';
    /**
     * Parameters for the Select Media Action
     * @public
     */
    parameters: ISelectMediaActionParameters;
}

/* Excluded from this release type: _ISelectMediaHandleProvider */

/**
 * The object passed to {@link BaseView.onAction} when a `ShowCard` Action is executed.
 *
 * @public
 */
export declare interface IShowCardActionArguments extends IBaseActionArguments {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'ShowCard';
}

/**
 * Interface for Viva Show Location action
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface IShowLocationAction extends IAction {
    /**
     * Indicates this is a Viva show Location button.
     */
    type: 'VivaAction.ShowLocation';
    /**
     * Parameters that can be supplied with the Viva Show Location Action.
     */
    parameters?: IShowLocationActionParameters;
}

/**
 * Parameters that can be supplied with the Viva Show Location Action.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface IShowLocationActionParameters {
    /**
     * If set, show the coordinates that were passed.
     * Otherwise, show the current location.
     */
    locationCoordinates?: ILocation;
}

/* Excluded from this release type: IShowLocationActionProvider */

/**
 * Invoke an `VivaAction.ShowLocation` event.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare interface IShowLocationCardAction {
    /**
     * Indicates this is a Viva show Location button.
     */
    type: 'VivaAction.ShowLocation';
    /**
     * Parameters that can be supplied with the Viva Show Location Action.
     */
    parameters?: IShowLocationActionParameters;
}

/* Excluded from this release type: _IsolatedAdaptiveCardExtensionApplicationMessageEvent */

/* Excluded from this release type: _IsolatedAdaptiveCardExtensionService */

/* Excluded from this release type: _IsolatedAdaptiveCardExtensionServiceCallback */

/* Excluded from this release type: _IsolatedServiceCallbackParameters */

/* Excluded from this release type: _IsolatedServiceMessageEvent */

/**
 * SPFx Adaptive Card Extension schema for Adaptive Cards.
 *
 * @public
 */
export declare interface ISPFxAdaptiveCard extends Omit<IAdaptiveCard, 'actions'> {
    /**
     * Types of actions being exposed
     */
    actions?: (ISubmitAction | IOpenUrlAction | IShowCardAction | ISelectMediaAction | IGetLocationAction | IShowLocationAction)[];
}

/**
 * The object passed to {@link BaseView.onAction} when a `Submit` Action is executed.
 *
 * @public
 */
export declare interface ISubmitActionArguments extends IBaseActionArguments {
    /**
     * The type of Adaptive Card Action.
     */
    type: 'Submit';
    /**
     * The data object defined in the Adaptive Card template
     */
    data: any;
}

/**
 * Invoke an `Action.Submit` event.
 *
 * @public
 */
export declare interface ISubmitCardAction {
    /**
     * Indicates this is a Submit button.
     */
    type: 'Submit';
    /**
     * Parameters passed to the Submit event handler.
     */
    parameters: ISubmitCardParameters;
    /**
     * Confirmation dialog option passed to the submit handler.
     */
    confirmationDialog?: IConfirmationDialog;
}

/**
 * Parameters for submit card action.
 *
 * @public
 */
export declare interface ISubmitCardParameters {
    /* Excluded from this release type: __MSConfirmationDialog__ */
    /**
     * Key value pair property that can be defined for submit card action parameters.
     */
    [key: string]: unknown;
}

/* Excluded from this release type: _LocalStorageACECache */

/* Excluded from this release type: _LogEditCustomerPromiseFailure */

/**
 * Enum value to specify the type of media.
 * @remarks API under active development and not ready for use.
 * @public
 */
export declare enum MediaType {
    Image = 1,
    Audio = 4
}

/* Excluded from this release type: _NavigationButtonType */

/**
 * Manages a stack of Adaptive Card views for the Quick view.
 *
 * @remarks The top of the stack is the currently rendered view.
 *
 * @public
 */
export declare class QuickViewNavigator<TView extends BaseView> extends ViewNavigator<TView> {
    private readonly _closeQuickViewCallback;
    /* Excluded from this release type: __constructor */
    /**
     * Closes the View.
     */
    close(): void;
}

/**
 * `Card` is the default render View. `QuickView` is a more detailed view of the Adaptive Card Extension.
 * @public
 */
export declare type RenderType = 'Card' | 'QuickView';

/* Excluded from this release type: _TemplateType */

/* Excluded from this release type: _TextBlockSubType */

/**
 * Manages a stack of views.
 *
 * @remarks The top of the stack represents the currently rendered view.
 *
 * @public
 */
export declare class ViewNavigator<TView extends BaseView> {
    private readonly _handleStackChangedCallback;
    private readonly _handleInitializeCallback;
    private _viewStack;
    private _viewCache;
    private _viewRegistry;
    constructor(_handleStackChangedCallback: (skipUpdate: boolean) => void, _handleInitializeCallback: (view: BaseView) => void);
    /**
     * Registers a new view.
     *
     * @remarks `initializer` must return an instance of a {@link BaseView} or a Promise of a {@link BaseView}.
     *          The promise allows developers with large quickviews to defer / chunk in the quickview code on
     *          demand
     *
     * @remarks `initializer` is not called until `id` is pushed onto the view stack.
     *
     * @remarks A View with a given `id` is only initialized once, and the instance is reused if it is pushed more than once
     *
     * @param id - Unique identifier for the view.
     * @param initializer - Function that returns a new view - or a promise to a new view - which is only called if no view with the `id` already exists.
     */
    register(id: string, initializer: () => TView | Promise<TView>): void;
    /**
     * Pushes a new view to the top of the view stack.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param id - Unique identifier for the view.
     * @param skipUpdate - Whether to skip the update (and re-render) after pushing the new view.
     */
    push(id: string, skipUpdate?: boolean): void;
    /**
     * Replaces the top view with a new view.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param id - Unique identifier for the view.
     * @param skipUpdate - Whether to skip the update (and re-render) after replacing the current view.
     */
    replace(id: string, skipUpdate?: boolean): void;
    /**
     * If there is more than one View, pops the top View from the View stack.
     *
     * {@link BaseAdaptiveCardExtension.setState}, which will also trigger a render.
     *
     * @param skipUpdate - Whether to skip the update (and re-render) after popping the current View.
     */
    pop(skipUpdate?: boolean): void;
    /**
     * Current size of the View stack.
     */
    get size(): number;
    /**
     * Get the id of the currently rendered View from the top of the View stack
     * @remarks If the stack is empty, this will return undefined
     */
    get currentId(): string | undefined;
    /* Excluded from this release type: _currentView */
    /* Excluded from this release type: viewStack */
    /* Excluded from this release type: _clear */
    /* Excluded from this release type: _forEach */
    /* Excluded from this release type: _getRegistrySize */
    private _push;
    private _pop;
}

export { }
