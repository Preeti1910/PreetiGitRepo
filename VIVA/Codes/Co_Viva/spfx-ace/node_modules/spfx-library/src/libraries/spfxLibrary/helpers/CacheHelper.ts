import { PnPClientStorage, dateAdd } from '@pnp/common';

export class CacheHelper {

    public constructor() {
      
      }

    /**
     * Store data in local storage cache
     * @param key unique key to store data in cache
     */
    public getLocalStorage(key: string): any {
        try {
            if (!key) {
                return null;
            }

            const pnpStorage = new PnPClientStorage();
            pnpStorage.local.deleteExpired();

            if (!pnpStorage.local.get(key)) {
                return null;
            }
            return pnpStorage.local.get(key);
        } catch (error) {
            return null;
        }
    }

    /**
     * Store data in local storage cache
     * @param key unique key to store data in cacahe
     * @param dataToCache data to cache
     * @param cacheTimeOutIntervalInHours cache timeout interval in minutes
     */
    public setLocalStorage(key: string, dataToCache: any, cacheTimeOutIntervalInHours: string): boolean {
        try {
            if (!key) {
                return false;
            }
            if (!dataToCache) {
                return false;
            }
            if((!cacheTimeOutIntervalInHours) || isNaN(parseInt(cacheTimeOutIntervalInHours))) {
                return false;
            }
            const pnpStorage = new PnPClientStorage();
            pnpStorage.local.put(key, dataToCache, dateAdd(new Date(), 'minute', parseInt(cacheTimeOutIntervalInHours)));
            return true;
        } catch (error) {
            return false;
        }
    }
}
