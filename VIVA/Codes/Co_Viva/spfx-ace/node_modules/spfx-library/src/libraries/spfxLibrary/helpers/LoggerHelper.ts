import { ApplicationInsights } from '@microsoft/applicationinsights-web';
import { ReactPlugin } from '@microsoft/applicationinsights-react-js';
import { Constants } from './Constants';
/**
 * Logger helper class.
 */
export class LoggerHelper {

    private appInsights: ApplicationInsights;
    private applicationName: string;
    private loggedInUserEmail: string;

    constructor(applicationName: string, appInsightsConnectionString: string,pageContext?:any) {

        this.applicationName = applicationName;

        //user email for adaptive card
        try {
            if (typeof pageContext !== 'undefined' && pageContext !== null) {
                if (pageContext.user.email) {
                    this.loggedInUserEmail = pageContext.user.email;
                }
            }
           
        } catch (error) {
        }
        var reactPlugin = new ReactPlugin();
        if (appInsightsConnectionString) {
            this.appInsights = new ApplicationInsights({
                config: {
                    connectionString: appInsightsConnectionString,
                    enableAutoRouteTracking: true,
                    extensions: [reactPlugin]
                }
            });

            this.appInsights.loadAppInsights();
        }
    }
   /**
    * Method to track event.
    * @param eventName the eventName.
    * @param objectToSave the objectToSave.
    */
    public trackEvent = (eventName: any, objectToSave?: any) => {
        if (this.appInsights) {
            objectToSave = objectToSave ? objectToSave : {};
            objectToSave['ApplicationName'] = this.applicationName ? this.applicationName : Constants.ApplicationName;
            this.appInsights.trackEvent({ name: eventName }, objectToSave);
        }
    }

    /**
    * Method to  track Exception.
    * @param exception the exception.
    * @param objectToSave the objectToSave.
    */

    public trackException = (exception: any, objectToSave?: any) => {
        if (this.appInsights) {
            objectToSave = objectToSave ? objectToSave : {};
            objectToSave['ApplicationName'] = this.applicationName ? this.applicationName : Constants.ApplicationName;
            if (this.loggedInUserEmail) {
                let message: string = objectToSave['message'];
                message = message + ', loggedInUserEmail=' + this.loggedInUserEmail;
                objectToSave['message'] = message;
            }
            this.appInsights.trackException({ exception: exception }, objectToSave);
        }
    }

    /**
    * Method to  track Trace.
    * @param message the exception.
    * @param objectToSave the objectToSave.
    */
    public trackTrace = (message: any, objectToSave?: any) => {
        if (this.appInsights) {
            objectToSave = objectToSave ? objectToSave : {};
            objectToSave['ApplicationName'] = this.applicationName ? this.applicationName : Constants.ApplicationName;
            if (this.loggedInUserEmail) {
                message = message + ', loggedInUserEmail=' + this.loggedInUserEmail;
            }
            this.appInsights.trackTrace({ message: message }, objectToSave);
        }
    }

     /**
    * Method to  track page view.
    * @param message the exception.
    * @param objectToSave the objectToSave.
    */
     public trackPageView = (pageView:any) => {
        if (this.appInsights) {  
            //setting the app context to show the user_AuthenticatedId in the application insights
        this.appInsights.setAuthenticatedUserContext(this.loggedInUserEmail);        
        this.appInsights.trackPageView(pageView);
        }
     }


}